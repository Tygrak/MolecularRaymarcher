{"version":3,"file":"main.bundle.js","mappings":";;;;;;;;;;AAAY;AACZ;AACA;AACA;AACA,kBAAkB,mBAAO,CAAC,sDAAW;AACrC,kBAAkB,mBAAO,CAAC,+CAAS;AACnC,kBAAkB,mBAAO,CAAC,iEAAc;AACxC,kBAAkB,mBAAO,CAAC,wDAAa;AACvC,kBAAkB,mBAAO,CAAC,sEAAoB;AAC9C,kBAAkB,mBAAO,CAAC,sEAAoB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,MAAM;AACzwCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,gBAAgB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,gBAAgB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,gBAAgB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;;;;;;;;;;;AC3OY;;AAEZ;;AAEA,sBAAsB,mBAAO,CAAC,4FAA6B;AAC3D,sBAAsB,mBAAO,CAAC,gFAAyB;AACvD,sBAAsB,mBAAO,CAAC,mFAA0B;;AAExD;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE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AACA;AACA;AACA;AACA;AACA,2BAA2B,MAAM;AACjC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,MAAM;AACjC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB;;;;;;;;;;;ACtCb;;AAEZ;;AAEA,mBAAmB,mBAAO,CAAC,8DAAe;AAC1C,cAAc,mBAAO,CAAC,kFAAsB;;AAE5C;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,KAAK;AACtB;AACA;AACA,IAAI;AACJ;AACA;AACA,iBAAiB,KAAK;AACtB;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,KAAK;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,KAAK;AACxB;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,KAAK;AACtB;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,KAAK;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,KAAK;AACxB;AACA;AACA,MAAM;AACN;AACA,mBAAmB,KAAK;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,8BAA8B,MAAM;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,iBAAiB,KAAK;AACtB;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,KAAK;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AClSA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AC3BA;;AAEA;AACA;AACA;AACA,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AC1BA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;AC7BA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;AC9CA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACpDA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AC1BA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;ACtDA,eAAe,mBAAO,CAAC,sDAAY;;AAEnC;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;ACzFA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,WAAW,WAAW;AACrC;AACA;AACA;AACA;;AAEA,eAAe,WAAW,YAAY;AACtC;AACA;AACA;AACA;;AAEA,gBAAgB,YAAY,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACzCA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,gBAAgB,YAAY,YAAY;AACxC,gBAAgB,YAAY,YAAY;AACxC,gBAAgB,YAAY,aAAa;;AAEzC;AACA,yBAAyB,yBAAyB;AAClD,6BAA6B,qBAAqB;AAClD,6BAA6B,yBAAyB;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AC/DA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AC3CA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AC3CA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AC3CA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AC9BA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,oBAAoB,YAAY,YAAY;AAC5C,oBAAoB,YAAY,YAAY;AAC5C,oBAAoB,YAAY,aAAa;;AAE7C,sBAAsB,cAAc,cAAc;AAClD,sBAAsB,cAAc,cAAc;AAClD,sBAAsB,cAAc,eAAe;;AAEnD;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;ACrCA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AChDA;AACA;AACA;AACA;AACA;AACO;AACA;AACA;AACP;AACA;AACA;AACA,WAAW,4CAA4C;AACvD;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjDwC;AACN;AACE;AACF;AACA;AACA;AACE;AACF;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTM;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;;AAEnC,MAAM,kDAAmB;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA,iBAAiB;;AAEjB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB;AAC7S;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/aiC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB;;AAEO;AACP,gBAAgB,kDAAmB;;AAEnC,MAAM,kDAAmB;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa,OAAO;AACpB;;AAEO;AACP,gBAAgB,kDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;;AAEO;AACP,gBAAgB,kDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,eAAe;AAC1B,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,eAAe;AAC1B,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,eAAe;AAC1B,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,eAAe;AAC1B,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,eAAe;AAC1B,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB;AACvd;AACA;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACreiC;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;;AAEnC,MAAM,kDAAmB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;;AAEnC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,eAAe;AAC1B,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB;AACA,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB;AACA,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;;AAEnC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB;AACttB;AACA;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzwBiC;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;;AAEnC,MAAM,kDAAmB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;;AAEnC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;;AAEnC;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY,+CAAgB;AAC5B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;;AAGJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;;AAGJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;;AAGJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEA,YAAY,+CAAgB;AAC5B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,eAAe;AAC1B,aAAa,MAAM;AACnB;;AAEO;AACP,wBAAwB,kDAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;;AAEzD;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,MAAM;AAClB,YAAY,cAAc;AAC1B,YAAY,MAAM;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,MAAM;AAClB,YAAY,cAAc;AAC1B,YAAY,MAAM;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,YAAY,MAAM;AAClB;;AAEO;AACP,oBAAoB,kDAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB;AACA,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iCAAiC,+CAAgB,+BAA+B,+CAAgB,+BAA+B,+CAAgB;AAC/I;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,uEAAuE,+CAAgB,yEAAyE,+CAAgB,yEAAyE,+CAAgB,yEAAyE,+CAAgB,yEAAyE,+CAAgB,yEAAyE,+CAAgB;AAC/zC;AACA;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrxDiC;AACN;AACA;AACA;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;;AAEnC,MAAM,kDAAmB;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,MAAM;AAClB,YAAY,cAAc;AAC1B,YAAY,YAAY;AACxB;;AAEO;AACP;AACA;;AAEA,UAAU,+CAAgB;AAC1B;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,cAAc;AAC1B,YAAY,cAAc;AAC1B,YAAY,YAAY;AACxB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;;AAE3C,iDAAiD;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;;AAGJ,oBAAoB,+CAAgB;AACpC;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;;;AAGJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA,WAAW,8CAAe;AAC1B,WAAW,8CAAe;AAC1B,WAAW,8CAAe;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,oCAAoC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;AACA;;AAEO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA,qCAAqC;;AAErC;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,aAAa,MAAM;AACnB;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;AACA;;AAEO,YAAY,2CAAU;AAC7B;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;AACA;;AAEO,iBAAiB,gDAAe;AACvC;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;AACA;;AAEO,WAAW,0CAAS;AAC3B;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;AACA;;AAEO,UAAU,yCAAQ;AACzB;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;AACA;;AAEO,UAAU,yCAAQ;AACzB;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;AACA;;AAEO,YAAY,2CAAU;AAC7B;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;AACA;;AAEO,UAAU,yCAAQ;AACzB;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;AACA;;AAEO,WAAW,0CAAS;AAC3B;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO,aAAa,4CAAW;AAC/B;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;AACA;;AAEO,oBAAoB,mDAAkB;AAC7C;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;AACA;;AAEO,gBAAgB,+CAAc;AACrC;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,SAAS;AACtB;;AAEO,kBAAkB,iDAAgB;AACzC;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,SAAS;AACtB;;AAEO,aAAa,4CAAW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,4CAAW;AAC3B,kBAAkB,gDAAe;AACjC,kBAAkB,gDAAe;AACjC;AACA,cAAc,yCAAQ;;AAEtB;AACA,MAAM,2CAAU;AAChB,UAAU,yCAAQ,sBAAsB,2CAAU;AAClD,MAAM,+CAAc;AACpB;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,MAAM,2CAAU;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP,aAAa,4CAAW;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrsBuC;AACN;AACA;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB;;AAEO;AACP,eAAe,kDAAmB;;AAElC,MAAM,kDAAmB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa,OAAO;AACpB;AACA;;AAEO;AACP,eAAe,kDAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;;AAEO;AACP,eAAe,kDAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;;AAEO;AACP,eAAe,kDAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;AACA;;AAEO;AACP;AACA,cAAc,4CAAW;AACzB,EAAE,iDAAgB;AAClB,cAAc,kDAAmB;AACjC,EAAE,oDAAmB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,aAAa,OAAO;AACpB;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,MAAM;AAClB,YAAY,eAAe;AAC3B,YAAY,MAAM;AAClB;;AAEO,cAAc,0CAAS;AAC9B;AACA;AACA,YAAY,MAAM;AAClB,YAAY,eAAe;AAC3B,YAAY,MAAM;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;AACA;;AAEO,cAAc,0CAAS;AAC9B;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,MAAM;AAClB,YAAY,eAAe;AAC3B,YAAY,MAAM;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,6CAAY;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,6CAAY;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,6CAAY;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,eAAe;AAC1B,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA,sBAAsB,+CAAgB;AACtC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,eAAe;AAC1B,aAAa,OAAO;AACpB;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,eAAe;AAC1B,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,eAAe;AAC1B,aAAa,QAAQ;AACrB;AACA;;AAEO,UAAU,yCAAQ;AACzB;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa,QAAQ;AACrB;AACA;;AAEO,aAAa,4CAAW;AAC/B;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa,QAAQ;AACrB;AACA;;AAEO,oBAAoB,mDAAkB;AAC7C;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,aAAa,OAAO;AACpB;AACA;;AAEO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,eAAe;AAC1B,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,eAAe;AAC1B,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB;AACjoB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACl0BwC;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;;AAEnC,MAAM,kDAAmB;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA,UAAU,8CAAe;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,eAAe;AAC1B,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA,4BAA4B;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;;AAE7C;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA,8BAA8B,+CAAgB,qEAAqE,+CAAgB;AACnI;AACA;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;;AAEO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;;AAEA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/mBuC;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;;AAEnC,MAAM,kDAAmB;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA,UAAU,8CAAe;AACzB,UAAU,8CAAe;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA,6BAA6B;;AAE7B;AACA;AACA,kCAAkC;;AAElC;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA,cAAc;;AAEd;AACA;AACA,sBAAsB;;AAEtB;AACA;AACA,sDAAsD;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA,cAAc;;AAEd;AACA;AACA,sBAAsB;;AAEtB;AACA;AACA,sDAAsD;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA,cAAc;;AAEd;AACA;AACA,sBAAsB;;AAEtB;AACA;AACA,eAAe;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB;AACxN;AACA;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;;AAEO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;;AAEA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClxBuC;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;;AAEnC,MAAM,kDAAmB;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP,wBAAwB;AACxB;AACA;;AAEA;AACA;;AAEA;AACA,SAAS,8CAAe;AACxB,SAAS,8CAAe;AACxB;AACA,IAAI;;AAEJ;AACA,SAAS,8CAAe;AACxB,SAAS,8CAAe;AACxB;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA,sCAAsC;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB;AAC7S;AACA;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;;AAEO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;;AAEA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;;;;;;;;;ACtpBD;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;AClDA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;AClBA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;;;;;;;;;ACXA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACbA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACnBA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACtBY;AACZ;AACA,gBAAgB,mBAAO,CAAC,uDAAY;AACpC;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACvBA;;;;;;;;;;ACAA;AACA;AACA,sBAAsB;AACtB,sBAAsB;AACtB,sBAAsB;AACtB,sBAAsB;AACtB,sBAAsB;AACtB,sBAAsB;AACtB;;;AAGA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,mBAAO,CAAC,+DAAa;;AAErC,aAAa,mBAAO,CAAC,wDAAgB;AACrC,YAAY,mBAAO,CAAC,sDAAe;AACnC,kBAAkB,mBAAO,CAAC,kEAAqB;AAC/C,aAAa,mBAAO,CAAC,wDAAgB;AACrC,gBAAgB,mBAAO,CAAC,8DAAmB;AAC3C;AACA,YAAY,mBAAO,CAAC,wDAAgB;AACpC,eAAe,mBAAO,CAAC,8DAAmB;AAC1C,SAAS,mBAAO,CAAC,kDAAa;AAC9B,WAAW,mBAAO,CAAC,sDAAe;AAClC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;AClLA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,MAAM;AACxB;AACA;AACA;;;;;;;;;;ACTA,WAAW,mBAAO,CAAC,oDAAc;;AAEjC,gBAAgB,mBAAO,CAAC,8DAAgB;AACxC,gBAAgB,mBAAO,CAAC,8DAAgB;AACxC,kBAAkB,mBAAO,CAAC,kEAAqB;AAC/C,YAAY,mBAAO,CAAC,sDAAY;;AAEhC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;ACnDA;AACA,sBAAsB;AACtB,sBAAsB;AACtB,sBAAsB;AACtB,sBAAsB;AACtB,sBAAsB;AACtB,sBAAsB;;AAEtB;AACA;;AAEA;AACA,cAAc,mBAAO,CAAC,4DAAkB;AACxC,eAAe,mBAAO,CAAC,8DAAmB;AAC1C,cAAc,mBAAO,CAAC,4DAAkB;AACxC,YAAY,mBAAO,CAAC,wDAAgB;AACpC,WAAW,mBAAO,CAAC,sDAAe;AAClC,6BAA6B,mBAAO,CAAC,0FAAiC;AACtE;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;AC3DY;AACZ;AACA,gBAAgB,mBAAO,CAAC,kFAAsB;AAC9C,gBAAgB,mBAAO,CAAC,kEAAkB;AAC1C,gBAAgB,mBAAO,CAAC,wDAAgB;AACxC,gBAAgB,mBAAO,CAAC,0DAAiB;AACzC,gBAAgB,mBAAO,CAAC,0DAAiB;AACzC,gBAAgB,mBAAO,CAAC,0DAAiB;AACzC,gBAAgB,mBAAO,CAAC,wDAAgB;AACxC,gBAAgB,mBAAO,CAAC,8DAAmB;AAC3C,gBAAgB,mBAAO,CAAC,sDAAe;AACvC,gBAAgB,mBAAO,CAAC,8DAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,MAAM;AACvB;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA,mBAAmB,MAAM;AACzB;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACrMY;;AAEZ;;AAEA,YAAY,mBAAO,CAAC,wDAAa;;AAEjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB,iBAAiB;AAC1C;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA,yBAAyB,oBAAoB;AAC7C;AACA,KAAK;AACL;AACA,yBAAyB,UAAU;AACnC;AACA,KAAK;AACL;AACA,yBAAyB,UAAU;AACnC;AACA,KAAK;AACL;AACA,yBAAyB,aAAa;AACtC;AACA;AACA,GAAG;;AAEH;AACA;;;;;;;;;;;AC5MA,qBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;;;;;;;;;;;ACxBY;;AAEZ;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;;AAEf;AACA;AACA;AACA,eAAe;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;;;;;;;;;;;AC3DG;;AAEZ,WAAW,mBAAO,CAAC,8CAAO;;AAE1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACvCY;;AAEZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACxCY;;AAEZ;;AAEA,oBAAoB,mBAAO,CAAC,+DAAiB;AAC7C,oBAAoB,mBAAO,CAAC,wDAAgB;AAC5C,oBAAoB,mBAAO,CAAC,4DAAkB;AAC9C,oBAAoB,mBAAO,CAAC,wDAAgB;AAC5C,oBAAoB,mBAAO,CAAC,wFAAqB;;AAEjD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,KAAK;AACpB;AACA,iBAAiB,KAAK;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,KAAK;AACpB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;ACxYA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACTA;;;;;;;;;;ACAA;AACA,EAAE,qBAAM;AACR,EAAE,qBAAM;AACR;AACA,IAAI;AACJ;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA,MAA+F;AAC/F,MAAqF;AACrF,MAA4F;AAC5F,MAA+G;AAC/G,MAAwG;AACxG,MAAwG;AACxG,MAAkG;AAClG;AACA;;AAEA;;AAEA,4BAA4B,qGAAmB;AAC/C,wBAAwB,kHAAa;;AAErC,uBAAuB,uGAAa;AACpC;AACA,iBAAiB,+FAAM;AACvB,6BAA6B,sGAAkB;;AAE/C,aAAa,0GAAG,CAAC,qFAAO;;;;AAI4C;AACpE,OAAO,iEAAe,qFAAO,IAAI,4FAAc,GAAG,4FAAc,YAAY,EAAC;;;;;;;;;;;;AC1BhE;;AAEb;;AAEA;AACA;;AAEA,kBAAkB,wBAAwB;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,4BAA4B;AAChD;AACA;AACA;AACA;;AAEA;;AAEA,qBAAqB,6BAA6B;AAClD;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;ACvGa;;AAEb;AACA;;AAEA;AACA;AACA,sDAAsD;;AAEtD;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;ACtCa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;ACVa;;AAEb;AACA;AACA,cAAc,KAAwC,GAAG,sBAAiB,GAAG,CAAI;;AAEjF;AACA;AACA;AACA;;AAEA;;;;;;;;;;;ACXa;;AAEb;AACA;AACA;;AAEA;AACA,kDAAkD;AAClD;;AAEA;AACA,0CAA0C;AAC1C;;AAEA;;AAEA;AACA,iFAAiF;AACjF;;AAEA;;AAEA;AACA,aAAa;AACb;;AAEA;AACA,aAAa;AACb;;AAEA;AACA,aAAa;AACb;;AAEA;;AAEA;AACA,yDAAyD;AACzD,IAAI;;AAEJ;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;ACrEa;;AAEb;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;ACfY;;AAE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K,wGAAwG,2CAA2C,yDAAyD,+EAA+E,yCAAyC,KAAK,oGAAoG,2CAA2C,wDAAwD,yDAAyD,gIAAgI,yCAAyC,KAAK,sGAAsG,2CAA2C,wDAAwD,kCAAkC,6FAA6F,yCAAyC,KAAK;;;;;;;;;;;ACA1lmB;;AAEZ;;AAEA,mBAAmB,mBAAO,CAAC,+DAAiB;AAC5C,mBAAmB,mBAAO,CAAC,wDAAgB;AAC3C,mBAAmB,mBAAO,CAAC,wDAAgB;AAC3C,mBAAmB,mBAAO,CAAC,sDAAe;AAC1C,mBAAmB,mBAAO,CAAC,8DAAmB;AAC9C,mBAAmB,mBAAO,CAAC,kDAAa;;AAExC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA,eAAe,KAAK;AACpB;AACA;AACA;AACA,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,KAAK;AACpB;AACA;;AAEA,eAAe,KAAK;AACpB;AACA,iBAAiB,KAAK;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,KAAK;AACtB;AACA;AACA;AACA;AACA;AACA,iBAAiB,KAAK;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UC3jBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;;;;;UEAA;UACA;UACA;UACA","sources":["webpack://webgpu/./node_modules/3d-view-controls/camera.js","webpack://webgpu/./node_modules/3d-view/view.js","webpack://webgpu/./node_modules/binary-search-bounds/search-bounds.js","webpack://webgpu/./src/site.css","webpack://webgpu/./node_modules/css-loader/dist/runtime/api.js","webpack://webgpu/./node_modules/css-loader/dist/runtime/cssWithMappingToString.js","webpack://webgpu/./node_modules/cubic-hermite/hermite.js","webpack://webgpu/./node_modules/filtered-vector/fvec.js","webpack://webgpu/./node_modules/gl-mat4/clone.js","webpack://webgpu/./node_modules/gl-mat4/create.js","webpack://webgpu/./node_modules/gl-mat4/determinant.js","webpack://webgpu/./node_modules/gl-mat4/fromQuat.js","webpack://webgpu/./node_modules/gl-mat4/fromRotationTranslation.js","webpack://webgpu/./node_modules/gl-mat4/identity.js","webpack://webgpu/./node_modules/gl-mat4/invert.js","webpack://webgpu/./node_modules/gl-mat4/lookAt.js","webpack://webgpu/./node_modules/gl-mat4/multiply.js","webpack://webgpu/./node_modules/gl-mat4/rotate.js","webpack://webgpu/./node_modules/gl-mat4/rotateX.js","webpack://webgpu/./node_modules/gl-mat4/rotateY.js","webpack://webgpu/./node_modules/gl-mat4/rotateZ.js","webpack://webgpu/./node_modules/gl-mat4/scale.js","webpack://webgpu/./node_modules/gl-mat4/translate.js","webpack://webgpu/./node_modules/gl-mat4/transpose.js","webpack://webgpu/./node_modules/gl-matrix/esm/common.js","webpack://webgpu/./node_modules/gl-matrix/esm/index.js","webpack://webgpu/./node_modules/gl-matrix/esm/mat2.js","webpack://webgpu/./node_modules/gl-matrix/esm/mat2d.js","webpack://webgpu/./node_modules/gl-matrix/esm/mat3.js","webpack://webgpu/./node_modules/gl-matrix/esm/mat4.js","webpack://webgpu/./node_modules/gl-matrix/esm/quat.js","webpack://webgpu/./node_modules/gl-matrix/esm/quat2.js","webpack://webgpu/./node_modules/gl-matrix/esm/vec2.js","webpack://webgpu/./node_modules/gl-matrix/esm/vec3.js","webpack://webgpu/./node_modules/gl-matrix/esm/vec4.js","webpack://webgpu/./node_modules/gl-quat/slerp.js","webpack://webgpu/./node_modules/gl-vec3/cross.js","webpack://webgpu/./node_modules/gl-vec3/dot.js","webpack://webgpu/./node_modules/gl-vec3/length.js","webpack://webgpu/./node_modules/gl-vec3/lerp.js","webpack://webgpu/./node_modules/gl-vec3/normalize.js","webpack://webgpu/./node_modules/has-passive-events/index.js","webpack://webgpu/./node_modules/is-browser/client.js","webpack://webgpu/./node_modules/mat4-decompose/index.js","webpack://webgpu/./node_modules/mat4-decompose/normalize.js","webpack://webgpu/./node_modules/mat4-interpolate/index.js","webpack://webgpu/./node_modules/mat4-recompose/index.js","webpack://webgpu/./node_modules/matrix-camera-controller/matrix.js","webpack://webgpu/./node_modules/mouse-change/mouse-listen.js","webpack://webgpu/./node_modules/mouse-event-offset/index.js","webpack://webgpu/./node_modules/mouse-event/mouse.js","webpack://webgpu/./node_modules/mouse-wheel/wheel.js","webpack://webgpu/./node_modules/orbit-camera-controller/lib/quatFromFrame.js","webpack://webgpu/./node_modules/orbit-camera-controller/orbit.js","webpack://webgpu/./node_modules/parse-unit/index.js","webpack://webgpu/./node_modules/quat-slerp/index.js","webpack://webgpu/./node_modules/right-now/browser.js","webpack://webgpu/./src/site.css?7390","webpack://webgpu/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js","webpack://webgpu/./node_modules/style-loader/dist/runtime/insertBySelector.js","webpack://webgpu/./node_modules/style-loader/dist/runtime/insertStyleElement.js","webpack://webgpu/./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js","webpack://webgpu/./node_modules/style-loader/dist/runtime/styleDomAPI.js","webpack://webgpu/./node_modules/style-loader/dist/runtime/styleTagTransform.js","webpack://webgpu/./node_modules/to-px/browser.js","webpack://webgpu/./src/atom.ts","webpack://webgpu/./src/atomDatabase.ts","webpack://webgpu/./src/axisMesh.ts","webpack://webgpu/./src/benchmark.ts","webpack://webgpu/./src/chain.ts","webpack://webgpu/./src/chainMesh.ts","webpack://webgpu/./src/helper.ts","webpack://webgpu/./src/impostorRenderer.ts","webpack://webgpu/./src/kdtree.ts","webpack://webgpu/./src/loadData.ts","webpack://webgpu/./src/main.ts","webpack://webgpu/./src/meshHelpers.ts","webpack://webgpu/./src/octree.ts","webpack://webgpu/./src/rayMarchOctreeQuad.ts","webpack://webgpu/./src/residue.ts","webpack://webgpu/./src/residueDatabase.ts","webpack://webgpu/./src/structure.ts","webpack://webgpu/./src/wgslPreprocessor.ts","webpack://webgpu/./src/shaders/drawModeDefinitions.wgsl","webpack://webgpu/./src/shaders/grid.wgsl","webpack://webgpu/./src/shaders/impostor.wgsl","webpack://webgpu/./src/shaders/raymarchOctree.wgsl","webpack://webgpu/./src/shaders/shader.wgsl","webpack://webgpu/./src/shaders/utilities.wgsl","webpack://webgpu/./node_modules/turntable-camera-controller/turntable.js","webpack://webgpu/webpack/bootstrap","webpack://webgpu/webpack/runtime/compat get default export","webpack://webgpu/webpack/runtime/define property getters","webpack://webgpu/webpack/runtime/global","webpack://webgpu/webpack/runtime/hasOwnProperty shorthand","webpack://webgpu/webpack/runtime/make namespace object","webpack://webgpu/webpack/runtime/nonce","webpack://webgpu/webpack/before-startup","webpack://webgpu/webpack/startup","webpack://webgpu/webpack/after-startup"],"sourcesContent":["'use strict'\r\n\r\nmodule.exports = createCamera\r\n\r\nvar now         = require('right-now')\r\nvar createView  = require('3d-view')\r\nvar mouseChange = require('mouse-change')\r\nvar mouseWheel  = require('mouse-wheel')\r\nvar mouseOffset = require('mouse-event-offset')\r\nvar hasPassive  = require('has-passive-events')\r\n\r\nfunction createCamera(element, options) {\r\n  element = element || document.body\r\n  options = options || {}\r\n\r\n  var limits  = [ 0.01, Infinity ]\r\n  if('distanceLimits' in options) {\r\n    limits[0] = options.distanceLimits[0]\r\n    limits[1] = options.distanceLimits[1]\r\n  }\r\n  if('zoomMin' in options) {\r\n    limits[0] = options.zoomMin\r\n  }\r\n  if('zoomMax' in options) {\r\n    limits[1] = options.zoomMax\r\n  }\r\n\r\n  var view = createView({\r\n    center: options.center || [0,0,0],\r\n    up:     options.up     || [0,1,0],\r\n    eye:    options.eye    || [0,0,10],\r\n    mode:   options.mode   || 'orbit',\r\n    distanceLimits: limits\r\n  })\r\n\r\n  var pmatrix = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\r\n  var distance = 0.0\r\n  var width   = element.clientWidth\r\n  var height  = element.clientHeight\r\n\r\n  var camera = {\r\n    view:               view,\r\n    element:            element,\r\n    delay:              options.delay          || 16,\r\n    rotateSpeed:        options.rotateSpeed    || 1,\r\n    zoomSpeed:          options.zoomSpeed      || 1,\r\n    translateSpeed:     options.translateSpeed || 1,\r\n    flipX:              !!options.flipX,\r\n    flipY:              !!options.flipY,\r\n    modes:              view.modes,\r\n    tick: function() {\r\n      var t = now()\r\n      var delay = this.delay\r\n      view.idle(t-delay)\r\n      view.flush(t-(100+delay*2))\r\n      var ctime = t - 2 * delay\r\n      view.recalcMatrix(ctime)\r\n      var allEqual = true\r\n      var matrix = view.computedMatrix\r\n      for(var i=0; i<16; ++i) {\r\n        allEqual = allEqual && (pmatrix[i] === matrix[i])\r\n        pmatrix[i] = matrix[i]\r\n      }\r\n      var sizeChanged =\r\n          element.clientWidth === width &&\r\n          element.clientHeight === height\r\n      width  = element.clientWidth\r\n      height = element.clientHeight\r\n      if(allEqual) {\r\n        return !sizeChanged\r\n      }\r\n      distance = Math.exp(view.computedRadius[0])\r\n      return true\r\n    },\r\n    lookAt: function(center, eye, up) {\r\n      view.lookAt(view.lastT(), center, eye, up)\r\n    },\r\n    rotate: function(pitch, yaw, roll) {\r\n      view.rotate(view.lastT(), pitch, yaw, roll)\r\n    },\r\n    pan: function(dx, dy, dz) {\r\n      view.pan(view.lastT(), dx, dy, dz)\r\n    },\r\n    translate: function(dx, dy, dz) {\r\n      view.translate(view.lastT(), dx, dy, dz)\r\n    }\r\n  }\r\n\r\n  Object.defineProperties(camera, {\r\n    matrix: {\r\n      get: function() {\r\n        return view.computedMatrix\r\n      },\r\n      set: function(mat) {\r\n        view.setMatrix(view.lastT(), mat)\r\n        return view.computedMatrix\r\n      },\r\n      enumerable: true\r\n    },\r\n    mode: {\r\n      get: function() {\r\n        return view.getMode()\r\n      },\r\n      set: function(mode) {\r\n        view.setMode(mode)\r\n        return view.getMode()\r\n      },\r\n      enumerable: true\r\n    },\r\n    center: {\r\n      get: function() {\r\n        return view.computedCenter\r\n      },\r\n      set: function(ncenter) {\r\n        view.lookAt(view.lastT(), ncenter)\r\n        return view.computedCenter\r\n      },\r\n      enumerable: true\r\n    },\r\n    eye: {\r\n      get: function() {\r\n        return view.computedEye\r\n      },\r\n      set: function(neye) {\r\n        view.lookAt(view.lastT(), null, neye)\r\n        return view.computedEye\r\n      },\r\n      enumerable: true\r\n    },\r\n    up: {\r\n      get: function() {\r\n        return view.computedUp\r\n      },\r\n      set: function(nup) {\r\n        view.lookAt(view.lastT(), null, null, nup)\r\n        return view.computedUp\r\n      },\r\n      enumerable: true\r\n    },\r\n    distance: {\r\n      get: function() {\r\n        return distance\r\n      },\r\n      set: function(d) {\r\n        view.setDistance(view.lastT(), d)\r\n        return d\r\n      },\r\n      enumerable: true\r\n    },\r\n    distanceLimits: {\r\n      get: function() {\r\n        return view.getDistanceLimits(limits)\r\n      },\r\n      set: function(v) {\r\n        view.setDistanceLimits(v)\r\n        return v\r\n      },\r\n      enumerable: true\r\n    }\r\n  })\r\n\r\n  element.addEventListener('contextmenu', function(ev) {\r\n    ev.preventDefault()\r\n    return false\r\n  })\r\n\r\n  var lastX = 0, lastY = 0, lastMods = {shift: false, control: false, alt: false, meta: false}\r\n  mouseChange(element, handleInteraction)\r\n\r\n  //enable simple touch interactions\r\n  element.addEventListener('touchstart', function (ev) {\r\n    var xy = mouseOffset(ev.changedTouches[0], element)\r\n    handleInteraction(0, xy[0], xy[1], lastMods)\r\n    handleInteraction(1, xy[0], xy[1], lastMods)\r\n\r\n    ev.preventDefault()\r\n  }, hasPassive ? {passive: false} : false)\r\n\r\n  element.addEventListener('touchmove', function (ev) {\r\n    var xy = mouseOffset(ev.changedTouches[0], element)\r\n    handleInteraction(1, xy[0], xy[1], lastMods)\r\n\r\n    ev.preventDefault()\r\n  }, hasPassive ? {passive: false} : false)\r\n\r\n  element.addEventListener('touchend', function (ev) {\r\n    var xy = mouseOffset(ev.changedTouches[0], element)\r\n    handleInteraction(0, lastX, lastY, lastMods)\r\n\r\n    ev.preventDefault()\r\n  }, hasPassive ? {passive: false} : false)\r\n\r\n  function handleInteraction (buttons, x, y, mods) {\r\n    var scale = 1.0 / element.clientHeight\r\n    var dx    = scale * (x - lastX)\r\n    var dy    = scale * (y - lastY)\r\n\r\n    var flipX = camera.flipX ? 1 : -1\r\n    var flipY = camera.flipY ? 1 : -1\r\n\r\n    var drot  = Math.PI * camera.rotateSpeed\r\n\r\n    var t = now()\r\n\r\n    if(buttons & 1) {\r\n      if(mods.shift) {\r\n        view.rotate(t, 0, 0, -dx * drot)\r\n      } else {\r\n        view.rotate(t, flipX * drot * dx, -flipY * drot * dy, 0)\r\n      }\r\n    } else if(buttons & 2) {\r\n      view.pan(t, -camera.translateSpeed * dx * distance, camera.translateSpeed * dy * distance, 0)\r\n    } else if(buttons & 4) {\r\n      var kzoom = camera.zoomSpeed * dy / window.innerHeight * (t - view.lastT()) * 50.0\r\n      view.pan(t, 0, 0, distance * (Math.exp(kzoom) - 1))\r\n    }\r\n\r\n    lastX = x\r\n    lastY = y\r\n    lastMods = mods\r\n  }\r\n\r\n  mouseWheel(element, function(dx, dy, dz) {\r\n    var flipX = camera.flipX ? 1 : -1\r\n    var flipY = camera.flipY ? 1 : -1\r\n    var t = now()\r\n    if(Math.abs(dx) > Math.abs(dy)) {\r\n      view.rotate(t, 0, 0, -dx * flipX * Math.PI * camera.rotateSpeed / window.innerWidth)\r\n    } else {\r\n      var kzoom = camera.zoomSpeed * flipY * dy / window.innerHeight * (t - view.lastT()) / 100.0\r\n      view.pan(t, 0, 0, distance * (Math.exp(kzoom) - 1))\r\n    }\r\n  }, true)\r\n\r\n  return camera\r\n}\r\n","'use strict'\n\nmodule.exports = createViewController\n\nvar createTurntable = require('turntable-camera-controller')\nvar createOrbit     = require('orbit-camera-controller')\nvar createMatrix    = require('matrix-camera-controller')\n\nfunction ViewController(controllers, mode) {\n  this._controllerNames = Object.keys(controllers)\n  this._controllerList = this._controllerNames.map(function(n) {\n    return controllers[n]\n  })\n  this._mode   = mode\n  this._active = controllers[mode]\n  if(!this._active) {\n    this._mode   = 'turntable'\n    this._active = controllers.turntable\n  }\n  this.modes = this._controllerNames\n  this.computedMatrix = this._active.computedMatrix\n  this.computedEye    = this._active.computedEye\n  this.computedUp     = this._active.computedUp\n  this.computedCenter = this._active.computedCenter\n  this.computedRadius = this._active.computedRadius\n}\n\nvar proto = ViewController.prototype\n\nvar COMMON_METHODS = [\n  ['flush', 1],\n  ['idle', 1],\n  ['lookAt', 4],\n  ['rotate', 4],\n  ['pan', 4],\n  ['translate', 4],\n  ['setMatrix', 2],\n  ['setDistanceLimits', 2],\n  ['setDistance', 2]\n]\n\nCOMMON_METHODS.forEach(function(method) {\n  var name = method[0]\n  var argNames = []\n  for(var i=0; i<method[1]; ++i) {\n    argNames.push('a'+i)\n  }\n  var code = 'var cc=this._controllerList;for(var i=0;i<cc.length;++i){cc[i].'+method[0]+'('+argNames.join()+')}'\n  proto[name] = Function.apply(null, argNames.concat(code))\n})\n\nproto.recalcMatrix = function(t) {\n  this._active.recalcMatrix(t)\n}\n\nproto.getDistance = function(t) {\n  return this._active.getDistance(t)\n}\nproto.getDistanceLimits = function(out) {\n  return this._active.getDistanceLimits(out)\n}\n\nproto.lastT = function() {\n  return this._active.lastT()\n}\n\nproto.setMode = function(mode) {\n  if(mode === this._mode) {\n    return\n  }\n  var idx = this._controllerNames.indexOf(mode)\n  if(idx < 0) {\n    return\n  }\n  var prev  = this._active\n  var next  = this._controllerList[idx]\n  var lastT = Math.max(prev.lastT(), next.lastT())\n\n  prev.recalcMatrix(lastT)\n  next.setMatrix(lastT, prev.computedMatrix)\n  \n  this._active = next\n  this._mode   = mode\n\n  //Update matrix properties\n  this.computedMatrix = this._active.computedMatrix\n  this.computedEye    = this._active.computedEye\n  this.computedUp     = this._active.computedUp\n  this.computedCenter = this._active.computedCenter\n  this.computedRadius = this._active.computedRadius\n}\n\nproto.getMode = function() {\n  return this._mode\n}\n\nfunction createViewController(options) {\n  options = options || {}\n\n  var eye       = options.eye    || [0,0,1]\n  var center    = options.center || [0,0,0]\n  var up        = options.up     || [0,1,0]\n  var limits    = options.distanceLimits || [0, Infinity]\n  var mode      = options.mode   || 'turntable'\n\n  var turntable = createTurntable()\n  var orbit     = createOrbit()\n  var matrix    = createMatrix()\n\n  turntable.setDistanceLimits(limits[0], limits[1])\n  turntable.lookAt(0, eye, center, up)\n  orbit.setDistanceLimits(limits[0], limits[1])\n  orbit.lookAt(0, eye, center, up)\n  matrix.setDistanceLimits(limits[0], limits[1])\n  matrix.lookAt(0, eye, center, up)\n\n  return new ViewController({\n    turntable: turntable,\n    orbit: orbit,\n    matrix: matrix\n  }, mode)\n}","\"use strict\"\n\nfunction compileSearch(funcName, predicate, reversed, extraArgs, useNdarray, earlyOut) {\n  var code = [\n    \"function \", funcName, \"(a,l,h,\", extraArgs.join(\",\"),  \"){\",\nearlyOut ? \"\" : \"var i=\", (reversed ? \"l-1\" : \"h+1\"),\n\";while(l<=h){\\\nvar m=(l+h)>>>1,x=a\", useNdarray ? \".get(m)\" : \"[m]\"]\n  if(earlyOut) {\n    if(predicate.indexOf(\"c\") < 0) {\n      code.push(\";if(x===y){return m}else if(x<=y){\")\n    } else {\n      code.push(\";var p=c(x,y);if(p===0){return m}else if(p<=0){\")\n    }\n  } else {\n    code.push(\";if(\", predicate, \"){i=m;\")\n  }\n  if(reversed) {\n    code.push(\"l=m+1}else{h=m-1}\")\n  } else {\n    code.push(\"h=m-1}else{l=m+1}\")\n  }\n  code.push(\"}\")\n  if(earlyOut) {\n    code.push(\"return -1};\")\n  } else {\n    code.push(\"return i};\")\n  }\n  return code.join(\"\")\n}\n\nfunction compileBoundsSearch(predicate, reversed, suffix, earlyOut) {\n  var result = new Function([\n  compileSearch(\"A\", \"x\" + predicate + \"y\", reversed, [\"y\"], false, earlyOut),\n  compileSearch(\"B\", \"x\" + predicate + \"y\", reversed, [\"y\"], true, earlyOut),\n  compileSearch(\"P\", \"c(x,y)\" + predicate + \"0\", reversed, [\"y\", \"c\"], false, earlyOut),\n  compileSearch(\"Q\", \"c(x,y)\" + predicate + \"0\", reversed, [\"y\", \"c\"], true, earlyOut),\n\"function dispatchBsearch\", suffix, \"(a,y,c,l,h){\\\nif(a.shape){\\\nif(typeof(c)==='function'){\\\nreturn Q(a,(l===undefined)?0:l|0,(h===undefined)?a.shape[0]-1:h|0,y,c)\\\n}else{\\\nreturn B(a,(c===undefined)?0:c|0,(l===undefined)?a.shape[0]-1:l|0,y)\\\n}}else{\\\nif(typeof(c)==='function'){\\\nreturn P(a,(l===undefined)?0:l|0,(h===undefined)?a.length-1:h|0,y,c)\\\n}else{\\\nreturn A(a,(c===undefined)?0:c|0,(l===undefined)?a.length-1:l|0,y)\\\n}}}\\\nreturn dispatchBsearch\", suffix].join(\"\"))\n  return result()\n}\n\nmodule.exports = {\n  ge: compileBoundsSearch(\">=\", false, \"GE\"),\n  gt: compileBoundsSearch(\">\", false, \"GT\"),\n  lt: compileBoundsSearch(\"<\", true, \"LT\"),\n  le: compileBoundsSearch(\"<=\", true, \"LE\"),\n  eq: compileBoundsSearch(\"-\", true, \"EQ\", true)\n}\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"body {\\n   background-color: black;\\n   color: white;\\n}\\n\\n.grid {\\n    display: grid;\\n    height: calc(100vh - 20px);\\n    grid-template-columns: repeat(8, 1fr);\\n    grid-template-rows: 100%;\\n }\\n .grid1 {\\n    display: grid;\\n    height: 35px;\\n    grid-template-columns: repeat(8, 1fr);\\n    grid-template-rows: 35px;\\n }\\n .item1 {\\n    grid-column: 1/3;\\n }\\n .item2 {\\n    grid-column: 3/9;\\n }\\n .item3 {\\n    grid-column: 1/4;\\n }\\n .item4 {\\n    grid-column: 4/8;\\n }\\n\\n select, input[type=\\\"text\\\"]{\\n    width:100%;\\n    height:22px;\\n    box-sizing:border-box;\\n }\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/site.css\"],\"names\":[],\"mappings\":\"AAAA;GACG,uBAAuB;GACvB,YAAY;AACf;;AAEA;IACI,aAAa;IACb,0BAA0B;IAC1B,qCAAqC;IACrC,wBAAwB;CAC3B;CACA;IACG,aAAa;IACb,YAAY;IACZ,qCAAqC;IACrC,wBAAwB;CAC3B;CACA;IACG,gBAAgB;CACnB;CACA;IACG,gBAAgB;CACnB;CACA;IACG,gBAAgB;CACnB;CACA;IACG,gBAAgB;CACnB;;CAEA;IACG,UAAU;IACV,WAAW;IACX,qBAAqB;CACxB\",\"sourcesContent\":[\"body {\\n   background-color: black;\\n   color: white;\\n}\\n\\n.grid {\\n    display: grid;\\n    height: calc(100vh - 20px);\\n    grid-template-columns: repeat(8, 1fr);\\n    grid-template-rows: 100%;\\n }\\n .grid1 {\\n    display: grid;\\n    height: 35px;\\n    grid-template-columns: repeat(8, 1fr);\\n    grid-template-rows: 35px;\\n }\\n .item1 {\\n    grid-column: 1/3;\\n }\\n .item2 {\\n    grid-column: 3/9;\\n }\\n .item3 {\\n    grid-column: 1/4;\\n }\\n .item4 {\\n    grid-column: 4/8;\\n }\\n\\n select, input[type=\\\"text\\\"]{\\n    width:100%;\\n    height:22px;\\n    box-sizing:border-box;\\n }\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (cssWithMappingToString) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item);\n\n      if (item[2]) {\n        return \"@media \".concat(item[2], \" {\").concat(content, \"}\");\n      }\n\n      return content;\n    }).join(\"\");\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery, dedupe) {\n    if (typeof modules === \"string\") {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, \"\"]];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var i = 0; i < this.length; i++) {\n        // eslint-disable-next-line prefer-destructuring\n        var id = this[i][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = [].concat(modules[_i]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      if (mediaQuery) {\n        if (!item[2]) {\n          item[2] = mediaQuery;\n        } else {\n          item[2] = \"\".concat(mediaQuery, \" and \").concat(item[2]);\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};","\"use strict\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nmodule.exports = function cssWithMappingToString(item) {\n  var _item = _slicedToArray(item, 4),\n      content = _item[1],\n      cssMapping = _item[3];\n\n  if (typeof btoa === \"function\") {\n    // eslint-disable-next-line no-undef\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return \"/*# sourceURL=\".concat(cssMapping.sourceRoot || \"\").concat(source, \" */\");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join(\"\\n\");\n  }\n\n  return [content].join(\"\\n\");\n};","\"use strict\"\n\nfunction dcubicHermite(p0, v0, p1, v1, t, f) {\n  var dh00 = 6*t*t-6*t,\n      dh10 = 3*t*t-4*t + 1,\n      dh01 = -6*t*t+6*t,\n      dh11 = 3*t*t-2*t\n  if(p0.length) {\n    if(!f) {\n      f = new Array(p0.length)\n    }\n    for(var i=p0.length-1; i>=0; --i) {\n      f[i] = dh00*p0[i] + dh10*v0[i] + dh01*p1[i] + dh11*v1[i]\n    }\n    return f\n  }\n  return dh00*p0 + dh10*v0 + dh01*p1[i] + dh11*v1\n}\n\nfunction cubicHermite(p0, v0, p1, v1, t, f) {\n  var ti  = (t-1), t2 = t*t, ti2 = ti*ti,\n      h00 = (1+2*t)*ti2,\n      h10 = t*ti2,\n      h01 = t2*(3-2*t),\n      h11 = t2*ti\n  if(p0.length) {\n    if(!f) {\n      f = new Array(p0.length)\n    }\n    for(var i=p0.length-1; i>=0; --i) {\n      f[i] = h00*p0[i] + h10*v0[i] + h01*p1[i] + h11*v1[i]\n    }\n    return f\n  }\n  return h00*p0 + h10*v0 + h01*p1 + h11*v1\n}\n\nmodule.exports = cubicHermite\nmodule.exports.derivative = dcubicHermite","'use strict'\n\nmodule.exports = createFilteredVector\n\nvar cubicHermite = require('cubic-hermite')\nvar bsearch = require('binary-search-bounds')\n\nfunction clamp(lo, hi, x) {\n  return Math.min(hi, Math.max(lo, x))\n}\n\nfunction FilteredVector(state0, velocity0, t0) {\n  this.dimension  = state0.length\n  this.bounds     = [ new Array(this.dimension), new Array(this.dimension) ]\n  for(var i=0; i<this.dimension; ++i) {\n    this.bounds[0][i] = -Infinity\n    this.bounds[1][i] = Infinity\n  }\n  this._state     = state0.slice().reverse()\n  this._velocity  = velocity0.slice().reverse()\n  this._time      = [ t0 ]\n  this._scratch   = [ state0.slice(), state0.slice(), state0.slice(), state0.slice(), state0.slice() ]\n}\n\nvar proto = FilteredVector.prototype\n\nproto.flush = function(t) {\n  var idx = bsearch.gt(this._time, t) - 1\n  if(idx <= 0) {\n    return\n  }\n  this._time.splice(0, idx)\n  this._state.splice(0, idx * this.dimension)\n  this._velocity.splice(0, idx * this.dimension)\n}\n\nproto.curve = function(t) {\n  var time      = this._time\n  var n         = time.length\n  var idx       = bsearch.le(time, t)\n  var result    = this._scratch[0]\n  var state     = this._state\n  var velocity  = this._velocity\n  var d         = this.dimension\n  var bounds    = this.bounds\n  if(idx < 0) {\n    var ptr = d-1\n    for(var i=0; i<d; ++i, --ptr) {\n      result[i] = state[ptr]\n    }\n  } else if(idx >= n-1) {\n    var ptr = state.length-1\n    var tf = t - time[n-1]\n    for(var i=0; i<d; ++i, --ptr) {\n      result[i] = state[ptr] + tf * velocity[ptr]\n    }\n  } else {\n    var ptr = d * (idx+1) - 1\n    var t0  = time[idx]\n    var t1  = time[idx+1]\n    var dt  = (t1 - t0) || 1.0\n    var x0  = this._scratch[1]\n    var x1  = this._scratch[2]\n    var v0  = this._scratch[3]\n    var v1  = this._scratch[4]\n    var steady = true\n    for(var i=0; i<d; ++i, --ptr) {\n      x0[i] = state[ptr]\n      v0[i] = velocity[ptr] * dt\n      x1[i] = state[ptr+d]\n      v1[i] = velocity[ptr+d] * dt\n      steady = steady && (x0[i] === x1[i] && v0[i] === v1[i] && v0[i] === 0.0)\n    }\n    if(steady) {\n      for(var i=0; i<d; ++i) {\n        result[i] = x0[i]\n      }\n    } else {\n      cubicHermite(x0, v0, x1, v1, (t-t0)/dt, result)\n    }\n  }\n  var lo = bounds[0]\n  var hi = bounds[1]\n  for(var i=0; i<d; ++i) {\n    result[i] = clamp(lo[i], hi[i], result[i])\n  }\n  return result\n}\n\nproto.dcurve = function(t) {\n  var time     = this._time\n  var n        = time.length\n  var idx      = bsearch.le(time, t)\n  var result   = this._scratch[0]\n  var state    = this._state\n  var velocity = this._velocity\n  var d        = this.dimension\n  if(idx >= n-1) {\n    var ptr = state.length-1\n    var tf = t - time[n-1]\n    for(var i=0; i<d; ++i, --ptr) {\n      result[i] = velocity[ptr]\n    }\n  } else {\n    var ptr = d * (idx+1) - 1\n    var t0 = time[idx]\n    var t1 = time[idx+1]\n    var dt = (t1 - t0) || 1.0\n    var x0 = this._scratch[1]\n    var x1 = this._scratch[2]\n    var v0 = this._scratch[3]\n    var v1 = this._scratch[4]\n    var steady = true\n    for(var i=0; i<d; ++i, --ptr) {\n      x0[i] = state[ptr]\n      v0[i] = velocity[ptr] * dt\n      x1[i] = state[ptr+d]\n      v1[i] = velocity[ptr+d] * dt\n      steady = steady && (x0[i] === x1[i] && v0[i] === v1[i] && v0[i] === 0.0)\n    }\n    if(steady) {\n      for(var i=0; i<d; ++i) {\n        result[i] = 0.0\n      }\n    } else {\n      cubicHermite.derivative(x0, v0, x1, v1, (t-t0)/dt, result)\n      for(var i=0; i<d; ++i) {\n        result[i] /= dt\n      }\n    }\n  }\n  return result\n}\n\nproto.lastT = function() {\n  var time = this._time\n  return time[time.length-1]\n}\n\nproto.stable = function() {\n  var velocity = this._velocity\n  var ptr = velocity.length\n  for(var i=this.dimension-1; i>=0; --i) {\n    if(velocity[--ptr]) {\n      return false\n    }\n  }\n  return true\n}\n\nproto.jump = function(t) {\n  var t0 = this.lastT()\n  var d  = this.dimension\n  if(t < t0 || arguments.length !== d+1) {\n    return\n  }\n  var state     = this._state\n  var velocity  = this._velocity\n  var ptr       = state.length-this.dimension\n  var bounds    = this.bounds\n  var lo        = bounds[0]\n  var hi        = bounds[1]\n  this._time.push(t0, t)\n  for(var j=0; j<2; ++j) {\n    for(var i=0; i<d; ++i) {\n      state.push(state[ptr++])\n      velocity.push(0)\n    }\n  }\n  this._time.push(t)\n  for(var i=d; i>0; --i) {\n    state.push(clamp(lo[i-1], hi[i-1], arguments[i]))\n    velocity.push(0)\n  }\n}\n\nproto.push = function(t) {\n  var t0 = this.lastT()\n  var d  = this.dimension\n  if(t < t0 || arguments.length !== d+1) {\n    return\n  }\n  var state     = this._state\n  var velocity  = this._velocity\n  var ptr       = state.length-this.dimension\n  var dt        = t - t0\n  var bounds    = this.bounds\n  var lo        = bounds[0]\n  var hi        = bounds[1]\n  var sf        = (dt > 1e-6) ? 1/dt : 0\n  this._time.push(t)\n  for(var i=d; i>0; --i) {\n    var xc = clamp(lo[i-1], hi[i-1], arguments[i])\n    state.push(xc)\n    velocity.push((xc - state[ptr++]) * sf)\n  }\n}\n\nproto.set = function(t) {\n  var d = this.dimension\n  if(t < this.lastT() || arguments.length !== d+1) {\n    return\n  }\n  var state     = this._state\n  var velocity  = this._velocity\n  var bounds    = this.bounds\n  var lo        = bounds[0]\n  var hi        = bounds[1]\n  this._time.push(t)\n  for(var i=d; i>0; --i) {\n    state.push(clamp(lo[i-1], hi[i-1], arguments[i]))\n    velocity.push(0)\n  }\n}\n\nproto.move = function(t) {\n  var t0 = this.lastT()\n  var d  = this.dimension\n  if(t <= t0 || arguments.length !== d+1) {\n    return\n  }\n  var state    = this._state\n  var velocity = this._velocity\n  var statePtr = state.length - this.dimension\n  var bounds   = this.bounds\n  var lo       = bounds[0]\n  var hi       = bounds[1]\n  var dt       = t - t0\n  var sf       = (dt > 1e-6) ? 1/dt : 0.0\n  this._time.push(t)\n  for(var i=d; i>0; --i) {\n    var dx = arguments[i]\n    state.push(clamp(lo[i-1], hi[i-1], state[statePtr++] + dx))\n    velocity.push(dx * sf)\n  }\n}\n\nproto.idle = function(t) {\n  var t0 = this.lastT()\n  if(t < t0) {\n    return\n  }\n  var d        = this.dimension\n  var state    = this._state\n  var velocity = this._velocity\n  var statePtr = state.length-d\n  var bounds   = this.bounds\n  var lo       = bounds[0]\n  var hi       = bounds[1]\n  var dt       = t - t0\n  this._time.push(t)\n  for(var i=d-1; i>=0; --i) {\n    state.push(clamp(lo[i], hi[i], state[statePtr] + dt * velocity[statePtr]))\n    velocity.push(0)\n    statePtr += 1\n  }\n}\n\nfunction getZero(d) {\n  var result = new Array(d)\n  for(var i=0; i<d; ++i) {\n    result[i] = 0.0\n  }\n  return result\n}\n\nfunction createFilteredVector(initState, initVelocity, initTime) {\n  switch(arguments.length) {\n    case 0:\n      return new FilteredVector([0], [0], 0)\n    case 1:\n      if(typeof initState === 'number') {\n        var zero = getZero(initState)\n        return new FilteredVector(zero, zero, 0)\n      } else {\n        return new FilteredVector(initState, getZero(initState.length), 0)\n      }\n    case 2:\n      if(typeof initVelocity === 'number') {\n        var zero = getZero(initState.length)\n        return new FilteredVector(initState, zero, +initVelocity)\n      } else {\n        initTime = 0\n      }\n    case 3:\n      if(initState.length !== initVelocity.length) {\n        throw new Error('state and velocity lengths must match')\n      }\n      return new FilteredVector(initState, initVelocity, initTime)\n  }\n}\n","module.exports = clone;\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nfunction clone(a) {\n    var out = new Float32Array(16);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};","module.exports = create;\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nfunction create() {\n    var out = new Float32Array(16);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};","module.exports = determinant;\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nfunction determinant(a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n};","module.exports = fromQuat;\n\n/**\n * Creates a matrix from a quaternion rotation.\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @returns {mat4} out\n */\nfunction fromQuat(out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        yx = y * x2,\n        yy = y * y2,\n        zx = z * x2,\n        zy = z * y2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n};","module.exports = fromRotationTranslation;\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nfunction fromRotationTranslation(out, q, v) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - (yy + zz);\n    out[1] = xy + wz;\n    out[2] = xz - wy;\n    out[3] = 0;\n    out[4] = xy - wz;\n    out[5] = 1 - (xx + zz);\n    out[6] = yz + wx;\n    out[7] = 0;\n    out[8] = xz + wy;\n    out[9] = yz - wx;\n    out[10] = 1 - (xx + yy);\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n    \n    return out;\n};","module.exports = identity;\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nfunction identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};","module.exports = invert;\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nfunction invert(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32,\n\n        // Calculate the determinant\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) { \n        return null; \n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return out;\n};","var identity = require('./identity');\n\nmodule.exports = lookAt;\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nfunction lookAt(out, eye, center, up) {\n    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,\n        eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2],\n        centerx = center[0],\n        centery = center[1],\n        centerz = center[2];\n\n    if (Math.abs(eyex - centerx) < 0.000001 &&\n        Math.abs(eyey - centery) < 0.000001 &&\n        Math.abs(eyez - centerz) < 0.000001) {\n        return identity(out);\n    }\n\n    z0 = eyex - centerx;\n    z1 = eyey - centery;\n    z2 = eyez - centerz;\n\n    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n\n    x0 = upy * z2 - upz * z1;\n    x1 = upz * z0 - upx * z2;\n    x2 = upx * z1 - upy * z0;\n    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n    if (!len) {\n        x0 = 0;\n        x1 = 0;\n        x2 = 0;\n    } else {\n        len = 1 / len;\n        x0 *= len;\n        x1 *= len;\n        x2 *= len;\n    }\n\n    y0 = z1 * x2 - z2 * x1;\n    y1 = z2 * x0 - z0 * x2;\n    y2 = z0 * x1 - z1 * x0;\n\n    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n    if (!len) {\n        y0 = 0;\n        y1 = 0;\n        y2 = 0;\n    } else {\n        len = 1 / len;\n        y0 *= len;\n        y1 *= len;\n        y2 *= len;\n    }\n\n    out[0] = x0;\n    out[1] = y0;\n    out[2] = z0;\n    out[3] = 0;\n    out[4] = x1;\n    out[5] = y1;\n    out[6] = z1;\n    out[7] = 0;\n    out[8] = x2;\n    out[9] = y2;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n    out[15] = 1;\n\n    return out;\n};","module.exports = multiply;\n\n/**\n * Multiplies two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nfunction multiply(out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    // Cache only the current line of the second matrix\n    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];  \n    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n    return out;\n};","module.exports = rotate;\n\n/**\n * Rotates a mat4 by the given angle\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nfunction rotate(out, a, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2],\n        len = Math.sqrt(x * x + y * y + z * z),\n        s, c, t,\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23,\n        b00, b01, b02,\n        b10, b11, b12,\n        b20, b21, b22;\n\n    if (Math.abs(len) < 0.000001) { return null; }\n    \n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n};","module.exports = rotateX;\n\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nfunction rotateX(out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[0]  = a[0];\n        out[1]  = a[1];\n        out[2]  = a[2];\n        out[3]  = a[3];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[4] = a10 * c + a20 * s;\n    out[5] = a11 * c + a21 * s;\n    out[6] = a12 * c + a22 * s;\n    out[7] = a13 * c + a23 * s;\n    out[8] = a20 * c - a10 * s;\n    out[9] = a21 * c - a11 * s;\n    out[10] = a22 * c - a12 * s;\n    out[11] = a23 * c - a13 * s;\n    return out;\n};","module.exports = rotateY;\n\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nfunction rotateY(out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[4]  = a[4];\n        out[5]  = a[5];\n        out[6]  = a[6];\n        out[7]  = a[7];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c - a20 * s;\n    out[1] = a01 * c - a21 * s;\n    out[2] = a02 * c - a22 * s;\n    out[3] = a03 * c - a23 * s;\n    out[8] = a00 * s + a20 * c;\n    out[9] = a01 * s + a21 * c;\n    out[10] = a02 * s + a22 * c;\n    out[11] = a03 * s + a23 * c;\n    return out;\n};","module.exports = rotateZ;\n\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nfunction rotateZ(out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[8]  = a[8];\n        out[9]  = a[9];\n        out[10] = a[10];\n        out[11] = a[11];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c + a10 * s;\n    out[1] = a01 * c + a11 * s;\n    out[2] = a02 * c + a12 * s;\n    out[3] = a03 * c + a13 * s;\n    out[4] = a10 * c - a00 * s;\n    out[5] = a11 * c - a01 * s;\n    out[6] = a12 * c - a02 * s;\n    out[7] = a13 * c - a03 * s;\n    return out;\n};","module.exports = scale;\n\n/**\n * Scales the mat4 by the dimensions in the given vec3\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nfunction scale(out, a, v) {\n    var x = v[0], y = v[1], z = v[2];\n\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};","module.exports = translate;\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nfunction translate(out, a, v) {\n    var x = v[0], y = v[1], z = v[2],\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23;\n\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n\n    return out;\n};","module.exports = transpose;\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nfunction transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a03 = a[3],\n            a12 = a[6], a13 = a[7],\n            a23 = a[11];\n\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n    \n    return out;\n};","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\nimport * as mat2 from \"./mat2.js\";\nimport * as mat2d from \"./mat2d.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as mat4 from \"./mat4.js\";\nimport * as quat from \"./quat.js\";\nimport * as quat2 from \"./quat2.js\";\nimport * as vec2 from \"./vec2.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\nexport { glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 };","import * as glMatrix from \"./common.js\";\n/**\r\n * 2x2 Matrix\r\n * @module mat2\r\n */\n\n/**\r\n * Creates a new identity mat2\r\n *\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat2} a matrix to clone\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Copy the values from one mat2 to another\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set a mat2 to the identity matrix\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @returns {mat2} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Create a new mat2 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out A new 2x2 matrix\r\n */\n\nexport function fromValues(m00, m01, m10, m11) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Set the components of a mat2 to the given values\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out\r\n */\n\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Transpose the values of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    var a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3]; // Calculate the determinant\n\n  var det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] = a0 * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  var a0 = a[0];\n  out[0] = a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a0;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2\r\n *\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n/**\r\n * Multiplies two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n/**\r\n * Rotates a mat2 by the given angle\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n/**\r\n * Scales the mat2 by the dimensions in the given vec2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the matrix to rotate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat2} out\r\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.scale(dest, dest, vec);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat2} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2\r\n *\r\n * @param {ReadonlyMat2} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat2\r\n *\r\n * @param {ReadonlyMat2} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3]);\n}\n/**\r\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\r\n * @param {ReadonlyMat2} L the lower triangular matrix\r\n * @param {ReadonlyMat2} D the diagonal matrix\r\n * @param {ReadonlyMat2} U the upper triangular matrix\r\n * @param {ReadonlyMat2} a the input matrix to factorize\r\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2] / a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n/**\r\n * Adds two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat2} a The first matrix.\r\n * @param {ReadonlyMat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat2} a The first matrix.\r\n * @param {ReadonlyMat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2} out the receiving vector\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Alias for {@link mat2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 2x3 Matrix\r\n * @module mat2d\r\n * @description\r\n * A mat2d contains six elements defined as:\r\n * <pre>\r\n * [a, b,\r\n *  c, d,\r\n *  tx, ty]\r\n * </pre>\r\n * This is a short form for the 3x3 matrix:\r\n * <pre>\r\n * [a, b, 0,\r\n *  c, d, 0,\r\n *  tx, ty, 1]\r\n * </pre>\r\n * The last column is ignored so the array is shorter and operations are faster.\r\n */\n\n/**\r\n * Creates a new identity mat2d\r\n *\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(6);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[4] = 0;\n    out[5] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2d initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat2d} a matrix to clone\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Copy the values from one mat2d to another\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Set a mat2d to the identity matrix\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Create a new mat2d with the given values\r\n *\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} A new mat2d\r\n */\n\nexport function fromValues(a, b, c, d, tx, ty) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Set the components of a mat2d to the given values\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} out\r\n */\n\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Inverts a mat2d\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function invert(out, a) {\n  var aa = a[0],\n      ab = a[1],\n      ac = a[2],\n      ad = a[3];\n  var atx = a[4],\n      aty = a[5];\n  var det = aa * ad - ab * ac;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n/**\r\n * Multiplies two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n/**\r\n * Rotates a mat2d by the given angle\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Scales the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to translate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Translates the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to translate\r\n * @param {ReadonlyVec2} v the vec2 to translate the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nexport function translate(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.scale(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat2d} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.translate(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {ReadonlyVec2} v Translation vector\r\n * @returns {mat2d} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat2d(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);\n}\n/**\r\n * Adds two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2d} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n/**\r\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2d} out the receiving vector\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2d} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat2d} a The first matrix.\r\n * @param {ReadonlyMat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat2d} a The first matrix.\r\n * @param {ReadonlyMat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));\n}\n/**\r\n * Alias for {@link mat2d.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat2d.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {ReadonlyMat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to translate\r\n * @param {ReadonlyVec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Translation vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Calculates a 3x3 matrix from the given quaternion\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat3} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\r\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\r\n *\r\n * @returns {mat3} out\r\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {ReadonlyMat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {ReadonlyQuat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {ReadonlyMat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\r\n * Quaternion\r\n * @module quat\r\n */\n\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyVec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\r\n * Gets the angular distance between two unit quaternions\r\n *\r\n * @param  {ReadonlyQuat} a     Origin unit quaternion\r\n * @param  {ReadonlyQuat} b     Destination unit quaternion\r\n * @return {Number}     Angle, in radians, between the two quaternions\r\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {quat} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\r\n * Calculate the exponential of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\r\n * Calculate the natural logarithm of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\r\n * Calculate the scalar power of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @param {Number} b amount to scale the quaternion by\r\n * @returns {quat} out\r\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\r\n * Generates a random unit quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyMat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {ReadonlyQuat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {ReadonlyQuat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var clone = vec4.clone;\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var fromValues = vec4.fromValues;\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var copy = vec4.copy;\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var set = vec4.set;\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var add = vec4.add;\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {ReadonlyQuat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var scale = vec4.scale;\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = vec4.dot;\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var lerp = vec4.lerp;\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {ReadonlyQuat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport var length = vec4.length;\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {ReadonlyQuat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var normalize = vec4.normalize;\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyQuat} a The first quaternion.\r\n * @param {ReadonlyQuat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyQuat} a The first vector.\r\n * @param {ReadonlyQuat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var equals = vec4.equals;\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {ReadonlyVec3} a the initial vector\r\n * @param {ReadonlyVec3} b the destination vector\r\n * @returns {quat} out\r\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {ReadonlyQuat} c the third operand\r\n * @param {ReadonlyQuat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\r\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\r\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n/**\r\n * Dual Quaternion<br>\r\n * Format: [real, dual]<br>\r\n * Quaternion format: XYZW<br>\r\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\r\n * @module quat2\r\n */\n\n/**\r\n * Creates a new identity dual quat\r\n *\r\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\r\n */\n\nexport function create() {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    dq[0] = 0;\n    dq[1] = 0;\n    dq[2] = 0;\n    dq[4] = 0;\n    dq[5] = 0;\n    dq[6] = 0;\n    dq[7] = 0;\n  }\n\n  dq[3] = 1;\n  return dq;\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {ReadonlyQuat2} a dual quaternion to clone\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function clone(a) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n/**\r\n * Creates a new dual quat initialized with the given values\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n/**\r\n * Creates a new dual quat from the given values (quat and translation)\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component (translation)\r\n * @param {Number} y2 Y component (translation)\r\n * @param {Number} z2 Z component (translation)\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  var ax = x2 * 0.5,\n      ay = y2 * 0.5,\n      az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n/**\r\n * Creates a dual quat from a quaternion and a translation\r\n *\r\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\r\n * @param {ReadonlyQuat} q a normalized quaternion\r\n * @param {ReadonlyVec3} t tranlation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromRotationTranslation(out, q, t) {\n  var ax = t[0] * 0.5,\n      ay = t[1] * 0.5,\n      az = t[2] * 0.5,\n      bx = q[0],\n      by = q[1],\n      bz = q[2],\n      bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Creates a dual quat from a translation\r\n *\r\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\r\n * @param {ReadonlyVec3} t translation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a dual quat from a quaternion\r\n *\r\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\r\n * @param {ReadonlyQuat} q the quaternion\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a new dual quat from a matrix (4x4)\r\n *\r\n * @param {quat2} out the dual quaternion\r\n * @param {ReadonlyMat4} a the matrix\r\n * @returns {quat2} dual quat receiving operation result\r\n * @function\r\n */\n\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  var outer = quat.create();\n  mat4.getRotation(outer, a);\n  var t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n/**\r\n * Copy the values from one dual quat to another\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the source dual quaternion\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Set a dual quat to the identity dual quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @returns {quat2} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Set the components of a dual quat to the given values\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n/**\r\n * Gets the real part of a dual quat\r\n * @param  {quat} out real part\r\n * @param  {ReadonlyQuat2} a Dual Quaternion\r\n * @return {quat} real part\r\n */\n\nexport var getReal = quat.copy;\n/**\r\n * Gets the dual part of a dual quat\r\n * @param  {quat} out dual part\r\n * @param  {ReadonlyQuat2} a Dual Quaternion\r\n * @return {quat} dual part\r\n */\n\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n/**\r\n * Set the real component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {ReadonlyQuat} q a quaternion representing the real part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport var setReal = quat.copy;\n/**\r\n * Set the dual component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {ReadonlyQuat} q a quaternion representing the dual part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n/**\r\n * Gets the translation of a normalized dual quat\r\n * @param  {vec3} out translation\r\n * @param  {ReadonlyQuat2} a Dual Quaternion to be decomposed\r\n * @return {vec3} translation\r\n */\n\nexport function getTranslation(out, a) {\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n/**\r\n * Translates a dual quat by the given vector\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {quat2} out\r\n */\n\nexport function translate(out, a, v) {\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3],\n      bx1 = v[0] * 0.5,\n      by1 = v[1] * 0.5,\n      bz1 = v[2] * 0.5,\n      ax2 = a[4],\n      ay2 = a[5],\n      az2 = a[6],\n      aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the X axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Y axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Z axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (a * q)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {ReadonlyQuat} q quaternion to rotate by\r\n * @returns {quat2} out\r\n */\n\nexport function rotateByQuatAppend(out, a, q) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (q * a)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat} q quaternion to rotate by\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @returns {quat2} out\r\n */\n\nexport function rotateByQuatPrepend(out, q, a) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      bx = a[0],\n      by = a[1],\n      bz = a[2],\n      bw = a[3];\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around a given axis. Does the normalisation automatically\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @param {Number} rad how far the rotation should be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n\n  var axisLength = Math.hypot(axis[0], axis[1], axis[2]);\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  var bx = s * axis[0] / axisLength;\n  var by = s * axis[1] / axisLength;\n  var bz = s * axis[2] / axisLength;\n  var bw = Math.cos(rad);\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Adds two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n/**\r\n * Multiplies two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @returns {quat2} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax0 = a[0],\n      ay0 = a[1],\n      az0 = a[2],\n      aw0 = a[3],\n      bx1 = b[4],\n      by1 = b[5],\n      bz1 = b[6],\n      bw1 = b[7],\n      ax1 = a[4],\n      ay1 = a[5],\n      az1 = a[6],\n      aw1 = a[7],\n      bx0 = b[0],\n      by0 = b[1],\n      bz0 = b[2],\n      bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n/**\r\n * Alias for {@link quat2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a dual quat by a scalar number\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {ReadonlyQuat2} a the dual quat to scale\r\n * @param {Number} b amount to scale the dual quat by\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n/**\r\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\r\n *\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = quat.dot;\n/**\r\n * Performs a linear interpolation between two dual quats's\r\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n  return out;\n}\n/**\r\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a dual quat to calculate inverse of\r\n * @returns {quat2} out\r\n */\n\nexport function invert(out, a) {\n  var sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a dual quat\r\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {ReadonlyQuat2} a quat to calculate conjugate of\r\n * @returns {quat2} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Calculates the length of a dual quat\r\n *\r\n * @param {ReadonlyQuat2} a dual quat to calculate length of\r\n * @returns {Number} length of a\r\n * @function\r\n */\n\nexport var length = quat.length;\n/**\r\n * Alias for {@link quat2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a dual quat\r\n *\r\n * @param {ReadonlyQuat2} a dual quat to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = quat.squaredLength;\n/**\r\n * Alias for {@link quat2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a dual quat\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a dual quaternion to normalize\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function normalize(out, a) {\n  var magnitude = squaredLength(a);\n\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    var a0 = a[0] / magnitude;\n    var a1 = a[1] / magnitude;\n    var a2 = a[2] / magnitude;\n    var a3 = a[3] / magnitude;\n    var b0 = a[4];\n    var b1 = a[5];\n    var b2 = a[6];\n    var b3 = a[7];\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\n  }\n\n  return out;\n}\n/**\r\n * Returns a string representation of a dual quatenion\r\n *\r\n * @param {ReadonlyQuat2} a dual quaternion to represent as a string\r\n * @returns {String} string representation of the dual quat\r\n */\n\nexport function str(a) {\n  return \"quat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \")\";\n}\n/**\r\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyQuat2} a the first dual quaternion.\r\n * @param {ReadonlyQuat2} b the second dual quaternion.\r\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n/**\r\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyQuat2} a the first dual quat.\r\n * @param {ReadonlyQuat2} b the second dual quat.\r\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));\n}","import * as glMatrix from \"./common.js\";\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {ReadonlyVec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {ReadonlyVec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {ReadonlyVec2} a The vec2 point to rotate\r\n * @param {ReadonlyVec2} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec2} out\r\n */\n\nexport function rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {ReadonlyVec2} a The first operand\r\n * @param {ReadonlyVec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec2} a The first vector.\r\n * @param {ReadonlyVec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec2} a The first vector.\r\n * @param {ReadonlyVec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {ReadonlyVec3} a The first operand\r\n * @param {ReadonlyVec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {ReadonlyVec4} result the receiving vector\r\n * @param {ReadonlyVec4} U the first vector\r\n * @param {ReadonlyVec4} V the second vector\r\n * @param {ReadonlyVec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","module.exports = slerp\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nfunction slerp (out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n\n  var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n    bx = b[0], by = b[1], bz = b[2], bw = b[3]\n\n  var omega, cosom, sinom, scale0, scale1\n\n  // calc cosine\n  cosom = ax * bx + ay * by + az * bz + aw * bw\n  // adjust signs (if necessary)\n  if (cosom < 0.0) {\n    cosom = -cosom\n    bx = -bx\n    by = -by\n    bz = -bz\n    bw = -bw\n  }\n  // calculate coefficients\n  if ((1.0 - cosom) > 0.000001) {\n    // standard case (slerp)\n    omega = Math.acos(cosom)\n    sinom = Math.sin(omega)\n    scale0 = Math.sin((1.0 - t) * omega) / sinom\n    scale1 = Math.sin(t * omega) / sinom\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t\n    scale1 = t\n  }\n  // calculate final values\n  out[0] = scale0 * ax + scale1 * bx\n  out[1] = scale0 * ay + scale1 * by\n  out[2] = scale0 * az + scale1 * bz\n  out[3] = scale0 * aw + scale1 * bw\n\n  return out\n}\n","module.exports = cross;\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction cross(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2],\n        bx = b[0], by = b[1], bz = b[2]\n\n    out[0] = ay * bz - az * by\n    out[1] = az * bx - ax * bz\n    out[2] = ax * by - ay * bx\n    return out\n}","module.exports = dot;\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nfunction dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2]\n}","module.exports = length;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nfunction length(a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2]\n    return Math.sqrt(x*x + y*y + z*z)\n}","module.exports = lerp;\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nfunction lerp(out, a, b, t) {\n    var ax = a[0],\n        ay = a[1],\n        az = a[2]\n    out[0] = ax + t * (b[0] - ax)\n    out[1] = ay + t * (b[1] - ay)\n    out[2] = az + t * (b[2] - az)\n    return out\n}","module.exports = normalize;\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nfunction normalize(out, a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2]\n    var len = x*x + y*y + z*z\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len)\n        out[0] = a[0] * len\n        out[1] = a[1] * len\n        out[2] = a[2] * len\n    }\n    return out\n}","'use strict'\r\n\r\nvar isBrowser = require('is-browser')\r\n\r\nfunction detect() {\r\n\tvar supported = false\r\n\r\n\ttry {\r\n\t\tvar opts = Object.defineProperty({}, 'passive', {\r\n\t\t\tget: function() {\r\n\t\t\t\tsupported = true\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\twindow.addEventListener('test', null, opts)\r\n\t\twindow.removeEventListener('test', null, opts)\r\n\t} catch(e) {\r\n\t\tsupported = false\r\n\t}\r\n\r\n\treturn supported\r\n}\r\n\r\nmodule.exports = isBrowser && detect()\r\n","module.exports = true;","/*jshint unused:true*/\n/*\nInput:  matrix      ; a 4x4 matrix\nOutput: translation ; a 3 component vector\n        scale       ; a 3 component vector\n        skew        ; skew factors XY,XZ,YZ represented as a 3 component vector\n        perspective ; a 4 component vector\n        quaternion  ; a 4 component vector\nReturns false if the matrix cannot be decomposed, true if it can\n\n\nReferences:\nhttps://github.com/kamicane/matrix3d/blob/master/lib/Matrix3d.js\nhttps://github.com/ChromiumWebApps/chromium/blob/master/ui/gfx/transform_util.cc\nhttp://www.w3.org/TR/css3-transforms/#decomposing-a-3d-matrix\n*/\n\nvar normalize = require('./normalize')\n\nvar create = require('gl-mat4/create')\nvar clone = require('gl-mat4/clone')\nvar determinant = require('gl-mat4/determinant')\nvar invert = require('gl-mat4/invert')\nvar transpose = require('gl-mat4/transpose')\nvar vec3 = {\n    length: require('gl-vec3/length'),\n    normalize: require('gl-vec3/normalize'),\n    dot: require('gl-vec3/dot'),\n    cross: require('gl-vec3/cross')\n}\n\nvar tmp = create()\nvar perspectiveMatrix = create()\nvar tmpVec4 = [0, 0, 0, 0]\nvar row = [ [0,0,0], [0,0,0], [0,0,0] ]\nvar pdum3 = [0,0,0]\n\nmodule.exports = function decomposeMat4(matrix, translation, scale, skew, perspective, quaternion) {\n    if (!translation) translation = [0,0,0]\n    if (!scale) scale = [0,0,0]\n    if (!skew) skew = [0,0,0]\n    if (!perspective) perspective = [0,0,0,1]\n    if (!quaternion) quaternion = [0,0,0,1]\n\n    //normalize, if not possible then bail out early\n    if (!normalize(tmp, matrix))\n        return false\n\n    // perspectiveMatrix is used to solve for perspective, but it also provides\n    // an easy way to test for singularity of the upper 3x3 component.\n    clone(perspectiveMatrix, tmp)\n\n    perspectiveMatrix[3] = 0\n    perspectiveMatrix[7] = 0\n    perspectiveMatrix[11] = 0\n    perspectiveMatrix[15] = 1\n\n    // If the perspectiveMatrix is not invertible, we are also unable to\n    // decompose, so we'll bail early. Constant taken from SkMatrix44::invert.\n    if (Math.abs(determinant(perspectiveMatrix) < 1e-8))\n        return false\n\n    var a03 = tmp[3], a13 = tmp[7], a23 = tmp[11],\n            a30 = tmp[12], a31 = tmp[13], a32 = tmp[14], a33 = tmp[15]\n\n    // First, isolate perspective.\n    if (a03 !== 0 || a13 !== 0 || a23 !== 0) {\n        tmpVec4[0] = a03\n        tmpVec4[1] = a13\n        tmpVec4[2] = a23\n        tmpVec4[3] = a33\n\n        // Solve the equation by inverting perspectiveMatrix and multiplying\n        // rightHandSide by the inverse.\n        // resuing the perspectiveMatrix here since it's no longer needed\n        var ret = invert(perspectiveMatrix, perspectiveMatrix)\n        if (!ret) return false\n        transpose(perspectiveMatrix, perspectiveMatrix)\n\n        //multiply by transposed inverse perspective matrix, into perspective vec4\n        vec4multMat4(perspective, tmpVec4, perspectiveMatrix)\n    } else { \n        //no perspective\n        perspective[0] = perspective[1] = perspective[2] = 0\n        perspective[3] = 1\n    }\n\n    // Next take care of translation\n    translation[0] = a30\n    translation[1] = a31\n    translation[2] = a32\n\n    // Now get scale and shear. 'row' is a 3 element array of 3 component vectors\n    mat3from4(row, tmp)\n\n    // Compute X scale factor and normalize first row.\n    scale[0] = vec3.length(row[0])\n    vec3.normalize(row[0], row[0])\n\n    // Compute XY shear factor and make 2nd row orthogonal to 1st.\n    skew[0] = vec3.dot(row[0], row[1])\n    combine(row[1], row[1], row[0], 1.0, -skew[0])\n\n    // Now, compute Y scale and normalize 2nd row.\n    scale[1] = vec3.length(row[1])\n    vec3.normalize(row[1], row[1])\n    skew[0] /= scale[1]\n\n    // Compute XZ and YZ shears, orthogonalize 3rd row\n    skew[1] = vec3.dot(row[0], row[2])\n    combine(row[2], row[2], row[0], 1.0, -skew[1])\n    skew[2] = vec3.dot(row[1], row[2])\n    combine(row[2], row[2], row[1], 1.0, -skew[2])\n\n    // Next, get Z scale and normalize 3rd row.\n    scale[2] = vec3.length(row[2])\n    vec3.normalize(row[2], row[2])\n    skew[1] /= scale[2]\n    skew[2] /= scale[2]\n\n\n    // At this point, the matrix (in rows) is orthonormal.\n    // Check for a coordinate system flip.  If the determinant\n    // is -1, then negate the matrix and the scaling factors.\n    vec3.cross(pdum3, row[1], row[2])\n    if (vec3.dot(row[0], pdum3) < 0) {\n        for (var i = 0; i < 3; i++) {\n            scale[i] *= -1;\n            row[i][0] *= -1\n            row[i][1] *= -1\n            row[i][2] *= -1\n        }\n    }\n\n    // Now, get the rotations out\n    quaternion[0] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] - row[1][1] - row[2][2], 0))\n    quaternion[1] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] + row[1][1] - row[2][2], 0))\n    quaternion[2] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] - row[1][1] + row[2][2], 0))\n    quaternion[3] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] + row[1][1] + row[2][2], 0))\n\n    if (row[2][1] > row[1][2])\n        quaternion[0] = -quaternion[0]\n    if (row[0][2] > row[2][0])\n        quaternion[1] = -quaternion[1]\n    if (row[1][0] > row[0][1])\n        quaternion[2] = -quaternion[2]\n    return true\n}\n\n//will be replaced by gl-vec4 eventually\nfunction vec4multMat4(out, a, m) {\n    var x = a[0], y = a[1], z = a[2], w = a[3];\n    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n    return out;\n}\n\n//gets upper-left of a 4x4 matrix into a 3x3 of vectors\nfunction mat3from4(out, mat4x4) {\n    out[0][0] = mat4x4[0]\n    out[0][1] = mat4x4[1]\n    out[0][2] = mat4x4[2]\n    \n    out[1][0] = mat4x4[4]\n    out[1][1] = mat4x4[5]\n    out[1][2] = mat4x4[6]\n\n    out[2][0] = mat4x4[8]\n    out[2][1] = mat4x4[9]\n    out[2][2] = mat4x4[10]\n}\n\nfunction combine(out, a, b, scale1, scale2) {\n    out[0] = a[0] * scale1 + b[0] * scale2\n    out[1] = a[1] * scale1 + b[1] * scale2\n    out[2] = a[2] * scale1 + b[2] * scale2\n}","module.exports = function normalize(out, mat) {\n    var m44 = mat[15]\n    // Cannot normalize.\n    if (m44 === 0) \n        return false\n    var scale = 1 / m44\n    for (var i=0; i<16; i++)\n        out[i] = mat[i] * scale\n    return true\n}","var lerp = require('gl-vec3/lerp')\n\nvar recompose = require('mat4-recompose')\nvar decompose = require('mat4-decompose')\nvar determinant = require('gl-mat4/determinant')\nvar slerp = require('quat-slerp')\n\nvar state0 = state()\nvar state1 = state()\nvar tmp = state()\n\nmodule.exports = interpolate\nfunction interpolate(out, start, end, alpha) {\n    if (determinant(start) === 0 || determinant(end) === 0)\n        return false\n\n    //decompose the start and end matrices into individual components\n    var r0 = decompose(start, state0.translate, state0.scale, state0.skew, state0.perspective, state0.quaternion)\n    var r1 = decompose(end, state1.translate, state1.scale, state1.skew, state1.perspective, state1.quaternion)\n    if (!r0 || !r1)\n        return false    \n\n\n    //now lerp/slerp the start and end components into a temporary     lerp(tmptranslate, state0.translate, state1.translate, alpha)\n    lerp(tmp.translate, state0.translate, state1.translate, alpha)\n    lerp(tmp.skew, state0.skew, state1.skew, alpha)\n    lerp(tmp.scale, state0.scale, state1.scale, alpha)\n    lerp(tmp.perspective, state0.perspective, state1.perspective, alpha)\n    slerp(tmp.quaternion, state0.quaternion, state1.quaternion, alpha)\n\n    //and recompose into our 'out' matrix\n    recompose(out, tmp.translate, tmp.scale, tmp.skew, tmp.perspective, tmp.quaternion)\n    return true\n}\n\nfunction state() {\n    return {\n        translate: vec3(),\n        scale: vec3(1),\n        skew: vec3(),\n        perspective: vec4(),\n        quaternion: vec4()\n    }\n}\n\nfunction vec3(n) {\n    return [n||0,n||0,n||0]\n}\n\nfunction vec4() {\n    return [0,0,0,1]\n}","/*\nInput:  translation ; a 3 component vector\n        scale       ; a 3 component vector\n        skew        ; skew factors XY,XZ,YZ represented as a 3 component vector\n        perspective ; a 4 component vector\n        quaternion  ; a 4 component vector\nOutput: matrix      ; a 4x4 matrix\n\nFrom: http://www.w3.org/TR/css3-transforms/#recomposing-to-a-3d-matrix\n*/\n\nvar mat4 = {\n    identity: require('gl-mat4/identity'),\n    translate: require('gl-mat4/translate'),\n    multiply: require('gl-mat4/multiply'),\n    create: require('gl-mat4/create'),\n    scale: require('gl-mat4/scale'),\n    fromRotationTranslation: require('gl-mat4/fromRotationTranslation')\n}\n\nvar rotationMatrix = mat4.create()\nvar temp = mat4.create()\n\nmodule.exports = function recomposeMat4(matrix, translation, scale, skew, perspective, quaternion) {\n    mat4.identity(matrix)\n\n    //apply translation & rotation\n    mat4.fromRotationTranslation(matrix, quaternion, translation)\n\n    //apply perspective\n    matrix[3] = perspective[0]\n    matrix[7] = perspective[1]\n    matrix[11] = perspective[2]\n    matrix[15] = perspective[3]\n        \n    // apply skew\n    // temp is a identity 4x4 matrix initially\n    mat4.identity(temp)\n\n    if (skew[2] !== 0) {\n        temp[9] = skew[2]\n        mat4.multiply(matrix, matrix, temp)\n    }\n\n    if (skew[1] !== 0) {\n        temp[9] = 0\n        temp[8] = skew[1]\n        mat4.multiply(matrix, matrix, temp)\n    }\n\n    if (skew[0] !== 0) {\n        temp[8] = 0\n        temp[4] = skew[0]\n        mat4.multiply(matrix, matrix, temp)\n    }\n\n    //apply scale\n    mat4.scale(matrix, matrix, scale)\n    return matrix\n}","'use strict'\r\n\r\nvar bsearch   = require('binary-search-bounds')\r\nvar m4interp  = require('mat4-interpolate')\r\nvar invert44  = require('gl-mat4/invert')\r\nvar rotateX   = require('gl-mat4/rotateX')\r\nvar rotateY   = require('gl-mat4/rotateY')\r\nvar rotateZ   = require('gl-mat4/rotateZ')\r\nvar lookAt    = require('gl-mat4/lookAt')\r\nvar translate = require('gl-mat4/translate')\r\nvar scale     = require('gl-mat4/scale')\r\nvar normalize = require('gl-vec3/normalize')\r\n\r\nvar DEFAULT_CENTER = [0,0,0]\r\n\r\nmodule.exports = createMatrixCameraController\r\n\r\nfunction MatrixCameraController(initialMatrix) {\r\n  this._components    = initialMatrix.slice()\r\n  this._time          = [0]\r\n  this.prevMatrix     = initialMatrix.slice()\r\n  this.nextMatrix     = initialMatrix.slice()\r\n  this.computedMatrix = initialMatrix.slice()\r\n  this.computedInverse = initialMatrix.slice()\r\n  this.computedEye    = [0,0,0]\r\n  this.computedUp     = [0,0,0]\r\n  this.computedCenter = [0,0,0]\r\n  this.computedRadius = [0]\r\n  this._limits        = [-Infinity, Infinity]\r\n}\r\n\r\nvar proto = MatrixCameraController.prototype\r\n\r\nproto.recalcMatrix = function(t) {\r\n  var time = this._time\r\n  var tidx = bsearch.le(time, t)\r\n  var mat = this.computedMatrix\r\n  if(tidx < 0) {\r\n    return\r\n  }\r\n  var comps = this._components\r\n  if(tidx === time.length-1) {\r\n    var ptr = 16*tidx\r\n    for(var i=0; i<16; ++i) {\r\n      mat[i] = comps[ptr++]\r\n    }\r\n  } else {\r\n    var dt = (time[tidx+1] - time[tidx])\r\n    var ptr = 16*tidx\r\n    var prev = this.prevMatrix\r\n    var allEqual = true\r\n    for(var i=0; i<16; ++i) {\r\n      prev[i] = comps[ptr++]\r\n    }\r\n    var next = this.nextMatrix\r\n    for(var i=0; i<16; ++i) {\r\n      next[i] = comps[ptr++]\r\n      allEqual = allEqual && (prev[i] === next[i])\r\n    }\r\n    if(dt < 1e-6 || allEqual) {\r\n      for(var i=0; i<16; ++i) {\r\n        mat[i] = prev[i]\r\n      }\r\n    } else {\r\n      m4interp(mat, prev, next, (t - time[tidx])/dt)\r\n    }\r\n  }\r\n\r\n  var up = this.computedUp\r\n  up[0] = mat[1]\r\n  up[1] = mat[5]\r\n  up[2] = mat[9]\r\n  normalize(up, up)\r\n\r\n  var imat = this.computedInverse\r\n  invert44(imat, mat)\r\n  var eye = this.computedEye\r\n  var w = imat[15]\r\n  eye[0] = imat[12]/w\r\n  eye[1] = imat[13]/w\r\n  eye[2] = imat[14]/w\r\n\r\n  var center = this.computedCenter\r\n  var radius = Math.exp(this.computedRadius[0])\r\n  for(var i=0; i<3; ++i) {\r\n    center[i] = eye[i] - mat[2+4*i] * radius\r\n  }\r\n}\r\n\r\nproto.idle = function(t) {\r\n  if(t < this.lastT()) {\r\n    return\r\n  }\r\n  var mc = this._components\r\n  var ptr = mc.length-16\r\n  for(var i=0; i<16; ++i) {\r\n    mc.push(mc[ptr++])\r\n  }\r\n  this._time.push(t)\r\n}\r\n\r\nproto.flush = function(t) {\r\n  var idx = bsearch.gt(this._time, t) - 2\r\n  if(idx < 0) {\r\n    return\r\n  }\r\n  this._time.splice(0, idx)\r\n  this._components.splice(0, 16*idx)\r\n}\r\n\r\nproto.lastT = function() {\r\n  return this._time[this._time.length-1]\r\n}\r\n\r\nproto.lookAt = function(t, eye, center, up) {\r\n  this.recalcMatrix(t)\r\n  eye    = eye || this.computedEye\r\n  center = center || DEFAULT_CENTER\r\n  up     = up || this.computedUp\r\n  this.setMatrix(t, lookAt(this.computedMatrix, eye, center, up))\r\n  var d2 = 0.0\r\n  for(var i=0; i<3; ++i) {\r\n    d2 += Math.pow(center[i] - eye[i], 2)\r\n  }\r\n  d2 = Math.log(Math.sqrt(d2))\r\n  this.computedRadius[0] = d2\r\n}\r\n\r\nproto.rotate = function(t, yaw, pitch, roll) {\r\n  this.recalcMatrix(t)\r\n  var mat = this.computedInverse\r\n  if(yaw)   rotateY(mat, mat, yaw)\r\n  if(pitch) rotateX(mat, mat, pitch)\r\n  if(roll)  rotateZ(mat, mat, roll)\r\n  this.setMatrix(t, invert44(this.computedMatrix, mat))\r\n}\r\n\r\nvar tvec = [0,0,0]\r\n\r\nproto.pan = function(t, dx, dy, dz) {\r\n  tvec[0] = -(dx || 0.0)\r\n  tvec[1] = -(dy || 0.0)\r\n  tvec[2] = -(dz || 0.0)\r\n  this.recalcMatrix(t)\r\n  var mat = this.computedInverse\r\n  translate(mat, mat, tvec)\r\n  this.setMatrix(t, invert44(mat, mat))\r\n}\r\n\r\nproto.translate = function(t, dx, dy, dz) {\r\n  tvec[0] = dx || 0.0\r\n  tvec[1] = dy || 0.0\r\n  tvec[2] = dz || 0.0\r\n  this.recalcMatrix(t)\r\n  var mat = this.computedMatrix\r\n  translate(mat, mat, tvec)\r\n  this.setMatrix(t, mat)\r\n}\r\n\r\nproto.setMatrix = function(t, mat) {\r\n  if(t < this.lastT()) {\r\n    return\r\n  }\r\n  this._time.push(t)\r\n  for(var i=0; i<16; ++i) {\r\n    this._components.push(mat[i])\r\n  }\r\n}\r\n\r\nproto.setDistance = function(t, d) {\r\n  this.computedRadius[0] = d\r\n}\r\n\r\nproto.setDistanceLimits = function(a,b) {\r\n  var lim = this._limits\r\n  lim[0] = a\r\n  lim[1] = b\r\n}\r\n\r\nproto.getDistanceLimits = function(out) {\r\n  var lim = this._limits\r\n  if(out) {\r\n    out[0] = lim[0]\r\n    out[1] = lim[1]\r\n    return out\r\n  }\r\n  return lim\r\n}\r\n\r\nfunction createMatrixCameraController(options) {\r\n  options = options || {}\r\n  var matrix = options.matrix || \r\n              [1,0,0,0,\r\n               0,1,0,0,\r\n               0,0,1,0,\r\n               0,0,0,1]\r\n  return new MatrixCameraController(matrix)\r\n}\r\n","'use strict'\n\nmodule.exports = mouseListen\n\nvar mouse = require('mouse-event')\n\nfunction mouseListen (element, callback) {\n  if (!callback) {\n    callback = element\n    element = window\n  }\n\n  var buttonState = 0\n  var x = 0\n  var y = 0\n  var mods = {\n    shift: false,\n    alt: false,\n    control: false,\n    meta: false\n  }\n  var attached = false\n\n  function updateMods (ev) {\n    var changed = false\n    if ('altKey' in ev) {\n      changed = changed || ev.altKey !== mods.alt\n      mods.alt = !!ev.altKey\n    }\n    if ('shiftKey' in ev) {\n      changed = changed || ev.shiftKey !== mods.shift\n      mods.shift = !!ev.shiftKey\n    }\n    if ('ctrlKey' in ev) {\n      changed = changed || ev.ctrlKey !== mods.control\n      mods.control = !!ev.ctrlKey\n    }\n    if ('metaKey' in ev) {\n      changed = changed || ev.metaKey !== mods.meta\n      mods.meta = !!ev.metaKey\n    }\n    return changed\n  }\n\n  function handleEvent (nextButtons, ev) {\n    var nextX = mouse.x(ev)\n    var nextY = mouse.y(ev)\n    if ('buttons' in ev) {\n      nextButtons = ev.buttons | 0\n    }\n    if (nextButtons !== buttonState ||\n      nextX !== x ||\n      nextY !== y ||\n      updateMods(ev)) {\n      buttonState = nextButtons | 0\n      x = nextX || 0\n      y = nextY || 0\n      callback && callback(buttonState, x, y, mods)\n    }\n  }\n\n  function clearState (ev) {\n    handleEvent(0, ev)\n  }\n\n  function handleBlur () {\n    if (buttonState ||\n      x ||\n      y ||\n      mods.shift ||\n      mods.alt ||\n      mods.meta ||\n      mods.control) {\n      x = y = 0\n      buttonState = 0\n      mods.shift = mods.alt = mods.control = mods.meta = false\n      callback && callback(0, 0, 0, mods)\n    }\n  }\n\n  function handleMods (ev) {\n    if (updateMods(ev)) {\n      callback && callback(buttonState, x, y, mods)\n    }\n  }\n\n  function handleMouseMove (ev) {\n    if (mouse.buttons(ev) === 0) {\n      handleEvent(0, ev)\n    } else {\n      handleEvent(buttonState, ev)\n    }\n  }\n\n  function handleMouseDown (ev) {\n    handleEvent(buttonState | mouse.buttons(ev), ev)\n  }\n\n  function handleMouseUp (ev) {\n    handleEvent(buttonState & ~mouse.buttons(ev), ev)\n  }\n\n  function attachListeners () {\n    if (attached) {\n      return\n    }\n    attached = true\n\n    element.addEventListener('mousemove', handleMouseMove)\n\n    element.addEventListener('mousedown', handleMouseDown)\n\n    element.addEventListener('mouseup', handleMouseUp)\n\n    element.addEventListener('mouseleave', clearState)\n    element.addEventListener('mouseenter', clearState)\n    element.addEventListener('mouseout', clearState)\n    element.addEventListener('mouseover', clearState)\n\n    element.addEventListener('blur', handleBlur)\n\n    element.addEventListener('keyup', handleMods)\n    element.addEventListener('keydown', handleMods)\n    element.addEventListener('keypress', handleMods)\n\n    if (element !== window) {\n      window.addEventListener('blur', handleBlur)\n\n      window.addEventListener('keyup', handleMods)\n      window.addEventListener('keydown', handleMods)\n      window.addEventListener('keypress', handleMods)\n    }\n  }\n\n  function detachListeners () {\n    if (!attached) {\n      return\n    }\n    attached = false\n\n    element.removeEventListener('mousemove', handleMouseMove)\n\n    element.removeEventListener('mousedown', handleMouseDown)\n\n    element.removeEventListener('mouseup', handleMouseUp)\n\n    element.removeEventListener('mouseleave', clearState)\n    element.removeEventListener('mouseenter', clearState)\n    element.removeEventListener('mouseout', clearState)\n    element.removeEventListener('mouseover', clearState)\n\n    element.removeEventListener('blur', handleBlur)\n\n    element.removeEventListener('keyup', handleMods)\n    element.removeEventListener('keydown', handleMods)\n    element.removeEventListener('keypress', handleMods)\n\n    if (element !== window) {\n      window.removeEventListener('blur', handleBlur)\n\n      window.removeEventListener('keyup', handleMods)\n      window.removeEventListener('keydown', handleMods)\n      window.removeEventListener('keypress', handleMods)\n    }\n  }\n\n  // Attach listeners\n  attachListeners()\n\n  var result = {\n    element: element\n  }\n\n  Object.defineProperties(result, {\n    enabled: {\n      get: function () { return attached },\n      set: function (f) {\n        if (f) {\n          attachListeners()\n        } else {\n          detachListeners()\n        }\n      },\n      enumerable: true\n    },\n    buttons: {\n      get: function () { return buttonState },\n      enumerable: true\n    },\n    x: {\n      get: function () { return x },\n      enumerable: true\n    },\n    y: {\n      get: function () { return y },\n      enumerable: true\n    },\n    mods: {\n      get: function () { return mods },\n      enumerable: true\n    }\n  })\n\n  return result\n}\n","var rootPosition = { left: 0, top: 0 }\n\nmodule.exports = mouseEventOffset\nfunction mouseEventOffset (ev, target, out) {\n  target = target || ev.currentTarget || ev.srcElement\n  if (!Array.isArray(out)) {\n    out = [ 0, 0 ]\n  }\n  var cx = ev.clientX || 0\n  var cy = ev.clientY || 0\n  var rect = getBoundingClientOffset(target)\n  out[0] = cx - rect.left\n  out[1] = cy - rect.top\n  return out\n}\n\nfunction getBoundingClientOffset (element) {\n  if (element === window ||\n      element === document ||\n      element === document.body) {\n    return rootPosition\n  } else {\n    return element.getBoundingClientRect()\n  }\n}\n","'use strict'\n\nfunction mouseButtons(ev) {\n  if(typeof ev === 'object') {\n    if('buttons' in ev) {\n      return ev.buttons\n    } else if('which' in ev) {\n      var b = ev.which\n      if(b === 2) {\n        return 4\n      } else if(b === 3) {\n        return 2\n      } else if(b > 0) {\n        return 1<<(b-1)\n      }\n    } else if('button' in ev) {\n      var b = ev.button\n      if(b === 1) {\n        return 4\n      } else if(b === 2) {\n        return 2\n      } else if(b >= 0) {\n        return 1<<b\n      }\n    }\n  }\n  return 0\n}\nexports.buttons = mouseButtons\n\nfunction mouseElement(ev) {\n  return ev.target || ev.srcElement || window\n}\nexports.element = mouseElement\n\nfunction mouseRelativeX(ev) {\n  if(typeof ev === 'object') {\n    if('offsetX' in ev) {\n      return ev.offsetX\n    }\n    var target = mouseElement(ev)\n    var bounds = target.getBoundingClientRect()\n    return ev.clientX - bounds.left\n  }\n  return 0\n}\nexports.x = mouseRelativeX\n\nfunction mouseRelativeY(ev) {\n  if(typeof ev === 'object') {\n    if('offsetY' in ev) {\n      return ev.offsetY\n    }\n    var target = mouseElement(ev)\n    var bounds = target.getBoundingClientRect()\n    return ev.clientY - bounds.top\n  }\n  return 0\n}\nexports.y = mouseRelativeY\n","'use strict'\n\nvar toPX = require('to-px')\n\nmodule.exports = mouseWheelListen\n\nfunction mouseWheelListen(element, callback, noScroll) {\n  if(typeof element === 'function') {\n    noScroll = !!callback\n    callback = element\n    element = window\n  }\n  var lineHeight = toPX('ex', element)\n  var listener = function(ev) {\n    if(noScroll) {\n      ev.preventDefault()\n    }\n    var dx = ev.deltaX || 0\n    var dy = ev.deltaY || 0\n    var dz = ev.deltaZ || 0\n    var mode = ev.deltaMode\n    var scale = 1\n    switch(mode) {\n      case 1:\n        scale = lineHeight\n      break\n      case 2:\n        scale = window.innerHeight\n      break\n    }\n    dx *= scale\n    dy *= scale\n    dz *= scale\n    if(dx || dy || dz) {\n      return callback(dx, dy, dz, ev)\n    }\n  }\n  element.addEventListener('wheel', listener)\n  return listener\n}\n","'use strict'\n\nmodule.exports = quatFromFrame\n\nfunction quatFromFrame(\n  out,\n  rx, ry, rz,\n  ux, uy, uz,\n  fx, fy, fz) {\n  var tr = rx + uy + fz\n  if(l > 0) {\n    var l = Math.sqrt(tr + 1.0)\n    out[0] = 0.5 * (uz - fy) / l\n    out[1] = 0.5 * (fx - rz) / l\n    out[2] = 0.5 * (ry - uy) / l\n    out[3] = 0.5 * l\n  } else {\n    var tf = Math.max(rx, uy, fz)\n    var l = Math.sqrt(2 * tf - tr + 1.0)\n    if(rx >= tf) {\n      //x y z  order\n      out[0] = 0.5 * l\n      out[1] = 0.5 * (ux + ry) / l\n      out[2] = 0.5 * (fx + rz) / l\n      out[3] = 0.5 * (uz - fy) / l\n    } else if(uy >= tf) {\n      //y z x  order\n      out[0] = 0.5 * (ry + ux) / l\n      out[1] = 0.5 * l\n      out[2] = 0.5 * (fy + uz) / l\n      out[3] = 0.5 * (fx - rz) / l\n    } else {\n      //z x y  order\n      out[0] = 0.5 * (rz + fx) / l\n      out[1] = 0.5 * (uz + fy) / l\n      out[2] = 0.5 * l\n      out[3] = 0.5 * (ry - ux) / l\n    }\n  }\n  return out\n}","'use strict'\n\nmodule.exports = createOrbitController\n\nvar filterVector  = require('filtered-vector')\nvar lookAt        = require('gl-mat4/lookAt')\nvar mat4FromQuat  = require('gl-mat4/fromQuat')\nvar invert44      = require('gl-mat4/invert')\nvar quatFromFrame = require('./lib/quatFromFrame')\n\nfunction len3(x,y,z) {\n  return Math.sqrt(Math.pow(x,2) + Math.pow(y,2) + Math.pow(z,2))\n}\n\nfunction len4(w,x,y,z) {\n  return Math.sqrt(Math.pow(w,2) + Math.pow(x,2) + Math.pow(y,2) + Math.pow(z,2))\n}\n\nfunction normalize4(out, a) {\n  var ax = a[0]\n  var ay = a[1]\n  var az = a[2]\n  var aw = a[3]\n  var al = len4(ax, ay, az, aw)\n  if(al > 1e-6) {\n    out[0] = ax/al\n    out[1] = ay/al\n    out[2] = az/al\n    out[3] = aw/al\n  } else {\n    out[0] = out[1] = out[2] = 0.0\n    out[3] = 1.0\n  }\n}\n\nfunction OrbitCameraController(initQuat, initCenter, initRadius) {\n  this.radius    = filterVector([initRadius])\n  this.center    = filterVector(initCenter)\n  this.rotation  = filterVector(initQuat)\n\n  this.computedRadius   = this.radius.curve(0)\n  this.computedCenter   = this.center.curve(0)\n  this.computedRotation = this.rotation.curve(0)\n  this.computedUp       = [0.1,0,0]\n  this.computedEye      = [0.1,0,0]\n  this.computedMatrix   = [0.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n\n  this.recalcMatrix(0)\n}\n\nvar proto = OrbitCameraController.prototype\n\nproto.lastT = function() {\n  return Math.max(\n    this.radius.lastT(),\n    this.center.lastT(),\n    this.rotation.lastT())\n}\n\nproto.recalcMatrix = function(t) {\n  this.radius.curve(t)\n  this.center.curve(t)\n  this.rotation.curve(t)\n\n  var quat = this.computedRotation\n  normalize4(quat, quat)\n\n  var mat = this.computedMatrix\n  mat4FromQuat(mat, quat)\n\n  var center = this.computedCenter\n  var eye    = this.computedEye\n  var up     = this.computedUp\n  var radius = Math.exp(this.computedRadius[0])\n\n  eye[0] = center[0] + radius * mat[2]\n  eye[1] = center[1] + radius * mat[6]\n  eye[2] = center[2] + radius * mat[10]\n  up[0] = mat[1]\n  up[1] = mat[5]\n  up[2] = mat[9]\n\n  for(var i=0; i<3; ++i) {\n    var rr = 0.0\n    for(var j=0; j<3; ++j) {\n      rr += mat[i+4*j] * eye[j]\n    }\n    mat[12+i] = -rr\n  }\n}\n\nproto.getMatrix = function(t, result) {\n  this.recalcMatrix(t)\n  var m = this.computedMatrix\n  if(result) {\n    for(var i=0; i<16; ++i) {\n      result[i] = m[i]\n    }\n    return result\n  }\n  return m\n}\n\nproto.idle = function(t) {\n  this.center.idle(t)\n  this.radius.idle(t)\n  this.rotation.idle(t)\n}\n\nproto.flush = function(t) {\n  this.center.flush(t)\n  this.radius.flush(t)\n  this.rotation.flush(t)\n}\n\nproto.pan = function(t, dx, dy, dz) {\n  dx = dx || 0.0\n  dy = dy || 0.0\n  dz = dz || 0.0\n\n  this.recalcMatrix(t)\n  var mat = this.computedMatrix\n\n  var ux = mat[1]\n  var uy = mat[5]\n  var uz = mat[9]\n  var ul = len3(ux, uy, uz)\n  ux /= ul\n  uy /= ul\n  uz /= ul\n\n  var rx = mat[0]\n  var ry = mat[4]\n  var rz = mat[8]\n  var ru = rx * ux + ry * uy + rz * uz\n  rx -= ux * ru\n  ry -= uy * ru\n  rz -= uz * ru\n  var rl = len3(rx, ry, rz)\n  rx /= rl\n  ry /= rl\n  rz /= rl\n\n  var fx = mat[2]\n  var fy = mat[6]\n  var fz = mat[10]\n  var fu = fx * ux + fy * uy + fz * uz\n  var fr = fx * rx + fy * ry + fz * rz\n  fx -= fu * ux + fr * rx\n  fy -= fu * uy + fr * ry\n  fz -= fu * uz + fr * rz\n  var fl = len3(fx, fy, fz)\n  fx /= fl\n  fy /= fl\n  fz /= fl\n\n  var vx = rx * dx + ux * dy\n  var vy = ry * dx + uy * dy\n  var vz = rz * dx + uz * dy\n\n  this.center.move(t, vx, vy, vz)\n\n  //Update z-component of radius\n  var radius = Math.exp(this.computedRadius[0])\n  radius = Math.max(1e-4, radius + dz)\n  this.radius.set(t, Math.log(radius))\n}\n\nproto.rotate = function(t, dx, dy, dz) {\n  this.recalcMatrix(t)\n\n  dx = dx||0.0\n  dy = dy||0.0\n\n  var mat = this.computedMatrix\n\n  var rx = mat[0]\n  var ry = mat[4]\n  var rz = mat[8]\n\n  var ux = mat[1]\n  var uy = mat[5]\n  var uz = mat[9]\n\n  var fx = mat[2]\n  var fy = mat[6]\n  var fz = mat[10]\n\n  var qx = dx * rx + dy * ux\n  var qy = dx * ry + dy * uy\n  var qz = dx * rz + dy * uz\n\n  var bx = -(fy * qz - fz * qy)\n  var by = -(fz * qx - fx * qz)\n  var bz = -(fx * qy - fy * qx)  \n  var bw = Math.sqrt(Math.max(0.0, 1.0 - Math.pow(bx,2) - Math.pow(by,2) - Math.pow(bz,2)))\n  var bl = len4(bx, by, bz, bw)\n  if(bl > 1e-6) {\n    bx /= bl\n    by /= bl\n    bz /= bl\n    bw /= bl\n  } else {\n    bx = by = bz = 0.0\n    bw = 1.0\n  }\n\n  var rotation = this.computedRotation\n  var ax = rotation[0]\n  var ay = rotation[1]\n  var az = rotation[2]\n  var aw = rotation[3]\n\n  var cx = ax*bw + aw*bx + ay*bz - az*by\n  var cy = ay*bw + aw*by + az*bx - ax*bz\n  var cz = az*bw + aw*bz + ax*by - ay*bx\n  var cw = aw*bw - ax*bx - ay*by - az*bz\n  \n  //Apply roll\n  if(dz) {\n    bx = fx\n    by = fy\n    bz = fz\n    var s = Math.sin(dz) / len3(bx, by, bz)\n    bx *= s\n    by *= s\n    bz *= s\n    bw = Math.cos(dx)\n    cx = cx*bw + cw*bx + cy*bz - cz*by\n    cy = cy*bw + cw*by + cz*bx - cx*bz\n    cz = cz*bw + cw*bz + cx*by - cy*bx\n    cw = cw*bw - cx*bx - cy*by - cz*bz\n  }\n\n  var cl = len4(cx, cy, cz, cw)\n  if(cl > 1e-6) {\n    cx /= cl\n    cy /= cl\n    cz /= cl\n    cw /= cl\n  } else {\n    cx = cy = cz = 0.0\n    cw = 1.0\n  }\n\n  this.rotation.set(t, cx, cy, cz, cw)\n}\n\nproto.lookAt = function(t, eye, center, up) {\n  this.recalcMatrix(t)\n\n  center = center || this.computedCenter\n  eye    = eye    || this.computedEye\n  up     = up     || this.computedUp\n\n  var mat = this.computedMatrix\n  lookAt(mat, eye, center, up)\n\n  var rotation = this.computedRotation\n  quatFromFrame(rotation,\n    mat[0], mat[1], mat[2],\n    mat[4], mat[5], mat[6],\n    mat[8], mat[9], mat[10])\n  normalize4(rotation, rotation)\n  this.rotation.set(t, rotation[0], rotation[1], rotation[2], rotation[3])\n\n  var fl = 0.0\n  for(var i=0; i<3; ++i) {\n    fl += Math.pow(center[i] - eye[i], 2)\n  }\n  this.radius.set(t, 0.5 * Math.log(Math.max(fl, 1e-6)))\n\n  this.center.set(t, center[0], center[1], center[2])\n}\n\nproto.translate = function(t, dx, dy, dz) {\n  this.center.move(t,\n    dx||0.0,\n    dy||0.0,\n    dz||0.0)\n}\n\nproto.setMatrix = function(t, matrix) {\n\n  var rotation = this.computedRotation\n  quatFromFrame(rotation,\n    matrix[0], matrix[1], matrix[2],\n    matrix[4], matrix[5], matrix[6],\n    matrix[8], matrix[9], matrix[10])\n  normalize4(rotation, rotation)\n  this.rotation.set(t, rotation[0], rotation[1], rotation[2], rotation[3])\n\n  var mat = this.computedMatrix\n  invert44(mat, matrix)\n  var w = mat[15]\n  if(Math.abs(w) > 1e-6) {\n    var cx = mat[12]/w\n    var cy = mat[13]/w\n    var cz = mat[14]/w\n\n    this.recalcMatrix(t)  \n    var r = Math.exp(this.computedRadius[0])\n    this.center.set(t, cx-mat[2]*r, cy-mat[6]*r, cz-mat[10]*r)\n    this.radius.idle(t)\n  } else {\n    this.center.idle(t)\n    this.radius.idle(t)\n  }\n}\n\nproto.setDistance = function(t, d) {\n  if(d > 0) {\n    this.radius.set(t, Math.log(d))\n  }\n}\n\nproto.setDistanceLimits = function(lo, hi) {\n  if(lo > 0) {\n    lo = Math.log(lo)\n  } else {\n    lo = -Infinity    \n  }\n  if(hi > 0) {\n    hi = Math.log(hi)\n  } else {\n    hi = Infinity\n  }\n  hi = Math.max(hi, lo)\n  this.radius.bounds[0][0] = lo\n  this.radius.bounds[1][0] = hi\n}\n\nproto.getDistanceLimits = function(out) {\n  var bounds = this.radius.bounds\n  if(out) {\n    out[0] = Math.exp(bounds[0][0])\n    out[1] = Math.exp(bounds[1][0])\n    return out\n  }\n  return [ Math.exp(bounds[0][0]), Math.exp(bounds[1][0]) ]\n}\n\nproto.toJSON = function() {\n  this.recalcMatrix(this.lastT())\n  return {\n    center:   this.computedCenter.slice(),\n    rotation: this.computedRotation.slice(),\n    distance: Math.log(this.computedRadius[0]),\n    zoomMin:  this.radius.bounds[0][0],\n    zoomMax:  this.radius.bounds[1][0]\n  }\n}\n\nproto.fromJSON = function(options) {\n  var t = this.lastT()\n  var c = options.center\n  if(c) {\n    this.center.set(t, c[0], c[1], c[2])\n  }\n  var r = options.rotation\n  if(r) {\n    this.rotation.set(t, r[0], r[1], r[2], r[3])\n  }\n  var d = options.distance\n  if(d && d > 0) {\n    this.radius.set(t, Math.log(d))\n  }\n  this.setDistanceLimits(options.zoomMin, options.zoomMax)\n}\n\nfunction createOrbitController(options) {\n  options = options || {}\n  var center   = options.center   || [0,0,0]\n  var rotation = options.rotation || [0,0,0,1]\n  var radius   = options.radius   || 1.0\n\n  center = [].slice.call(center, 0, 3)\n  rotation = [].slice.call(rotation, 0, 4)\n  normalize4(rotation, rotation)\n\n  var result = new OrbitCameraController(\n    rotation,\n    center,\n    Math.log(radius))\n\n  result.setDistanceLimits(options.zoomMin, options.zoomMax)\n\n  if('eye' in options || 'up' in options) {\n    result.lookAt(0, options.eye, options.center, options.up)\n  }\n\n  return result\n}","module.exports = function parseUnit(str, out) {\n    if (!out)\n        out = [ 0, '' ]\n\n    str = String(str)\n    var num = parseFloat(str, 10)\n    out[0] = num\n    out[1] = str.match(/[\\d.\\-\\+]*\\s*(.*)/)[1] || ''\n    return out\n}","module.exports = require('gl-quat/slerp')","module.exports =\n  global.performance &&\n  global.performance.now ? function now() {\n    return performance.now()\n  } : Date.now || function now() {\n    return +new Date\n  }\n","\n      import API from \"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../node_modules/css-loader/dist/cjs.js!./site.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../node_modules/css-loader/dist/cjs.js!./site.css\";\n       export default content && content.locals ? content.locals : undefined;\n","\"use strict\";\n\nvar stylesInDOM = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n\n  return updater;\n}\n\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};","\"use strict\";\n\nvar memo = {};\n/* istanbul ignore next  */\n\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n\n    memo[target] = styleTarget;\n  }\n\n  return memo[target];\n}\n/* istanbul ignore next  */\n\n\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n\n  target.appendChild(style);\n}\n\nmodule.exports = insertBySelector;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\n\nmodule.exports = insertStyleElement;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce = typeof __webpack_nonce__ !== \"undefined\" ? __webpack_nonce__ : null;\n\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\n\nmodule.exports = setAttributesWithoutAttributes;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n\n  var needLayer = typeof obj.layer !== \"undefined\";\n\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n\n  css += obj.css;\n\n  if (needLayer) {\n    css += \"}\";\n  }\n\n  if (obj.media) {\n    css += \"}\";\n  }\n\n  if (obj.supports) {\n    css += \"}\";\n  }\n\n  var sourceMap = obj.sourceMap;\n\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  options.styleTagTransform(css, styleElement, options.options);\n}\n\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n\n  styleElement.parentNode.removeChild(styleElement);\n}\n/* istanbul ignore next  */\n\n\nfunction domAPI(options) {\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\n\nmodule.exports = domAPI;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\n\nmodule.exports = styleTagTransform;","'use strict'\n\nvar parseUnit = require('parse-unit')\n\nmodule.exports = toPX\n\nvar PIXELS_PER_INCH = getSizeBrutal('in', document.body) // 96\n\n\nfunction getPropertyInPX(element, prop) {\n  var parts = parseUnit(getComputedStyle(element).getPropertyValue(prop))\n  return parts[0] * toPX(parts[1], element)\n}\n\n//This brutal hack is needed\nfunction getSizeBrutal(unit, element) {\n  var testDIV = document.createElement('div')\n  testDIV.style['height'] = '128' + unit\n  element.appendChild(testDIV)\n  var size = getPropertyInPX(testDIV, 'height') / 128\n  element.removeChild(testDIV)\n  return size\n}\n\nfunction toPX(str, element) {\n  if (!str) return null\n\n  element = element || document.body\n  str = (str + '' || 'px').trim().toLowerCase()\n  if(element === window || element === document) {\n    element = document.body\n  }\n\n  switch(str) {\n    case '%':  //Ambiguous, not sure if we should use width or height\n      return element.clientHeight / 100.0\n    case 'ch':\n    case 'ex':\n      return getSizeBrutal(str, element)\n    case 'em':\n      return getPropertyInPX(element, 'font-size')\n    case 'rem':\n      return getPropertyInPX(document.body, 'font-size')\n    case 'vw':\n      return window.innerWidth/100\n    case 'vh':\n      return window.innerHeight/100\n    case 'vmin':\n      return Math.min(window.innerWidth, window.innerHeight) / 100\n    case 'vmax':\n      return Math.max(window.innerWidth, window.innerHeight) / 100\n    case 'in':\n      return PIXELS_PER_INCH\n    case 'cm':\n      return PIXELS_PER_INCH / 2.54\n    case 'mm':\n      return PIXELS_PER_INCH / 25.4\n    case 'pt':\n      return PIXELS_PER_INCH / 72\n    case 'pc':\n      return PIXELS_PER_INCH / 6\n    case 'px':\n      return 1\n  }\n\n  // detect number of units\n  var parts = parseUnit(str)\n  if (!isNaN(parts[0]) && parts[1]) {\n    var px = toPX(parts[1], element)\n    return typeof px === 'number' ? parts[0] * px : null\n  }\n\n  return null\n}\n","import { vec3, vec4 } from \"gl-matrix\";\r\nimport { GetAtomType } from \"./atomDatabase\";\r\n\r\nexport class Atom {\r\n    name: string;\r\n    residueAtomName: string;\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n\r\n    constructor (x: number, y: number, z: number, name: string, residueAtomName: string) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        this.name = name;\r\n        this.residueAtomName = residueAtomName;\r\n    }\r\n\r\n    public GetPosition() {\r\n        return vec3.fromValues(this.x, this.y, this.z);\r\n    }\r\n\r\n    public GetVec4Representation() {\r\n        let typeShift = 0;\r\n        if (this.residueAtomName == \"N\" || this.residueAtomName == \"CA\" || this.residueAtomName == \"C\" || this.residueAtomName == \"O\") {\r\n            typeShift = 100;\r\n        }\r\n        return vec4.fromValues(this.x, this.y, this.z, GetAtomType(this).number+typeShift);\r\n    }\r\n\r\n    public GetColor() {\r\n        if (this.name == \"C\") {\r\n            return vec3.fromValues(0.3, 0.8, 0.3);\r\n        } else if (this.name == \"N\") {\r\n            return vec3.fromValues(0.05, 0.05, 0.85);\r\n        } else if (this.name == \"O\") {\r\n            return vec3.fromValues(0.85, 0.05, 0.05);\r\n        } else if (this.name == \"S\") {\r\n            return vec3.fromValues(0.975, 0.975, 0.025);\r\n        }\r\n        return vec3.fromValues(1, 0.1, 1);\r\n    }\r\n\r\n    public Distance(atom: Atom) {\r\n        return vec3.distance(this.GetPosition(), atom.GetPosition());\r\n    }\r\n}","import { Atom } from \"./atom\";\r\n\r\nconst atomTypesText = require('./data/atomTypes.xml');\r\nconst atomCovalentRadiiText = require('./data/atomCovalentRadii.xml');\r\n\r\nexport class AtomType {\r\n    name: string;\r\n    identifier: string;\r\n    number: number;\r\n    covalentRadius: number = 1;\r\n\r\n    constructor (number: number, name: string, identifier: string) {\r\n        this.name = name;\r\n        this.identifier = identifier;\r\n        this.number = number;\r\n    }\r\n}\r\n\r\nexport function LoadAtomTypes() {\r\n    let covalentRadii = LoadCovalentRadii();\r\n    let result = [];\r\n    let lines = atomTypesText.split(\"\\n\");\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const line = lines[i];\r\n        let match = line.match(/atom identifier=\"(\\w+)\" name=\"(\\w+)\" number=\"(\\d+)\"/);\r\n        if (match == null) {\r\n            continue;\r\n        }\r\n        let atomType = new AtomType(parseInt(match[3]), match[2], match[1]);\r\n        atomType.covalentRadius = covalentRadii.get(atomType.number) ?? 1;\r\n        result.push(atomType);\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction LoadCovalentRadii() {\r\n    let result : Map<number, number> = new Map();\r\n    let lines = atomCovalentRadiiText.split(\"\\n\");\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const line = lines[i];\r\n        let match : RegExpMatchArray = line.match(/covalent id=\"(\\d+)\" radius=\"(\\d+\\.\\d+)\"/);\r\n        if (match == null) {\r\n            continue;\r\n        }\r\n        result.set(parseInt(match[1]), parseFloat(match[2]));\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction MakeAtomTypesNumberMap(atomTypes : AtomType[]) {\r\n    let result : Map<number, AtomType> = new Map();\r\n    for (let i = 0; i < atomTypes.length; i++) {\r\n        const atomType = atomTypes[i];\r\n        result.set(atomType.number, atomType);\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction MakeAtomTypesIdentifierMap(atomTypes : AtomType[]) {\r\n    let result : Map<string, AtomType> = new Map();\r\n    for (let i = 0; i < atomTypes.length; i++) {\r\n        const atomType = atomTypes[i];\r\n        result.set(atomType.identifier, atomType);\r\n    }\r\n    return result;\r\n}\r\n\r\nconst AtomTypes = LoadAtomTypes();\r\nconst AtomTypesNumberMap = MakeAtomTypesNumberMap(AtomTypes);\r\nconst AtomTypesIdentifierMap = MakeAtomTypesIdentifierMap(AtomTypes);\r\n\r\nexport function GetAtomType(atom : Atom) {\r\n    return AtomTypesIdentifierMap.get(atom.name) ?? AtomTypes[0];\r\n}\r\n","import { mat4, vec3 } from \"gl-matrix\";\r\nimport { CreateGPUBuffer } from \"./helper\";\r\nimport { CreateBondGeometry, CreateLineGeometry, CreateSphereGeometry } from \"./meshHelpers\";\r\nimport { Octree } from \"./octree\";\r\nimport shaderGrid from './shaders/grid.wgsl';\r\n\r\nconst GridScale = 0.05;\r\n\r\nexport class AxisMesh {\r\n    device: GPUDevice;\r\n    pipeline: GPURenderPipeline;\r\n    positions: Float32Array;\r\n    colors: Float32Array;\r\n    \r\n    linesNumberOfVertices: number = -1;\r\n    linesVertexBuffer: GPUBuffer;\r\n    linesColorBuffer: GPUBuffer;\r\n    mvpUniformBuffer: GPUBuffer;\r\n    uniformBindGroup: GPUBindGroup;\r\n\r\n    constructor (device: GPUDevice, format: GPUTextureFormat) {\r\n        this.device = device;\r\n        let t0 = performance.now();\r\n        let positions = [];\r\n        let colors = [];\r\n        let lineGeometry = CreateLineGeometry(vec3.fromValues(-10000, 0, 0), vec3.fromValues(10000, 0, 0), GridScale, 1);\r\n        positions.push(...lineGeometry.positions);\r\n        colors.push(...lineGeometry.positions.map((v, i) => i%3 == 0 ? 1 : 0));\r\n\r\n        lineGeometry = CreateLineGeometry(vec3.fromValues(0, -10000, 0), vec3.fromValues(0, 10000, 0), GridScale, 1);\r\n        positions.push(...lineGeometry.positions);\r\n        colors.push(...lineGeometry.positions.map((v, i) => i%3 == 1 ? 1 : 0));\r\n\r\n        lineGeometry = CreateLineGeometry(vec3.fromValues(0, 0, -10000), vec3.fromValues(0, 0, 10000), GridScale, 1);\r\n        positions.push(...lineGeometry.positions);\r\n        colors.push(...lineGeometry.positions.map((v, i) => i%3 == 2 ? 1 : 0));\r\n        this.positions = new Float32Array(positions);\r\n        this.colors = new Float32Array(colors);\r\n        let t1 = performance.now();\r\n\r\n        this.linesNumberOfVertices = this.positions.length / 3;\r\n        this.linesVertexBuffer = CreateGPUBuffer(device, this.positions);\r\n        this.linesColorBuffer = CreateGPUBuffer(device, this.colors);\r\n\r\n        this.pipeline = device.createRenderPipeline({\r\n            layout:'auto',\r\n            vertex: {\r\n                module: device.createShaderModule({\r\n                    code: shaderGrid\r\n                }),\r\n                entryPoint: \"vs_main\",\r\n                buffers:[\r\n                    {\r\n                        arrayStride: 4*3,\r\n                        attributes: [{\r\n                            shaderLocation: 0,\r\n                            format: \"float32x3\",\r\n                            offset: 0\r\n                        }]\r\n                    },\r\n                    {\r\n                        arrayStride: 4*3,\r\n                        attributes: [{\r\n                            shaderLocation: 1,\r\n                            format: \"float32x3\",\r\n                            offset: 0\r\n                        }]\r\n                    }\r\n                ]\r\n            },\r\n            fragment: {\r\n                module: device.createShaderModule({                    \r\n                    code: shaderGrid\r\n                }),\r\n                entryPoint: \"fs_main\",\r\n                targets: [\r\n                    {\r\n                        format: format as GPUTextureFormat\r\n                    }\r\n                ]\r\n            },\r\n            primitive:{\r\n                topology: \"triangle-list\",\r\n            },\r\n            depthStencil:{\r\n                format: \"depth32float\",\r\n                depthWriteEnabled: true,\r\n                depthCompare: \"less\"\r\n            }\r\n        });\r\n\r\n        this.mvpUniformBuffer = device.createBuffer({\r\n            size: 64,\r\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\r\n        });\r\n\r\n        this.uniformBindGroup = device.createBindGroup({\r\n            layout: this.pipeline.getBindGroupLayout(0),\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: {\r\n                        buffer: this.mvpUniformBuffer,\r\n                    }\r\n                }\r\n            ]\r\n        });\r\n    }\r\n\r\n    public DrawStructure(renderPass: GPURenderPassEncoder, mvpMatrix: mat4) {\r\n        let numberOfVerticesToDraw = this.linesNumberOfVertices;\r\n        this.device.queue.writeBuffer(this.mvpUniformBuffer, 0, mvpMatrix as ArrayBuffer);\r\n        renderPass.setPipeline(this.pipeline);\r\n        renderPass.setBindGroup(0, this.uniformBindGroup);\r\n        renderPass.setVertexBuffer(0, this.linesVertexBuffer);\r\n        renderPass.setVertexBuffer(1, this.linesColorBuffer);\r\n        renderPass.draw(numberOfVerticesToDraw);\r\n    }\r\n}","import { vec2, vec3, mat4 } from 'gl-matrix';\r\n\r\nexport class Benchmarker {\r\n    frameTimes: number[] = [];\r\n    framesPerPosition: number = 60;\r\n    currentFrame: number = 0;\r\n    running: boolean = false;\r\n    distanceFromOrigin: number = 50; \r\n    positions: vec3[];\r\n    t0: number = 0;\r\n\r\n    constructor () {\r\n        this.positions = [];\r\n        this.InitializePositions();\r\n    }\r\n\r\n    private InitializePositions() {\r\n        this.positions = [];\r\n        for (let z = -1; z < 2; z += 2) {\r\n            for (let y = -1; y < 2; y += 2) {\r\n                for (let x = -1; x < 2; x += 2) {\r\n                    this.positions.push(vec3.fromValues(x*this.distanceFromOrigin/Math.sqrt(3), y*this.distanceFromOrigin/Math.sqrt(3), z*this.distanceFromOrigin/Math.sqrt(3)));\r\n                }\r\n            }\r\n        }\r\n        for (let x = -1; x < 2; x += 2) {\r\n            this.positions.push(vec3.fromValues(x*this.distanceFromOrigin, 0, 0));\r\n        }\r\n        for (let y = -1; y < 2; y += 2) {\r\n            this.positions.push(vec3.fromValues(0, y*this.distanceFromOrigin, 0));\r\n        }\r\n        for (let z = -1; z < 2; z += 2) {\r\n            this.positions.push(vec3.fromValues(0, 0, z*this.distanceFromOrigin));\r\n        }\r\n    }\r\n\r\n    public Start() {\r\n        this.running = true;\r\n        this.frameTimes = [];\r\n        this.currentFrame = 0;\r\n        this.t0 = performance.now();\r\n    }\r\n\r\n    public GetFramePosition() {\r\n        let position = Math.floor(this.currentFrame/this.framesPerPosition);\r\n        if (position >= this.positions.length) {\r\n            position = this.positions.length-1;\r\n        }\r\n        return this.positions[position];\r\n    }\r\n\r\n    public GetFrameViewMatrix() {\r\n        let bViewMatrix = mat4.create();\r\n        if (this.GetFramePosition()[0] == 0 && this.GetFramePosition()[2] == 0) {\r\n            mat4.lookAt(bViewMatrix, this.GetFramePosition(), vec3.fromValues(0, 0, 0), vec3.fromValues(0, 0, 1));\r\n        } else {\r\n            mat4.lookAt(bViewMatrix, this.GetFramePosition(), vec3.fromValues(0, 0, 0), vec3.fromValues(0, 1, 0));\r\n        }\r\n        return bViewMatrix;\r\n    }\r\n\r\n    public SubmitFrameTime(time: number) {\r\n        if (!this.running) {\r\n            return;\r\n        }\r\n        this.frameTimes.push(time);\r\n        this.currentFrame++;\r\n    }\r\n\r\n    public EndFrame() {\r\n        if (!this.running) {\r\n            return;\r\n        }\r\n        if (this.currentFrame >= this.framesPerPosition*this.positions.length) {\r\n            this.running = false;\r\n            console.log(\"Benchmark finished.\\n Total average ms: \" + this.frameTimes.reduce((a, b) => a+b)/this.frameTimes.length);\r\n            let t1 = performance.now();\r\n            console.log(\"Total benchmark time: \" + (t1-this.t0) + \"ms\");\r\n            for (let p = 0; p < this.positions.length; p++) {\r\n                let sum = 0;\r\n                for (let i = p*this.framesPerPosition; i < (p+1)*this.framesPerPosition; i++) {\r\n                    sum += this.frameTimes[i];\r\n                }\r\n                let posString = this.positions[p][0].toFixed(3)+\",\"+this.positions[p][1].toFixed(3)+\",\"+this.positions[p][2].toFixed(3);\r\n                console.log(\"Position \" + p + \" (\" + posString + \") average ms: \" + sum/this.framesPerPosition);\r\n            }\r\n            //console.log(this.frameTimes);\r\n        }\r\n    }\r\n}\r\n","import { Atom } from \"./atom\";\r\nimport { GetAtomType } from \"./atomDatabase\";\r\nimport { Residue } from \"./residue\";\r\nimport { GetResidueType, ResidueType, ResidueTypeEnum } from \"./residueDatabase\";\r\n\r\nexport class Chain {\r\n    name: string;\r\n    residues: Residue[];\r\n    bonds: Map<{a:Atom, b:Atom}, {arity: number, residue: Residue}> = new Map();\r\n    bondsKeys: {a:Atom, b:Atom}[] = [];\r\n\r\n    constructor (name: string, residues: Residue[]) {\r\n        this.name = name;\r\n        this.residues = residues;\r\n    }\r\n\r\n    public ComputeBonds() {\r\n        this.bonds = new Map();\r\n        for (let i = 0; i < this.residues.length; i++) {\r\n            this.ComputeBondsInsideResidue(this.residues[i]);\r\n        }\r\n        this.ComputeBondsBetweenProteinResidues();\r\n        this.ComputeBondsBetweenNucleicAcidResidues();\r\n        this.DetermineBondsArity();\r\n        this.bondsKeys = Array.from(this.bonds.keys());\r\n    }\r\n\r\n    // The lower bound for the test of bond length (not a precise number).\r\n    private static TOLERANCE_MIN = 0.4;\r\n    // The upper bound for the test of bond length (not a precise number).\r\n    private static TOLERANCE_MAX = 0.56;\r\n\r\n    private ComputeBondsInsideResidue(residue: Residue) {\r\n        let firstAtom, secondAtom;\r\n        for (let i = 0; i < residue.atoms.length; i++) {\r\n            firstAtom = residue.atoms[i];\r\n            for (let j = i + 1; j < residue.atoms.length; j++) {\r\n                secondAtom = residue.atoms[j];\r\n                // if bond between the atoms doesn't already exists, it is added according to the computation result. The bond between two hydrogens is prohibited.\r\n                if (!this.IsAtomPairBonded(firstAtom, secondAtom) && (firstAtom.name != \"H\" || secondAtom.name != \"H\")) {\r\n                    if (this.IsAtomsDistanceWithinTolerance(firstAtom, secondAtom)) {\r\n                        this.bonds.set({a:firstAtom, b:secondAtom}, {arity: 1, residue: residue});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private ComputeBondsBetweenProteinResidues() {\r\n        let toCheck = [];\r\n        for (let i = 0; i < this.residues.length; i++) {\r\n            let residueType = GetResidueType(this.residues[i]);\r\n            if (residueType.type != ResidueTypeEnum.Ligand && residueType.type != ResidueTypeEnum.Solvent) {\r\n                toCheck.push(this.residues[i]);\r\n            }\r\n        }\r\n        for (let i = 0; i < toCheck.length-1; i++) {\r\n            const resFirst = toCheck[i];\r\n            const resSecond = toCheck[i+1];\r\n            const firstAtom = resFirst.FindAtom(\"C\");\r\n            const secondAtom = resSecond.FindAtom(\"N\");\r\n            if (firstAtom != null && secondAtom != null && !this.IsAtomPairBonded(firstAtom, secondAtom)) {\r\n                if (this.IsAtomsDistanceWithinTolerance(firstAtom, secondAtom)) {\r\n                    this.bonds.set({a:firstAtom, b:secondAtom}, {arity: 1, residue: resFirst});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private ComputeBondsBetweenNucleicAcidResidues() {\r\n        let toCheck = [];\r\n        for (let i = 0; i < this.residues.length; i++) {\r\n            let residueType = GetResidueType(this.residues[i]);\r\n            if (residueType.type != ResidueTypeEnum.Solvent) {\r\n                toCheck.push(this.residues[i]);\r\n            }\r\n        }\r\n        for (let i = 0; i < toCheck.length-1; i++) {\r\n            const resFirst = toCheck[i];\r\n            const resSecond = toCheck[i+1];\r\n            //todo:\r\n            // if ((resSecond.sequenceNumber == (resFirst.sequenceNumber + 1)) || ((resSecond.sequenceNumber == (resFirst.sequenceNumber) && (resSecond.getInsertionCode() == (resFirst.getInsertionCode() + 1))))) {\r\n            if (resSecond.sequenceNumber == (resFirst.sequenceNumber + 1)) {\r\n                const firstAtom = resFirst.FindAtom(\"O3'\");\r\n                const secondAtom = resSecond.FindAtom(\"P\");\r\n                if (firstAtom != null && secondAtom != null && !this.IsAtomPairBonded(firstAtom, secondAtom)) {\r\n                    if (this.IsAtomsDistanceWithinTolerance(firstAtom, secondAtom)) {\r\n                        this.bonds.set({a:firstAtom, b:secondAtom}, {arity: 1, residue: resFirst});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private DetermineBondsArity() {\r\n        const keys = Array.from(this.bonds.keys());\r\n        for (let i = 0; i < keys.length; i++) {\r\n            const bond = keys[i];\r\n            const bondProperties = this.bonds.get(bond)!;\r\n            const residueType = GetResidueType(bondProperties.residue);\r\n            if (residueType.type == ResidueTypeEnum.AminoAcidBase20 || residueType.type == ResidueTypeEnum.AminoAcidExtra) {\r\n                this.bonds.set(bond, {arity: residueType.GetAtomPairBondArity(bond.a, bond.b), residue: bondProperties.residue});\r\n            }\r\n        }\r\n    }\r\n\r\n    private IsAtomsDistanceWithinTolerance(a: Atom, b: Atom) {\r\n        const x = a.x - b.x;\r\n        const y = a.y - b.y;\r\n        const z = a.z - b.z;\r\n        const distSq = x * x + y * y + z * z;\r\n        const tolerance = GetAtomType(a).covalentRadius + GetAtomType(b).covalentRadius + Chain.TOLERANCE_MAX;\r\n        return distSq > (Chain.TOLERANCE_MIN * Chain.TOLERANCE_MIN) && distSq < (tolerance * tolerance);\r\n    }\r\n\r\n    public IsAtomPairBonded(a: Atom, b: Atom) {\r\n        return (this.bonds.get({a: a, b: b}) ?? {residue: null, arity: 0}).arity >= 1 ||  (this.bonds.get({a: b, b: a}) ?? {residue: null, arity: 0}).arity >= 1;\r\n    }\r\n}","import { GetAtomType } from \"./atomDatabase\";\r\nimport { Chain } from \"./chain\";\r\nimport { CreateGPUBuffer } from \"./helper\";\r\nimport { CreateBondGeometry, CreateSphereGeometry } from \"./meshHelpers\";\r\n\r\nconst AtomScale = 0.25;\r\n\r\nexport class ChainMesh {\r\n    chain : Chain;\r\n    atomsPositions : Float32Array;\r\n    atomsColors : Float32Array;\r\n    bondsPositions : Float32Array;\r\n    bondsColors : Float32Array;\r\n    \r\n    initializedBuffers : boolean = false;\r\n    atomsNumberOfVertices : number = -1;\r\n    atomsVertexBuffer? : GPUBuffer;\r\n    atomsColorBuffer? : GPUBuffer;\r\n    bondsNumberOfVertices : number = -1;\r\n    bondsVertexBuffer? : GPUBuffer;\r\n    bondsColorBuffer? : GPUBuffer;\r\n\r\n    constructor (chain: Chain) {\r\n        let t0 = performance.now();\r\n        this.chain = chain;\r\n        const instanceMesh = CreateSphereGeometry(1, 12, 6);\r\n        let atomsAmount = 0;\r\n        this.chain.residues.forEach(r => {atomsAmount += r.atoms.length});\r\n        this.atomsPositions = new Float32Array(instanceMesh.positions.length*atomsAmount);\r\n        this.atomsColors = new Float32Array(instanceMesh.colors.length*atomsAmount);\r\n        let atomI = 0;\r\n        for (let r = 0; r < this.chain.residues.length; r++) {\r\n            const residue = this.chain.residues[r];\r\n            for (let i = 0; i < residue.atoms.length; i++) {\r\n                const atom = residue.atoms[i];\r\n                let positions = new Float32Array(instanceMesh.positions);\r\n                for (let j = 0; j < positions.length; j++) {\r\n                    if (j%3 == 0) {\r\n                        positions[j] = (positions[j]*AtomScale)*GetAtomType(atom).covalentRadius+atom.x;\r\n                    } else if (j%3 == 1) {\r\n                        positions[j] = (positions[j]*AtomScale)*GetAtomType(atom).covalentRadius+atom.y;\r\n                    } else if (j%3 == 2) {\r\n                        positions[j] = (positions[j]*AtomScale)*GetAtomType(atom).covalentRadius+atom.z;\r\n                    }\r\n                }\r\n                let atomColor = atom.GetColor();\r\n                let colors = new Float32Array(instanceMesh.colors);\r\n                for (let j = 0; j < colors.length; j++) {\r\n                    colors[j] = atomColor[j%3];\r\n                }\r\n                this.atomsPositions.set(positions, instanceMesh.positions.length*atomI);\r\n                this.atomsColors.set(colors, instanceMesh.colors.length*atomI);\r\n                atomI++;\r\n            }\r\n        }\r\n        let t1 = performance.now();\r\n        let bondsPositions = [];\r\n        const bondsMap = this.chain.bonds;\r\n        const bondsKeys = this.chain.bondsKeys;\r\n        for (let j = 0; j < bondsKeys.length; j++) {\r\n            const bond = bondsKeys[j];\r\n            bondsPositions.push(...CreateBondGeometry(bond.a, bond.b, 0.03, bondsMap.get(bond)!.arity).positions);\r\n        }\r\n        if (bondsKeys.length == 0) {\r\n            bondsPositions.push(...CreateBondGeometry(this.chain.residues[0].atoms[0], this.chain.residues[0].atoms[0], 0.03, 1).positions);\r\n        }\r\n        this.bondsPositions = new Float32Array(bondsPositions);\r\n        this.bondsColors = new Float32Array(this.bondsPositions.length).map((v) => 0.5); \r\n        let t2 = performance.now();\r\n    }\r\n\r\n    public InitializeBuffers(device : GPUDevice) {\r\n        this.initializedBuffers = true;\r\n        this.atomsNumberOfVertices = this.atomsPositions.length / 3;\r\n        this.atomsVertexBuffer = CreateGPUBuffer(device, this.atomsPositions);\r\n        this.atomsColorBuffer = CreateGPUBuffer(device, this.atomsColors);\r\n        this.bondsNumberOfVertices = this.bondsPositions.length / 3;\r\n        this.bondsVertexBuffer = CreateGPUBuffer(device, this.bondsPositions);\r\n        this.bondsColorBuffer = CreateGPUBuffer(device, this.bondsColors);\r\n    }\r\n\r\n    public DestroyBuffers() {\r\n        if (!this.initializedBuffers) {\r\n            return;\r\n        }\r\n        this.initializedBuffers = false;\r\n        this.atomsNumberOfVertices = -1;\r\n        this.atomsVertexBuffer?.destroy();\r\n        this.atomsColorBuffer?.destroy();\r\n        this.bondsNumberOfVertices = -1;\r\n        this.bondsVertexBuffer?.destroy();\r\n        this.bondsColorBuffer?.destroy();\r\n    }\r\n}","import { vec2, vec3, mat4 } from 'gl-matrix';\n\nexport function CreateTransforms(modelMat:mat4, translation:vec3 = [0,0,0], rotation:vec3 = [0,0,0], scaling:vec3 = [1,1,1]) {\n    const rotateXMat = mat4.create();\n    const rotateYMat = mat4.create();\n    const rotateZMat = mat4.create();   \n    const translateMat = mat4.create();\n    const scaleMat = mat4.create();\n\n    //perform indivisual transformations\n    mat4.fromTranslation(translateMat, translation);\n    mat4.fromXRotation(rotateXMat, rotation[0]);\n    mat4.fromYRotation(rotateYMat, rotation[1]);\n    mat4.fromZRotation(rotateZMat, rotation[2]);\n    mat4.fromScaling(scaleMat, scaling);\n\n    //combine all transformation matrices together to form a final transform matrix: modelMat\n    mat4.multiply(modelMat, rotateXMat, scaleMat);\n    mat4.multiply(modelMat, rotateYMat, modelMat);        \n    mat4.multiply(modelMat, rotateZMat, modelMat);\n    mat4.multiply(modelMat, translateMat, modelMat);\n};\n\nexport function CreateViewProjection(aspectRatio = 1.0, cameraPosition:vec3 = [2, 2, 4], center:vec3 = [0, 0, 0], upDirection:vec3 = [0, 1, 0]) {\n    const viewMatrix = mat4.create();\n    const projectionMatrix = mat4.create();       \n    const viewProjectionMatrix = mat4.create();\n    const far = 10000.0;\n    mat4.perspective(projectionMatrix, 2*Math.PI/5, aspectRatio, 0.1, far);\n\n    mat4.lookAt(viewMatrix, cameraPosition, center, upDirection);\n    mat4.multiply(viewProjectionMatrix, projectionMatrix, viewMatrix);\n\n    const cameraOption = {\n        eye: cameraPosition,\n        center: center,\n        zoomMax: 500,\n        zoomSpeed: 2\n    };\n\n    return {\n        viewMatrix,\n        projectionMatrix,\n        viewProjectionMatrix,\n        cameraOption,\n        far\n    }\n};\n\n\nexport function CreateGPUBufferUint(device:GPUDevice, data:Uint32Array, \n    usageFlag:GPUBufferUsageFlags = GPUBufferUsage.INDEX | GPUBufferUsage.COPY_DST) {\n    const buffer = device.createBuffer({\n        size: data.byteLength,\n        usage: usageFlag,\n        mappedAtCreation: true\n    });\n    new Uint32Array(buffer.getMappedRange()).set(data);\n    buffer.unmap();\n    return buffer;\n};\n\nexport const CreateGPUBuffer = (device:GPUDevice, data:Float32Array, \n    usageFlag:GPUBufferUsageFlags = GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST) => {\n    const buffer = device.createBuffer({\n        size: data.byteLength,\n        usage: usageFlag,\n        mappedAtCreation: true\n    });\n    new Float32Array(buffer.getMappedRange()).set(data);\n    buffer.unmap();\n    return buffer;\n};\n\nexport async function InitGPU(fixedCanvas: boolean) {\n    CheckWebGPU();\n    InitCanvas(fixedCanvas);\n    const canvas = document.getElementById('canvas-webgpu') as HTMLCanvasElement;\n    const adapter = await navigator.gpu?.requestAdapter();\n    let timestampsEnabled = false;\n    let device: GPUDevice;\n    try {\n        device = await adapter?.requestDevice({\n            requiredFeatures: [\"timestamp-query\"],\n        }) as GPUDevice;\n        timestampsEnabled = true;\n        console.log(\"Created device with timestamps enabled\");\n    } catch {\n        device = await adapter?.requestDevice() as GPUDevice;\n        console.log(\"Created device with timestamps disabled, performance tracking won't be available.\");\n        console.log(\"Launch chrome with this command line option to enable: '--disable-dawn-features=disallow_unsafe_apis'\");\n    }\n    const context = canvas.getContext('webgpu') as GPUCanvasContext;\n\n    const format = navigator.gpu.getPreferredCanvasFormat();\n    context.configure({\n        device: device,\n        format: format,\n        alphaMode:'opaque'\n    });\n    return{ device, canvas, format, context, timestampsEnabled };\n};\n\nexport function CreateTimestampBuffer(device: GPUDevice, capacity: number = 8) {\n    capacity = Math.floor(8); //Max number of timestamps we can store\n    let querySet = device.createQuerySet({\n        type: \"timestamp\",\n        count: capacity,\n    });\n    let queryBuffer = device.createBuffer({\n        size: 8 * capacity,\n        usage: GPUBufferUsage.QUERY_RESOLVE \n        | GPUBufferUsage.STORAGE\n        | GPUBufferUsage.COPY_SRC\n        | GPUBufferUsage.COPY_DST,\n    });\n    return {queryBuffer, querySet, capacity}; \n}\n\nexport function CheckWebGPU() {\n    let result = 'Great, your current browser supports WebGPU!';\n    if (!navigator.gpu) {\n        result = `Your current browser does not support WebGPU! Make sure you are on a system \n        with WebGPU enabled. Currently, WebGPU is supported in  \n        <a href=\"https://www.google.com/chrome/canary/\">Chrome canary</a>\n        with the flag \"enable-unsafe-webgpu\" enabled. See the \n        <a href=\"https://github.com/gpuweb/gpuweb/wiki/Implementation-Status\"> \n        Implementation Status</a> page for more details.   \n        You can also use your regular Chrome to try a pre-release version of WebGPU via\n        <a href=\"https://developer.chrome.com/origintrials/#/view_trial/118219490218475521\">Origin Trial</a>.                \n        `;\n        console.log(result);\n        throw('Your current browser does not support WebGPU!');\n    } \n    return true;\n}\n\nexport function InitCanvas(useFixedSize: boolean) {\n    const canvas = document.getElementById('canvas-webgpu') as HTMLCanvasElement;\n    if(canvas){\n        const div = document.getElementsByClassName('item2')[0] as HTMLDivElement;\n        if(div){\n            if (useFixedSize) {\n                canvas.width  = Math.min(div.offsetWidth, 640);\n                canvas.height = Math.min(div.offsetHeight, 640);\n            } else {\n                canvas.width  = div.offsetWidth;\n                canvas.height = div.offsetHeight;\n            }\n\n            function windowResize() {\n                if (useFixedSize) {\n                    canvas.width  = Math.min(div.offsetWidth, 640);\n                    canvas.height = Math.min(div.offsetHeight, 640);\n                } else {\n                    canvas.width  = div.offsetWidth;\n                    canvas.height = div.offsetHeight;\n                }\n            };\n            window.addEventListener('resize', windowResize);\n        }\n    }\n}\n\nexport function LoadData(dataFile: File, callback: Function) {\n    let reader = new FileReader();\n    reader.onload = function (textResult) {\n        if (textResult.target == null) {\n            return;\n        }\n        let text = textResult.target.result;\n        callback(text);\n    }\n    reader.onerror = function (e) {\n        throw (\"Loading the data file failed.\");\n    }\n    reader.readAsText(dataFile, \"UTF-8\");\n}","import { mat4, vec3, vec4 } from \"gl-matrix\";\r\nimport { Atom } from \"./atom\";\r\nimport { GetAtomType } from \"./atomDatabase\";\r\nimport { CreateGPUBuffer } from \"./helper\";\r\nimport { KdTree } from \"./kdtree\";\r\nimport { CreateQuadGeometry } from \"./meshHelpers\";\r\nimport shader from './shaders/impostor.wgsl';\r\nimport { Structure } from \"./structure\";\r\n\r\nexport class ImpostorRenderer {\r\n    atomsCount : number = 1;\r\n    quadPositions : GPUBuffer;\r\n    quadColors : GPUBuffer;\r\n    quadInfos : GPUBuffer;\r\n    pipeline : GPURenderPipeline;\r\n    mvpUniformBuffer : GPUBuffer;\r\n    vUniformBuffer : GPUBuffer;\r\n    cameraPosBuffer : GPUBuffer;\r\n    uniformBindGroup : GPUBindGroup;\r\n\r\n    atomDrawLimitBuffer : GPUBuffer;\r\n    drawSettingsBindGroup : GPUBindGroup;\r\n    \r\n    constructor (device: GPUDevice, format: GPUTextureFormat) {\r\n        let quad = CreateQuadGeometry(new Atom(0, 0, 0, \"C\", \"C\"));\r\n        this.quadPositions = CreateGPUBuffer(device, quad.positions);\r\n        this.quadColors = CreateGPUBuffer(device, quad.color);\r\n        this.quadInfos = CreateGPUBuffer(device, quad.info);\r\n\r\n        this.pipeline = device.createRenderPipeline({\r\n            layout:'auto',\r\n            vertex: {\r\n                module: device.createShaderModule({                    \r\n                    code: shader\r\n                }),\r\n                entryPoint: \"vs_main\",\r\n                buffers:[\r\n                    {\r\n                        arrayStride: 4*3,\r\n                        attributes: [{\r\n                            shaderLocation: 0,\r\n                            format: \"float32x3\",\r\n                            offset: 0\r\n                        }]\r\n                    },\r\n                    {\r\n                        arrayStride: 4*3,\r\n                        attributes: [{\r\n                            shaderLocation: 1,\r\n                            format: \"float32x3\",\r\n                            offset: 0\r\n                        }]\r\n                    },\r\n                    {\r\n                        arrayStride: 4*3,\r\n                        attributes: [{\r\n                            shaderLocation: 2,\r\n                            format: \"float32x3\",\r\n                            offset: 0\r\n                        }]\r\n                    }\r\n                ]\r\n            },\r\n            fragment: {\r\n                module: device.createShaderModule({                    \r\n                    code: shader\r\n                }),\r\n                entryPoint: \"fs_main\",\r\n                targets: [\r\n                    {\r\n                        format: format as GPUTextureFormat\r\n                    }\r\n                ]\r\n            },\r\n            primitive:{\r\n                topology: \"triangle-list\",\r\n            },\r\n            depthStencil:{\r\n                format: \"depth32float\",\r\n                depthWriteEnabled: true,\r\n                depthCompare: \"less\"\r\n            }\r\n        });\r\n\r\n        this.mvpUniformBuffer = device.createBuffer({\r\n            size: 64,\r\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\r\n        });\r\n\r\n        this.vUniformBuffer = device.createBuffer({\r\n            size: 64,\r\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\r\n        });\r\n\r\n        this.cameraPosBuffer = device.createBuffer({\r\n            size: 16,\r\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\r\n        });\r\n\r\n        this.uniformBindGroup = device.createBindGroup({\r\n            layout: this.pipeline.getBindGroupLayout(0),\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: {\r\n                        buffer: this.mvpUniformBuffer,\r\n                    }\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    resource: {\r\n                        buffer: this.vUniformBuffer,\r\n                    }\r\n                },\r\n                {\r\n                    binding: 2,\r\n                    resource: {\r\n                        buffer: this.cameraPosBuffer,\r\n                    }\r\n                },\r\n            ]\r\n        });\r\n\r\n        this.atomDrawLimitBuffer = device.createBuffer({\r\n            size: 16,\r\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\r\n        });\r\n        this.drawSettingsBindGroup = device.createBindGroup({\r\n            layout: this.pipeline.getBindGroupLayout(1),\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: {\r\n                        buffer: this.atomDrawLimitBuffer,\r\n                    }\r\n                },\r\n            ]\r\n        });\r\n    }\r\n\r\n    public LoadAtoms(device: GPUDevice, structure: Structure) {\r\n        this.atomsCount = structure.atoms.length;\r\n        let positions = new Float32Array(this.atomsCount*6*3);\r\n        let colors = new Float32Array(this.atomsCount*6*3);\r\n        let infos = new Float32Array(this.atomsCount*6*3);\r\n        for (let i = 0; i < structure.atoms.length; i++) {\r\n            const atom = structure.atoms[i];\r\n            let quad = CreateQuadGeometry(atom);\r\n            for (let vertex = 0; vertex < 6; vertex++) {\r\n                positions[vertex*3+i*18+0] = atom.x;\r\n                positions[vertex*3+i*18+1] = atom.y;\r\n                positions[vertex*3+i*18+2] = atom.z;\r\n                colors[vertex*3+i*18+0] = quad.color[vertex*3+0];\r\n                colors[vertex*3+i*18+1] = quad.color[vertex*3+1];\r\n                colors[vertex*3+i*18+2] = quad.color[vertex*3+2];\r\n                infos[vertex*3+i*18+0] = quad.info[vertex*3+0];\r\n                infos[vertex*3+i*18+1] = quad.info[vertex*3+1];\r\n                infos[vertex*3+i*18+2] = quad.info[vertex*3+2];\r\n            }\r\n        }\r\n        this.quadPositions = CreateGPUBuffer(device, positions);\r\n        this.quadColors = CreateGPUBuffer(device, colors);\r\n        this.quadInfos = CreateGPUBuffer(device, infos);\r\n    }\r\n\r\n    public Draw(device: GPUDevice, renderPass : GPURenderPassEncoder, mvpMatrix: mat4, vMatrix: mat4, cameraPos: vec3, percentageShown: number, sizeScale: number) {\r\n        let drawSettings = vec4.fromValues(Math.round(percentageShown*this.atomsCount), Math.round(0), 1.0, sizeScale);\r\n\r\n        device.queue.writeBuffer(this.mvpUniformBuffer, 0, mvpMatrix as ArrayBuffer);\r\n        device.queue.writeBuffer(this.vUniformBuffer, 0, vMatrix as ArrayBuffer);\r\n        device.queue.writeBuffer(this.cameraPosBuffer, 0, vec4.fromValues(cameraPos[0], cameraPos[1], cameraPos[2], 1.0) as ArrayBuffer);\r\n\r\n        device.queue.writeBuffer(this.atomDrawLimitBuffer, 0, drawSettings as ArrayBuffer);\r\n\r\n        renderPass.setPipeline(this.pipeline);\r\n        renderPass.setBindGroup(0, this.uniformBindGroup);\r\n        renderPass.setBindGroup(1, this.drawSettingsBindGroup);\r\n        renderPass.setVertexBuffer(0, this.quadPositions);\r\n        renderPass.setVertexBuffer(1, this.quadColors);\r\n        renderPass.setVertexBuffer(2, this.quadInfos);\r\n        renderPass.draw(this.atomsCount*6);\r\n    }\r\n}","import { vec3, vec4 } from \"gl-matrix\";\r\nimport { Atom } from \"./atom\";\r\nimport { GetAtomType } from \"./atomDatabase\";\r\n\r\nexport class KdTree {\r\n    tree: vec4[];\r\n\r\n    constructor(atoms: Atom[]) {\r\n        let atomsCopy = Object.assign([], atoms);\r\n        let size = Math.pow(2, Math.floor(Math.log2(atomsCopy.length)-0.0001+1));\r\n        this.tree = new Array<vec4>(size).fill(vec4.fromValues(-1, -1, -1, -1));\r\n        this.BuildTree(atomsCopy, 0, 0);\r\n        // atoms.map(a => vec4.fromValues(a.x, a.y, a.z, 0));\r\n    }\r\n\r\n    private BuildTree(atoms: Atom[], position: number, depth: number) {\r\n        if (atoms.length === 0) {\r\n            return;\r\n        }\r\n        if (atoms.length === 1) {\r\n            const atom = atoms[0];\r\n            this.tree[position] = vec4.fromValues(atom.x, atom.y, atom.z, GetAtomType(atom).number);\r\n            return;\r\n        }\r\n        const dim = depth % 3;\r\n        atoms.sort((a, b) => a.GetPosition()[dim] - b.GetPosition()[dim]);\r\n        const median = Math.floor(atoms.length / 2);\r\n        const atom = atoms[median];\r\n        const left = atoms.slice(0, median);\r\n        const right = atoms.slice(median + 1);\r\n        this.tree[position] = vec4.fromValues(atom.x, atom.y, atom.z, GetAtomType(atom).number);\r\n        this.BuildTree(left, this.Left(position), depth + 1);\r\n        this.BuildTree(right, this.Right(position), depth + 1);\r\n    }\r\n\r\n\r\n    public Nearest(atom: Atom) {\r\n        let pos = atom.GetPosition();\r\n        let curr = 0;\r\n        let stack: number[] = [];\r\n        let bestClipDistance = 10000000000;\r\n        let bestDistance = 10000000000;\r\n        let bestNode = 0;\r\n        stack.push(curr);\r\n        let n = 0;\r\n        while (stack.length > 0) {\r\n            curr = stack.pop()!;\r\n            n++;\r\n            /*if (curr > 0 && this.DimDist(pos, this.tree[this.Parent(curr)], this.DimOfNode(this.Parent(curr))) > bestClipDistance) {\r\n                continue;\r\n            }*/\r\n            const dim = this.DimOfNode(curr);\r\n            let distance = vec3.distance(vec3.fromValues(this.tree[curr][0], this.tree[curr][1], this.tree[curr][2]), pos);\r\n            if (distance < bestDistance) {\r\n                bestDistance = distance;\r\n                bestNode = curr;\r\n            }\r\n            bestClipDistance = Math.min(this.DimDist(pos, this.tree[curr], dim), bestClipDistance);\r\n            if (pos[dim] > this.tree[curr][dim] && this.Right(curr) != -1) {\r\n                if (this.Left(curr) != -1 && this.tree[this.Left(curr)][3] != -1) {\r\n                    let dist = this.DimDist(pos, this.tree[curr], dim);\r\n                    if (dist < bestDistance) {\r\n                        stack.push(this.Left(curr));\r\n                    }\r\n                }\r\n                if (this.tree[this.Right(curr)][3] == -1) {\r\n                    continue;\r\n                }\r\n                stack.push(this.Right(curr));\r\n            } else if (this.Left(curr) != -1) {\r\n                if (this.Right(curr) != -1 && this.tree[this.Right(curr)][3] != -1) {\r\n                    let dist = this.DimDist(pos, this.tree[curr], dim);\r\n                    if (dist < bestDistance) {\r\n                        stack.push(this.Right(curr));\r\n                    }\r\n                }\r\n                if (this.tree[this.Left(curr)][3] == -1) {\r\n                    continue;\r\n                }\r\n                stack.push(this.Left(curr));\r\n            }\r\n        }\r\n        let traversed = n/this.tree.filter(n=>n[3] != -1).length;\r\n        return {atom: this.tree[bestNode], distance: bestDistance, id: bestNode};\r\n    }\r\n\r\n    public Left(i: number) {\r\n        const result = 2*Math.round(i)+1;\r\n        if (result >= this.tree.length || i < 0) {\r\n            return -1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public Right(i: number) {\r\n        const result = 2*Math.round(i)+2;\r\n        if (result >= this.tree.length || i < 0) {\r\n            return -1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public Parent(i: number) {\r\n        const result = Math.floor(Math.round(i-1)/2);\r\n        if (result >= this.tree.length || i < 0) {\r\n            return -1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public DimDist(a: vec3 | vec4, b: vec3 | vec4, dim: number) {\r\n        return Math.abs(a[dim]-b[dim]);\r\n    }\r\n\r\n    public DimOfNode(i: number) {\r\n        if (i <= 0.001) {\r\n            return 0;\r\n        }\r\n        return Math.floor(Math.log2(i+1))%3;\r\n    }\r\n\r\n    public NearestTouched(atom: Atom) {\r\n        let pos = atom.GetPosition();\r\n        let curr = 0;\r\n        let stack: number[] = [];\r\n        let bestClipDistance = 10000000000;\r\n        let bestDistance = 10000000000;\r\n        let bestNode = 0;\r\n        stack.push(curr);\r\n        let n = 0;\r\n        let touched = [];\r\n        while (stack.length > 0) {\r\n            curr = stack.pop()!;\r\n            touched.push(curr);\r\n            n++;\r\n            /*if (curr > 0 && this.DimDist(pos, this.tree[this.Parent(curr)], this.DimOfNode(this.Parent(curr))) > bestClipDistance) {\r\n                continue;\r\n            }*/\r\n            const dim = this.DimOfNode(curr);\r\n            let distance = vec3.distance(vec3.fromValues(this.tree[curr][0], this.tree[curr][1], this.tree[curr][2]), pos);\r\n            if (distance < bestDistance) {\r\n                bestDistance = distance;\r\n                bestNode = curr;\r\n            }\r\n            bestClipDistance = Math.min(this.DimDist(pos, this.tree[curr], dim), bestClipDistance);\r\n            if (pos[dim] > this.tree[curr][dim] && this.Right(curr) != -1) {\r\n                if (this.Left(curr) != -1 && this.tree[this.Left(curr)][3] != -1) {\r\n                    let dist = this.DimDist(pos, this.tree[curr], dim);\r\n                    if (dist < bestDistance) {\r\n                        stack.push(this.Left(curr));\r\n                    }\r\n                }\r\n                if (this.tree[this.Right(curr)][3] == -1) {\r\n                    continue;\r\n                }\r\n                stack.push(this.Right(curr));\r\n            } else if (this.Left(curr) != -1) {\r\n                if (this.Right(curr) != -1 && this.tree[this.Right(curr)][3] != -1) {\r\n                    let dist = this.DimDist(pos, this.tree[curr], dim);\r\n                    if (dist < bestDistance) {\r\n                        stack.push(this.Right(curr));\r\n                    }\r\n                }\r\n                if (this.tree[this.Left(curr)][3] == -1) {\r\n                    continue;\r\n                }\r\n                stack.push(this.Left(curr));\r\n            }\r\n        }\r\n        let traversed = n/this.tree.filter(n=>n[3] != -1).length;\r\n        return {atom: this.tree[bestNode], distance: bestDistance, id: bestNode, touched};\r\n    }\r\n\r\n    public RayMarch(start: vec3, target: vec3) {\r\n        let rayDirection: vec3 = vec3.normalize(vec3.fromValues(0, 0, 0), vec3.subtract(vec3.fromValues(0, 0, 0), target, start));\r\n\r\n        var t = 0.0;\r\n        var pos = vec3.fromValues(0, 0, 0);\r\n        var iteration = 0;\r\n        let touchedInIterations = [];\r\n        for (iteration = 0; iteration < 50; iteration++) {\r\n            if (t > 200.0) {\r\n                break;\r\n            }\r\n            pos = vec3.add(vec3.fromValues(0, 0, 0), start, vec3.scale(vec3.fromValues(0, 0, 0), rayDirection, t));\r\n            let sdfResult = this.NearestTouched(new Atom(pos[0], pos[1], pos[2], \"C\", \"C\"));\r\n            touchedInIterations.push(sdfResult.touched);\r\n            \r\n            if (sdfResult.distance < 0.05) {\r\n                break;\r\n            }\r\n            t = t+sdfResult.distance;\r\n        }\r\n    }\r\n}\r\n","import { vec3 } from \"gl-matrix\";\r\nimport { Atom } from \"./atom\";\r\nimport { Chain } from \"./chain\";\r\nimport { Residue } from \"./residue\"; \r\n\r\nexport const IsDataPdb = (dataString: string) => {\r\n    let lines = dataString.split(\"\\n\");\r\n    return lines[0].indexOf(\"HEADER\") != -1;\r\n}\r\n\r\nexport const LoadDataPdb = (dataString: string) => {\r\n    let lines = dataString.split(\"\\n\");\r\n    let atoms = [];\r\n    let sums = {x: 0, y: 0, z: 0};\r\n    let chains = [];\r\n    let chain = new Chain(\"-1\", []);\r\n    let residue = new Residue(\"\", -1, []);\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const line = lines[i];\r\n        const lineParseResult = ParseDataLinePdb(line);\r\n        if (lineParseResult == null) {\r\n            continue;\r\n        }\r\n        if (residue.sequenceNumber != lineParseResult.residueId) {\r\n            if (residue.sequenceNumber != -1) {\r\n                if (chain.name != lineParseResult.chainName) {\r\n                    if (chain.name != \"-1\") {\r\n                        chains.push(chain);\r\n                    }\r\n                    chain = new Chain(lineParseResult.chainName, []);\r\n                }\r\n                chain.residues.push(residue);\r\n            }\r\n            residue = new Residue(lineParseResult.residueName, lineParseResult.residueId, []);\r\n        }\r\n        residue.atoms.push(lineParseResult.atom);\r\n        sums.x += lineParseResult.atom.x;\r\n        sums.y += lineParseResult.atom.y;\r\n        sums.z += lineParseResult.atom.z;\r\n        atoms.push(lineParseResult.atom);\r\n    }\r\n\r\n    if (residue.sequenceNumber != -1) {\r\n        chain.residues.push(residue);\r\n    }\r\n    if (chain.name != \"-1\") {\r\n        chains.push(chain);\r\n    }\r\n\r\n    for (let i = 0; i < atoms.length; i++) {\r\n        atoms[i].x -= sums.x/atoms.length;\r\n        atoms[i].y -= sums.y/atoms.length;\r\n        atoms[i].z -= sums.z/atoms.length;\r\n    }\r\n    for (let i = 0; i < chains.length; i++) {\r\n        const chain = chains[i];\r\n        chain.ComputeBonds();\r\n    }\r\n    return {atoms: atoms, chains: chains};\r\n}\r\n\r\n//todo: read according to this https://www.wwpdb.org/documentation/file-format-content/format33/sect9.html\r\nconst ParseDataLinePdb = (line: string) => {\r\n    let match = line.match(/ATOM  +\\d+ +([\\w']+) +(\\w+) +(\\w+) {0,3}(\\d+) +(-?\\d+\\.\\d{1,3}) *(-?\\d+\\.\\d{1,3}) *(-?\\d+\\.\\d{1,3}) *(-?\\d{1,3}\\.\\d{1,2}) *(-?\\d{1,3}\\.\\d{1,2}) +(\\w)/);\r\n    if (match == null) {\r\n        if (line.match(/^ATOM  /)) {\r\n            console.log(\"parse warning, can't match line: '\"+ line + \"'\");\r\n        }\r\n        return null;\r\n    }\r\n    const residueAtomName = match[1];\r\n    const residueName = match[2];\r\n    const chainName = match[3];\r\n    const residueId = parseInt(match[4]);\r\n    const atomName = match[10];\r\n    const position = vec3.fromValues(parseFloat(match[5]), parseFloat(match[6]), parseFloat(match[7]));\r\n    const atom = new Atom(position[0], position[1], position[2], atomName, residueAtomName);\r\n    return {residueAtomName, residueName, chainName, residueId, atomName, position, atom};\r\n}\r\n\r\n//todo read binary compressed pcd\r\n\r\nexport const IsDataPcd = (dataString: string) => {\r\n    let lines = dataString.split(\"\\n\");\r\n    return (lines[0].indexOf(\"# .PCD\") != -1 || lines[0].indexOf(\"VERSION\") != -1);\r\n}\r\n\r\nexport const LoadDataPcd = (dataString: string, scale: number = 1) => {\r\n    let lines = dataString.split(\"\\n\");\r\n    let atoms = [];\r\n    let sums = {x: 0, y: 0, z: 0};\r\n    let chains = [];\r\n    let chain = new Chain(\"MainChain\", []);\r\n    let residue = new Residue(\"MainResidue\", -1, []);\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const line = lines[i];\r\n        const lineParseResult = ParseDataLinePcd(line);\r\n        if (lineParseResult == null) {\r\n            continue;\r\n        }\r\n        residue.atoms.push(lineParseResult.atom);\r\n        sums.x += lineParseResult.atom.x;\r\n        sums.y += lineParseResult.atom.y;\r\n        sums.z += lineParseResult.atom.z;\r\n        atoms.push(lineParseResult.atom);\r\n    }\r\n\r\n    chain.residues.push(residue);\r\n    chains.push(chain);\r\n\r\n    for (let i = 0; i < atoms.length; i++) {\r\n        atoms[i].x = (atoms[i].x - (sums.x/atoms.length))*scale;\r\n        atoms[i].y = (atoms[i].y - (sums.y/atoms.length))*scale;\r\n        atoms[i].z = (atoms[i].z - (sums.z/atoms.length))*scale;\r\n    }\r\n    for (let i = 0; i < chains.length; i++) {\r\n        const chain = chains[i];\r\n        if (chain.residues[0].atoms.length < 500) {\r\n            chain.ComputeBonds();\r\n        }\r\n    }\r\n    return {atoms: atoms, chains: chains};\r\n}\r\n\r\nconst ParseDataLinePcd = (line: string) => {\r\n    let match = line.match(/^(-?\\d+\\.?\\d*(?:e\\+?\\-?\\d+)?) (-?\\d+\\.?\\d*(?:e\\+?\\-?\\d+)?) (-?\\d+\\.?\\d*(?:e\\+?\\-?\\d+)?)/);\r\n    if (match == null) {\r\n        return null;\r\n    }\r\n    const residueAtomName = \"C\";\r\n    const residueName = \"C\";\r\n    const chainName = \"C\";\r\n    const residueId = \"C\";\r\n    const atomName = \"C\";\r\n    const position = vec3.fromValues(parseFloat(match[1]), parseFloat(match[2]), parseFloat(match[3]));\r\n    const atom = new Atom(position[0], position[1], position[2], atomName, residueAtomName);\r\n    return {residueAtomName, residueName, chainName, residueId, atomName, position, atom};\r\n}\r\n\r\nexport const LoadDataObj = (dataString: string, scale: number = 1) => {\r\n    let lines = dataString.split(\"\\n\");\r\n    let atoms = [];\r\n    let sums = {x: 0, y: 0, z: 0};\r\n    let chains = [];\r\n    let chain = new Chain(\"MainChain\", []);\r\n    let residue = new Residue(\"MainResidue\", -1, []);\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const line = lines[i];\r\n        const lineParseResult = ParseDataLineObj(line);\r\n        if (lineParseResult == null) {\r\n            continue;\r\n        }\r\n        residue.atoms.push(lineParseResult.atom);\r\n        sums.x += lineParseResult.atom.x;\r\n        sums.y += lineParseResult.atom.y;\r\n        sums.z += lineParseResult.atom.z;\r\n        atoms.push(lineParseResult.atom);\r\n    }\r\n\r\n    chain.residues.push(residue);\r\n    chains.push(chain);\r\n\r\n    let limitMaxSize = 0;\r\n    for (let i = 0; i < atoms.length; i++) {\r\n        atoms[i].x = atoms[i].x - (sums.x/atoms.length);\r\n        atoms[i].y = atoms[i].y - (sums.y/atoms.length);\r\n        atoms[i].z = atoms[i].z - (sums.z/atoms.length);\r\n        limitMaxSize = Math.max(limitMaxSize, Math.max(Math.max(atoms[i].x, atoms[i].y), atoms[i].z));\r\n    }\r\n    for (let i = 0; i < atoms.length; i++) {\r\n        atoms[i].x = atoms[i].x*(20/limitMaxSize);\r\n        atoms[i].y = atoms[i].y*(20/limitMaxSize);\r\n        atoms[i].z = atoms[i].z*(20/limitMaxSize);\r\n    }\r\n    for (let i = 0; i < chains.length; i++) {\r\n        const chain = chains[i];\r\n        if (chain.residues[0].atoms.length < 500) {\r\n            chain.ComputeBonds();\r\n        }\r\n    }\r\n    return {atoms: atoms, chains: chains};\r\n}\r\n\r\nconst ParseDataLineObj = (line: string) => {\r\n    let match = line.match(/^v +(-?\\d+\\.?\\d*(?:e\\+?\\-?\\d+)?) (-?\\d+\\.?\\d*(?:e\\+?\\-?\\d+)?) (-?\\d+\\.?\\d*(?:e\\+?\\-?\\d+)?)/);\r\n    if (match == null) {\r\n        return null;\r\n    }\r\n    const residueAtomName = \"C\";\r\n    const residueName = \"C\";\r\n    const chainName = \"C\";\r\n    const residueId = \"C\";\r\n    const atomName = \"C\";\r\n    const position = vec3.fromValues(parseFloat(match[1]), parseFloat(match[2]), parseFloat(match[3]));\r\n    const atom = new Atom(position[0], position[1], position[2], atomName, residueAtomName);\r\n    return {residueAtomName, residueName, chainName, residueId, atomName, position, atom};\r\n}\r\n\r\n\r\n","import { InitGPU, CreateGPUBuffer, CreateTransforms, CreateViewProjection, CreateTimestampBuffer, LoadData} from './helper';\nimport shader from './shaders/shader.wgsl';\nimport \"./site.css\";\nimport { vec3, mat4 } from 'gl-matrix';\nimport $, { data } from 'jquery';\nimport { Structure } from './structure';\nimport { RayMarchQuad } from './rayMarchQuad';\nimport { Atom } from './atom';\nimport { KdTree } from './kdtree';\nimport { TestKdTrees } from './tests';\nimport { ImpostorRenderer } from './impostorRenderer';\nimport { RayMarchOctreeQuad } from './rayMarchOctreeQuad';\nimport { Benchmarker } from './benchmark';\nimport { AxisMesh } from './axisMesh';\nimport { TextureVisualizeQuad } from './textureVisualizeQuad';\n\nconst createCamera = require('3d-view-controls');\n\nconst dataSelection = document.getElementById(\"dataSelection\") as HTMLSelectElement;\nconst visualizationSelection = document.getElementById(\"visualizationSelection\") as HTMLSelectElement;\nconst debugSelection = document.getElementById(\"debugSelection\") as HTMLSelectElement;\nconst sliderPercentageShown = document.getElementById(\"sliderPercentageShown\") as HTMLInputElement;\nconst sliderDebugA = document.getElementById(\"raymarchingDrawnAmount\") as HTMLInputElement;\nconst sliderDebugB = document.getElementById(\"raymarchingStartPosition\") as HTMLInputElement;\nconst sliderImpostorSizeScale = document.getElementById(\"impostorSizeScale\") as HTMLInputElement;\nconst sliderKSmoothminScale = document.getElementById(\"kSmoothminScale\") as HTMLInputElement;\nconst canvasSizeCheckbox = document.getElementById(\"canvasSizeCheckbox\") as HTMLInputElement;\nconst allowResetRaymarchCheckbox = document.getElementById(\"allowResetRaymarchCheckbox\") as HTMLInputElement;\nconst addCloseNeighborsToCellsCheckbox = document.getElementById(\"addCloseNeighborsToCellsCheckbox\") as HTMLInputElement;\nconst getRaymarchCellNeighborsCheckbox = document.getElementById(\"getRaymarchNeighborsCheckbox\") as HTMLInputElement;\nconst makeIrregularOctreeCheckbox = document.getElementById(\"makeIrregularOctreeCheckbox\") as HTMLInputElement;\nconst automaticOctreeSizeCheckbox = document.getElementById(\"automaticOctreeSizeCheckbox\") as HTMLInputElement;\nconst renderOnlyMovementCheckbox = document.getElementById(\"renderOnlyMovementCheckbox\") as HTMLInputElement;\nconst alwaysFullRenderCheckbox = document.getElementById(\"alwaysFullRenderCheckbox\") as HTMLInputElement;\nconst octreeLayersSlider = document.getElementById(\"octreeLayers\") as HTMLInputElement;\nconst dataLoadButton = document.getElementById(\"dataLoadButton\") as HTMLButtonElement;\nconst dataFileInput = document.getElementById(\"dataFileInput\") as HTMLInputElement;\nconst benchmarkButton = document.getElementById(\"benchmarkButton\") as HTMLButtonElement;\nconst regenerateOctreeButton = document.getElementById(\"regenerateOctreeButton\") as HTMLButtonElement;\nconst shaderFileInput = document.getElementById(\"shaderFileInput\") as HTMLInputElement;\n//const shaderUtilitiesFileInput = document.getElementById(\"shaderUtilitiesFileInput\") as HTMLInputElement;\nconst shaderLoadButton = document.getElementById(\"shaderLoadButton\") as HTMLButtonElement;\n\nconst fpsCounterElement = document.getElementById(\"fpsCounter\") as HTMLParagraphElement;\n\nlet structure1cqw: Structure;\nlet structure1aon: Structure;\nlet structureLoaded: Structure;\n\nlet rayMarchQuadOct1cqw: RayMarchOctreeQuad;\nlet rayMarchQuadOct1aon: RayMarchOctreeQuad;\nlet rayMarchQuadOctLoaded: RayMarchOctreeQuad;\nlet impostorRenderer1cqw: ImpostorRenderer;\nlet impostorRenderer1aon: ImpostorRenderer;\nlet impostorRendererLoaded: ImpostorRenderer;\nlet axisMesh: AxisMesh;\n\nlet device: GPUDevice;\n\nlet renderDirty: boolean = true;\nlet fullRender: boolean = true;\nlet nextFullRenderTime: number = 10000;\n\nasync function Initialize() {\n    const gpu = await InitGPU(canvasSizeCheckbox.checked);\n    device = gpu.device;\n\n    let timestampBuffers: {\n        queryBuffer: GPUBuffer;\n        querySet: GPUQuerySet;\n        capacity: number;\n    };\n    if (gpu.timestampsEnabled) {\n        timestampBuffers = CreateTimestampBuffer(device, 8);\n    }\n\n    //TestKdTrees();\n\n    // create vertex buffers\n    structure1cqw = new Structure(require('./data/1cqw.pdb'));\n    structure1cqw.InitializeBuffers(device);\n    \n    let t0 = performance.now();\n    rayMarchQuadOct1cqw = new RayMarchOctreeQuad(device, gpu.format);\n    let t1 = performance.now();\n    console.log(\"Initializing raymarch octree quad: \" + (t1-t0) + \"ms\");\n    t0 = performance.now();\n    rayMarchQuadOct1cqw.LoadAtoms(device, structure1cqw);\n    t1 = performance.now();\n    console.log(\"Creating octree and buffers: \" + (t1-t0) + \"ms\");\n\n    impostorRenderer1cqw = new ImpostorRenderer(device, gpu.format);\n    impostorRenderer1cqw.LoadAtoms(device, structure1cqw);\n\n    axisMesh = new AxisMesh(device, gpu.format);\n\n    let kTree = new KdTree(structure1cqw.atoms);\n    console.log(kTree);\n    \n    let percentageShown = 1;\n \n    const basicPipeline = device.createRenderPipeline({\n        layout:'auto',\n        vertex: {\n            module: device.createShaderModule({                    \n                code: shader\n            }),\n            entryPoint: \"vs_main\",\n            buffers:[\n                {\n                    arrayStride: 4*3,\n                    attributes: [{\n                        shaderLocation: 0,\n                        format: \"float32x3\",\n                        offset: 0\n                    }]\n                },\n                {\n                    arrayStride: 4*3,\n                    attributes: [{\n                        shaderLocation: 1,\n                        format: \"float32x3\",\n                        offset: 0\n                    }]\n                }\n            ]\n        },\n        fragment: {\n            module: device.createShaderModule({                    \n                code: shader\n            }),\n            entryPoint: \"fs_main\",\n            targets: [\n                {\n                    format: gpu.format as GPUTextureFormat\n                }\n            ]\n        },\n        primitive:{\n            topology: \"triangle-list\",\n        },\n        depthStencil:{\n            format: \"depth32float\",\n            depthWriteEnabled: true,\n            depthCompare: \"less\"\n        }\n    });\n\n    // create uniform data\n    const modelMatrix = mat4.create();\n    const mvpMatrix = mat4.create();\n    let vMatrix = mat4.create();\n    let vpMatrix = mat4.create();\n    let cameraPosition = vec3.fromValues(0, 5, 45);\n\n    console.log(dataSelection.value);\n    if (dataSelection.value != \"1cqw\") {\n        cameraPosition = vec3.fromValues(125, 31.5, 10.5);\n    }\n    let vp = CreateViewProjection(gpu.canvas.width/gpu.canvas.height, cameraPosition);\n    vpMatrix = vp.viewProjectionMatrix;\n\n    // add rotation and camera:\n    let rotation = vec3.fromValues(0, 0, 0);       \n    var camera = createCamera(gpu.canvas, vp.cameraOption);\n    console.log(camera);\n\n    // create uniform buffer and layout\n    const uniformBuffer = device.createBuffer({\n        size: 64,\n        usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\n    });\n\n    const basicUniformBindGroup = device.createBindGroup({\n        layout: basicPipeline.getBindGroupLayout(0),\n        entries: [{\n            binding: 0,\n            resource: {\n                buffer: uniformBuffer,\n                offset: 0,\n                size: 64\n            }\n        }]\n    });\n\n    let textureView = gpu.context.getCurrentTexture().createView();\n    let depthTexture = device.createTexture({\n        label: \"DepthTexture\",\n        size: [gpu.canvas.width, gpu.canvas.height, 1],\n        format: \"depth32float\",\n        usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.RENDER_ATTACHMENT\n    });\n    let depthTextureView = depthTexture.createView({label: \"DepthTextureView\"});\n    let renderPassDescription = {\n        colorAttachments: [{\n            view: textureView,\n            clearValue: { r: 0.2, g: 0.247, b: 0.314, a: 1.0 }, //background color\n            loadValue: { r: 0.2, g: 0.247, b: 0.314, a: 1.0 }, \n            loadOp: 'clear',\n            storeOp: 'store'\n        }],\n        depthStencilAttachment: {\n            view: depthTextureView,\n            depthClearValue: 1.0,\n            depthLoadOp:'clear',\n            depthStoreOp: 'store',\n        }\n    };\n    let textureQuadPassDescriptor: GPURenderPassDescriptor = {\n        colorAttachments: [{\n            view: textureView,\n            clearValue: { r: 0.2, g: 0.247, b: 0.314, a: 1.0 },\n            loadOp: 'clear',\n            storeOp: 'store'\n        }],\n    };\n    let textureVisualizeQuad: TextureVisualizeQuad;\n    //let depthSampler = device.createSampler(GPUSamplerDescriptor)\n    Reinitialize();\n\n    function CreateAnimation(draw : any) {\n        function step() {\n            rotation = [0, 0, 0];\n            draw();\n            requestAnimationFrame(step);\n        }\n        requestAnimationFrame(step);\n    }\n\n    let previousFrameDeltaTimesMs: number[] = new Array<number>(60).fill(15);\n    let frameId = 0;\n\n    function draw() {\n        if (!document.hasFocus() && !benchmarker.running) {\n            return;\n        }\n\n        const pMatrix = vp.projectionMatrix;\n        if (camera.tick()) {\n            vMatrix = camera.matrix;\n            mat4.multiply(vpMatrix, pMatrix, vMatrix);\n            renderDirty = true;\n            queueFullRender();\n        }\n        if (nextFullRenderTime < performance.now()) {\n            nextFullRenderTime = 100000000;\n            renderDirty = true;\n            fullRender = true;\n        }\n        if (!renderDirty && renderOnlyMovementCheckbox.checked && !benchmarker.running) {\n            return;\n        }\n        if (alwaysFullRenderCheckbox.checked) {\n            fullRender = true;\n        }\n        frameId++;\n\n        let cameraPosition = camera.eye;\n        if (benchmarker.running) {\n            cameraPosition = benchmarker.GetFramePosition();\n            const bViewMatrix = benchmarker.GetFrameViewMatrix();\n            mat4.multiply(vpMatrix, pMatrix, bViewMatrix);\n        }\n\n        CreateTransforms(modelMatrix, [0,0,0], rotation);\n        mat4.multiply(mvpMatrix, vpMatrix, modelMatrix);\n        device.queue.writeBuffer(uniformBuffer, 0, mvpMatrix as ArrayBuffer);\n\n        textureView = gpu.context.getCurrentTexture().createView();\n        renderPassDescription.colorAttachments[0].view = textureView;\n        const commandEncoder = device.createCommandEncoder();\n        if (gpu.timestampsEnabled) {\n            commandEncoder.writeTimestamp(timestampBuffers.querySet, 0);\n        }\n\n        const renderPass = commandEncoder.beginRenderPass(renderPassDescription as GPURenderPassDescriptor);\n        if (visualizationSelection.value == \"basic\") {\n            renderPass.setPipeline(basicPipeline);\n            renderPass.setBindGroup(0, basicUniformBindGroup);\n            if (dataSelection.value == \"1cqw\") {\n                structure1cqw.DrawStructure(renderPass, percentageShown);\n            } else if (dataSelection.value == \"1aon\") {\n                structure1aon.DrawStructure(renderPass, percentageShown);\n            } else if (structureLoaded != undefined && dataSelection.value == \"dataFile\") {\n                structureLoaded.DrawStructure(renderPass, percentageShown);\n            }\n            axisMesh.DrawStructure(renderPass, mvpMatrix);\n        } else if (visualizationSelection.value == \"impostor\") {\n            const vp = CreateViewProjection(gpu.canvas.width/gpu.canvas.height, cameraPosition, vec3.fromValues(0, 0, 0), vec3.fromValues(0, 1, 0));\n            let vMatrix = mat4.clone(vp.viewMatrix);\n            let drawAmount = parseFloat(sliderDebugA.value)/100;\n            let sizeScale = parseFloat(sliderImpostorSizeScale.value);\n            if (dataSelection.value == \"1cqw\") {\n                impostorRenderer1cqw.Draw(device, renderPass, vpMatrix, vMatrix, cameraPosition, drawAmount, sizeScale);\n\n                renderPass.setPipeline(basicPipeline);\n                renderPass.setBindGroup(0, basicUniformBindGroup);\n                structure1cqw.DrawStructure(renderPass, 1, true);\n            } else if (dataSelection.value == \"1aon\") {\n                impostorRenderer1aon.Draw(device, renderPass, vpMatrix, vMatrix, cameraPosition, drawAmount, sizeScale);\n\n                renderPass.setPipeline(basicPipeline);\n                renderPass.setBindGroup(0, basicUniformBindGroup);\n                structure1aon.DrawStructure(renderPass, 1, true);\n            } else if (structureLoaded != undefined && dataSelection.value == \"dataFile\") {\n                impostorRendererLoaded.Draw(device, renderPass, vpMatrix, vMatrix, cameraPosition, drawAmount, sizeScale);\n\n                renderPass.setPipeline(basicPipeline);\n                renderPass.setBindGroup(0, basicUniformBindGroup);\n                structureLoaded.DrawStructure(renderPass, 1, true);\n            }\n            axisMesh.DrawStructure(renderPass, mvpMatrix);\n        } else if (visualizationSelection.value == \"raymarchoctree\") {\n            let inverseVp = mat4.create();\n            mat4.invert(inverseVp, vpMatrix);\n            let drawAmount = parseFloat(sliderDebugA.value)/100;\n            let drawStart = parseFloat(sliderDebugB.value)/100;\n            let sizeScale = parseFloat(sliderImpostorSizeScale.value);\n            let kSmoothminScale = parseFloat(sliderKSmoothminScale.value);\n            let debugMode = parseFloat(debugSelection.value);\n            if (dataSelection.value == \"1cqw\") {\n                rayMarchQuadOct1cqw.debugMode = debugMode;\n                rayMarchQuadOct1cqw.allowResetRaymarch = allowResetRaymarchCheckbox.checked ? 1 : 0;\n                rayMarchQuadOct1cqw.getRaymarchCellNeighbors = getRaymarchCellNeighborsCheckbox.checked ? 1 : 0;\n                rayMarchQuadOct1cqw.kSmoothminScale = kSmoothminScale;\n                rayMarchQuadOct1cqw.DrawRaymarch(device, renderPass, mvpMatrix, inverseVp, cameraPosition, fullRender, drawAmount, drawStart, sizeScale);\n                //rayMarchQuadOct1cqw.DrawGrid(device, renderPass, mvpMatrix);\n            } else if (dataSelection.value == \"1aon\") {\n                rayMarchQuadOct1aon.debugMode = debugMode;\n                rayMarchQuadOct1aon.allowResetRaymarch = allowResetRaymarchCheckbox.checked ? 1 : 0;\n                rayMarchQuadOct1aon.getRaymarchCellNeighbors = getRaymarchCellNeighborsCheckbox.checked ? 1 : 0;\n                rayMarchQuadOct1aon.kSmoothminScale = kSmoothminScale;\n                rayMarchQuadOct1aon.DrawRaymarch(device, renderPass, mvpMatrix, inverseVp, cameraPosition, fullRender, drawAmount, drawStart, sizeScale);\n                //rayMarchQuadOct1aon.DrawGrid(device, renderPass, mvpMatrix);\n            } else if (structureLoaded != undefined && dataSelection.value == \"dataFile\") {\n                rayMarchQuadOctLoaded.debugMode = debugMode;\n                rayMarchQuadOctLoaded.allowResetRaymarch = allowResetRaymarchCheckbox.checked ? 1 : 0;\n                rayMarchQuadOctLoaded.getRaymarchCellNeighbors = getRaymarchCellNeighborsCheckbox.checked ? 1 : 0;\n                rayMarchQuadOctLoaded.kSmoothminScale = kSmoothminScale;\n                rayMarchQuadOctLoaded.DrawRaymarch(device, renderPass, mvpMatrix, inverseVp, cameraPosition, fullRender, drawAmount, drawStart, sizeScale);\n                //rayMarchQuadOctLoaded.DrawGrid(device, renderPass, mvpMatrix);\n            }\n            axisMesh.DrawStructure(renderPass, mvpMatrix);\n        }\n        renderPass.end();\n        //todo:\n        /*const depthRenderPass = commandEncoder.beginRenderPass(textureQuadPassDescriptor as GPURenderPassDescriptor);\n        {\n            textureVisualizeQuad.Draw(depthRenderPass);\n        }\n        depthRenderPass.end();*/\n\n        if (gpu.timestampsEnabled) {\n            commandEncoder.writeTimestamp(timestampBuffers.querySet, 1);\n            commandEncoder.resolveQuerySet(timestampBuffers.querySet, 0, 2, timestampBuffers.queryBuffer, 0);\n        }\n        \n        device.queue.submit([commandEncoder.finish()]);\n        \n        //read query buffer with timestamps\n        if (gpu.timestampsEnabled) {\n            const size = timestampBuffers.queryBuffer.size;\n            const gpuReadBuffer = device.createBuffer({size, usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ});  const copyEncoder = device.createCommandEncoder();\n            copyEncoder.copyBufferToBuffer(timestampBuffers.queryBuffer, 0, gpuReadBuffer, 0, size);  const copyCommands = copyEncoder.finish();\n            device.queue.submit([copyCommands]);\n            const currFrame = frameId;\n            gpuReadBuffer.mapAsync(GPUMapMode.READ).finally(() => {\n                let arrayBuffer = gpuReadBuffer.getMappedRange();\n                const timingsNanoseconds = new BigInt64Array(arrayBuffer);\n                const frameTimeMs = Number((timingsNanoseconds[1]-timingsNanoseconds[0])/BigInt(1000))/1000;\n                previousFrameDeltaTimesMs[currFrame%previousFrameDeltaTimesMs.length] = frameTimeMs;\n                fpsCounterElement.innerText = (previousFrameDeltaTimesMs.reduce((acc, c) => acc+c)/previousFrameDeltaTimesMs.length).toFixed(3) + \"ms\";\n                if (benchmarker.running) {\n                    benchmarker.SubmitFrameTime(frameTimeMs);\n                }\n            });\n        } else {\n            fpsCounterElement.innerText = \"timestamps not enabled :(\";\n        }\n        renderDirty = false;\n        fullRender = false;\n        benchmarker.EndFrame();\n    }\n\n    sliderPercentageShown.oninput = (e) => {\n        percentageShown = parseFloat(sliderPercentageShown.value)/100;\n    };\n    \n    function Reinitialize() {\n        vp = CreateViewProjection(gpu.canvas.width/gpu.canvas.height, cameraPosition);\n        vpMatrix = vp.viewProjectionMatrix;\n        textureView = gpu.context.getCurrentTexture().createView({label: \"MainTextureView\"});\n        depthTexture = device.createTexture({\n            label: \"DepthTexture\",\n            size: [gpu.canvas.width, gpu.canvas.height, 1],\n            format: \"depth32float\",\n            usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING\n        });\n        depthTextureView = depthTexture.createView({label: \"DepthTextureView\"});\n        renderPassDescription = {\n            colorAttachments: [{\n                view: textureView,\n                clearValue: { r: 0.2, g: 0.247, b: 0.314, a: 1.0 }, //background color\n                loadValue: { r: 0.2, g: 0.247, b: 0.314, a: 1.0 }, \n                loadOp: 'clear',\n                storeOp: 'store'\n            }],\n            depthStencilAttachment: {\n                view: depthTextureView,\n                depthClearValue: 1.0,\n                depthLoadOp: 'clear',\n                depthStoreOp: 'store',\n            }\n        };\n        textureQuadPassDescriptor = {\n            colorAttachments: [{\n                view: textureView,\n                clearValue: { r: 0.2, g: 0.247, b: 0.314, a: 1.0 },\n                loadOp: 'clear',\n                storeOp: 'store'\n            }],\n        };\n        //textureVisualizeQuad = new TextureVisualizeQuad(device, gpu.format, depthTextureView);\n    }\n\n    window.addEventListener('resize', function(){\n        Reinitialize();\n    });\n\n    canvasSizeCheckbox.addEventListener('change', function(){\n        //todo\n        Reinitialize();\n    });\n\n    dataSelection.oninput = (e) => {\n        console.log(dataSelection.value);\n        cameraPosition = vec3.fromValues(0, 5, 45);\n        if (dataSelection.value != \"1cqw\") {\n            cameraPosition = vec3.fromValues(125, 31.5, 10.5);\n        }\n        if (dataSelection.value == \"1aon\" && structure1aon == undefined) {\n            let t0 = performance.now();\n            structure1aon = new Structure(require('./data/1aon.pdb'));\n            structure1aon.InitializeBuffers(device);\n            impostorRenderer1aon = new ImpostorRenderer(device, gpu.format);\n            impostorRenderer1aon.LoadAtoms(device, structure1aon);\n            \n            rayMarchQuadOct1aon = new RayMarchOctreeQuad(device, gpu.format);\n            rayMarchQuadOct1aon.makeIrregularOctree = makeIrregularOctreeCheckbox.checked;\n            regenerateOctree();\n            let t1 = performance.now();\n            console.log(\"Loading data for raymarch+creating octree: \" + (t1-t0) + \"ms\");\n        }\n        if (dataSelection.value == \"Loaded\" && structureLoaded != undefined) {\n            let t0 = performance.now();\n            impostorRenderer1aon = new ImpostorRenderer(device, gpu.format);\n            impostorRenderer1aon.LoadAtoms(device, structure1aon);\n            \n            rayMarchQuadOctLoaded = new RayMarchOctreeQuad(device, gpu.format);\n            rayMarchQuadOctLoaded.makeIrregularOctree = makeIrregularOctreeCheckbox.checked;\n            rayMarchQuadOctLoaded.LoadAtoms(device, structureLoaded);\n            let t1 = performance.now();\n            console.log(\"Loading data for raymarch+creating octree: \" + (t1-t0) + \"ms\");\n        }\n    };\n\n    dataLoadButton.onclick = (e) => {\n        if (dataFileInput.files == null || dataFileInput.files?.length == 0) {\n            console.log(\"No file selected!\");\n            return;\n        }\n        \n        let t0 = performance.now();\n        LoadData(dataFileInput.files[0], (text: string) => {\n            structureLoaded = new Structure(text);\n            structureLoaded.InitializeBuffers(device);\n            let sizeScale = parseFloat(sliderImpostorSizeScale.value);\n            let kSmoothminScale = parseFloat(sliderKSmoothminScale.value);\n            impostorRendererLoaded = new ImpostorRenderer(device, gpu.format);\n            impostorRendererLoaded.LoadAtoms(device, structureLoaded);\n            rayMarchQuadOctLoaded = new RayMarchOctreeQuad(device, gpu.format, currShaderCode);\n            rayMarchQuadOctLoaded.octreeLayers = parseInt(octreeLayersSlider.value);\n            rayMarchQuadOctLoaded.makeIrregularOctree = makeIrregularOctreeCheckbox.checked;\n            rayMarchQuadOctLoaded.automaticOctreeSize = automaticOctreeSizeCheckbox.checked;\n            rayMarchQuadOctLoaded.octreeMargins = 0.2+sizeScale+kSmoothminScale*1.005;\n            rayMarchQuadOctLoaded.LoadAtoms(device, structureLoaded);\n            let t1 = performance.now();\n            console.log(\"Loading data from file (\" + dataFileInput.files![0].name + \"): \" + (t1-t0) + \"ms\");\n            dataSelection.value = \"dataFile\";\n            queueFullRender();\n        });\n    };\n\n    let benchmarker = new Benchmarker();\n    benchmarkButton.onclick = (e) => {\n        if (!gpu.timestampsEnabled) {\n            console.log(\"Can't benchmark without timestamps :(\");\n            return;\n        }\n        benchmarker.Start();\n    }\n\n    let currShaderCode = \"\";\n    shaderLoadButton.onclick = (e) => {\n        if (shaderFileInput.files == null || shaderFileInput.files?.length == 0) {\n            console.log(\"No file selected!\");\n            return;\n        }\n        \n        let t0 = performance.now();\n        LoadData(shaderFileInput.files[0], (text: string) => {\n            currShaderCode = text;\n            if (rayMarchQuadOctLoaded != undefined) {\n                rayMarchQuadOctLoaded.ReloadShader(device, text);\n            }\n            if (rayMarchQuadOct1aon != undefined) {\n                rayMarchQuadOct1aon.ReloadShader(device, text);\n            }\n            if (rayMarchQuadOct1cqw != undefined) {\n                rayMarchQuadOct1cqw.ReloadShader(device, text);\n            }\n            //regenerateOctree();\n            queueFullRender();\n            let t1 = performance.now();\n            console.log(\"Loading shader from file (\" + shaderFileInput.files![0].name + \"): \" + (t1-t0) + \"ms\");\n        });\n    };\n\n    CreateAnimation(draw);\n}\n\nInitialize();\n\naddCloseNeighborsToCellsCheckbox.addEventListener('change', function(){\n    if (addCloseNeighborsToCellsCheckbox.checked) {\n        let sizeScale = parseFloat(sliderImpostorSizeScale.value);\n        let kSmoothminScale = parseFloat(sliderKSmoothminScale.value);\n        rayMarchQuadOct1cqw.octreeMargins = 0.0+sizeScale+kSmoothminScale*1.0;\n        rayMarchQuadOct1cqw.LoadAtoms(device, structure1cqw);\n    } else {\n        rayMarchQuadOct1cqw.octreeMargins = 0.0;\n        rayMarchQuadOct1cqw.LoadAtoms(device, structure1cqw);\n    }\n});\n\nfunction queueFullRender() {\n    renderDirty = true;\n    nextFullRenderTime = performance.now()+0.25;\n}\n\nfunction regenerateOctree() {\n    let sizeScale = parseFloat(sliderImpostorSizeScale.value);\n    let kSmoothminScale = parseFloat(sliderKSmoothminScale.value);\n    rayMarchQuadOct1cqw.octreeLayers = parseInt(octreeLayersSlider.value);\n    rayMarchQuadOct1cqw.automaticOctreeSize = automaticOctreeSizeCheckbox.checked;\n    rayMarchQuadOct1cqw.makeIrregularOctree = makeIrregularOctreeCheckbox.checked;\n    rayMarchQuadOct1cqw.octreeMargins = 0.2+sizeScale+kSmoothminScale*1.005;\n    rayMarchQuadOct1cqw.LoadAtoms(device, structure1cqw);\n    if (dataSelection.value == \"1aon\") {\n        rayMarchQuadOct1aon.octreeLayers = parseInt(octreeLayersSlider.value);\n        rayMarchQuadOct1aon.makeIrregularOctree = makeIrregularOctreeCheckbox.checked;\n        rayMarchQuadOct1aon.automaticOctreeSize = automaticOctreeSizeCheckbox.checked;\n        rayMarchQuadOct1aon.octreeMargins = 0.2+sizeScale+kSmoothminScale*1.005;\n        rayMarchQuadOct1aon.LoadAtoms(device, structure1aon);\n    } else if (structureLoaded != undefined && dataSelection.value == \"dataFile\") {\n        rayMarchQuadOctLoaded.octreeLayers = parseInt(octreeLayersSlider.value);\n        rayMarchQuadOctLoaded.makeIrregularOctree = makeIrregularOctreeCheckbox.checked;\n        rayMarchQuadOctLoaded.automaticOctreeSize = automaticOctreeSizeCheckbox.checked;\n        rayMarchQuadOctLoaded.octreeMargins = 0.2+sizeScale+kSmoothminScale*1.005;\n        rayMarchQuadOctLoaded.LoadAtoms(device, structureLoaded);\n    }\n    queueFullRender();\n}\n\nmakeIrregularOctreeCheckbox.addEventListener('change', function(){\n    regenerateOctree();\n});\n\nregenerateOctreeButton.onclick = (e) => {\n    regenerateOctree();\n}\n\nsliderDebugA.onchange = (e) => {\n    queueFullRender();\n}\nsliderDebugB.onchange = (e) => {\n    queueFullRender();\n}\ndebugSelection.onchange = (e) => {\n    queueFullRender();\n}\nsliderImpostorSizeScale.onchange = (e) => {\n    queueFullRender();\n}\nsliderKSmoothminScale.onchange = (e) => {\n    queueFullRender();\n}\n\nif (document != null) {\n    document.addEventListener('keypress', function(keyEvent: KeyboardEvent){\n        if (keyEvent.code == \"Digit1\") {\n            debugSelection.value = \"0\";\n        } else if (keyEvent.code == \"Digit2\") {\n            debugSelection.value = \"1\";\n        } else if (keyEvent.code == \"Digit3\") {\n            debugSelection.value = \"2\";\n        } else if (keyEvent.code == \"Digit4\") {\n            debugSelection.value = \"3\";\n        } else if (keyEvent.code == \"Digit5\") {\n            debugSelection.value = \"101\";\n        } else if (keyEvent.code == \"Digit6\") {\n            debugSelection.value = \"103\";\n        } else if (keyEvent.code == \"Digit7\") {\n            debugSelection.value = \"104\";\n        } else if (keyEvent.code == \"Digit8\") {\n            debugSelection.value = \"113\";\n        } else if (keyEvent.code == \"Digit9\") {\n            debugSelection.value = \"105\";\n        } else if (keyEvent.code == \"Digit0\") {\n            debugSelection.value = \"107\";\n        } else if (keyEvent.code == \"Minus\") {\n            debugSelection.value = \"130\";\n        } else if (keyEvent.code == \"Equal\") {\n            debugSelection.value = \"131\";\n        }\n        queueFullRender();\n    });\n}\n","import { vec2, vec3, vec4 } from \"gl-matrix\";\nimport { Atom } from \"./atom\";\nimport { GetAtomType } from \"./atomDatabase\";\n\nexport function CubeData() {\n    const positions = new Float32Array([\n        // front\n        -1, -1,  1,  \n         1, -1,  1,  \n         1,  1,  1,\n         1,  1,  1,\n        -1,  1,  1,\n        -1, -1,  1,\n\n        // right\n         1, -1,  1,\n         1, -1, -1,\n         1,  1, -1,\n         1,  1, -1,\n         1,  1,  1,\n         1, -1,  1,\n\n        // back\n        -1, -1, -1,\n        -1,  1, -1,\n         1,  1, -1,\n         1,  1, -1,\n         1, -1, -1,\n        -1, -1, -1,\n\n        // left\n        -1, -1,  1,\n        -1,  1,  1,\n        -1,  1, -1,\n        -1,  1, -1,\n        -1, -1, -1,\n        -1, -1,  1,\n\n        // top\n        -1,  1,  1,\n         1,  1,  1,\n         1,  1, -1,\n         1,  1, -1,\n        -1,  1, -1,\n        -1,  1,  1,\n\n        // bottom\n        -1, -1,  1,\n        -1, -1, -1,\n         1, -1, -1,\n         1, -1, -1,\n         1, -1,  1,\n        -1, -1,  1\n    ]);\n\n    const colors = new Float32Array([\n        // front - blue\n        0, 0, 1,\n        0, 0, 1,\n        0, 0, 1,\n        0, 0, 1,\n        0, 0, 1,\n        0, 0, 1,\n\n        // right - red\n        1, 0, 0,\n        1, 0, 0,\n        1, 0, 0,\n        1, 0, 0,\n        1, 0, 0,\n        1, 0, 0,\n\n        //back - yellow\n        1, 1, 0,\n        1, 1, 0,\n        1, 1, 0,\n        1, 1, 0,\n        1, 1, 0,\n        1, 1, 0,\n\n        //left - aqua\n        0, 1, 1,\n        0, 1, 1,\n        0, 1, 1,\n        0, 1, 1,\n        0, 1, 1,\n        0, 1, 1,\n\n        // top - green\n        0, 1, 0,\n        0, 1, 0,\n        0, 1, 0,\n        0, 1, 0,\n        0, 1, 0,\n        0, 1, 0,\n\n        // bottom - fuchsia\n        1, 0, 1,\n        1, 0, 1,\n        1, 0, 1,\n        1, 0, 1,\n        1, 0, 1,\n        1, 0, 1\n    ]);\n\n    return {\n        positions,\n        colors\n    };\n}\n\nexport function CreateBondGeometry(a: Atom, b: Atom, radius: number, arity: number) {\n    return CreateLineGeometry(a.GetPosition(), b.GetPosition(), radius, arity)\n}\n\nexport function CreateLineGeometry(a: vec3, b: vec3, radius: number, arity: number = 1) {\n    const dir = vec3.subtract(vec3.create(), a, b);\n    const ortho1 = ArbitraryOrthogonalVector(dir);\n    const ortho2 = vec3.normalize(vec3.create(), vec3.cross(vec3.create(), dir, ortho1));\n    let resultPositions;\n    if (arity == 2) {\n        const p1 = vec3.fromValues(\n            a[0]+ortho1[0]*radius+ortho2[0]*radius+ortho1[0]*radius*2.1, \n            a[1]+ortho1[1]*radius+ortho2[1]*radius+ortho1[1]*radius*2.1, \n            a[2]+ortho1[2]*radius+ortho2[2]*radius+ortho1[2]*radius*2.1);\n        const p2 = vec3.fromValues(\n            a[0]+ortho1[0]*radius-ortho2[0]*radius+ortho1[0]*radius*2.1, \n            a[1]+ortho1[1]*radius-ortho2[1]*radius+ortho1[1]*radius*2.1, \n            a[2]+ortho1[2]*radius-ortho2[2]*radius+ortho1[2]*radius*2.1);\n        const p3 = vec3.fromValues(\n            a[0]-ortho1[0]*radius+ortho1[0]*radius*2.1, \n            a[1]-ortho1[1]*radius+ortho1[1]*radius*2.1, \n            a[2]-ortho1[2]*radius+ortho1[2]*radius*2.1);\n        const p4 = vec3.fromValues(\n            b[0]+ortho1[0]*radius+ortho2[0]*radius+ortho1[0]*radius*2.1, \n            b[1]+ortho1[1]*radius+ortho2[1]*radius+ortho1[1]*radius*2.1, \n            b[2]+ortho1[2]*radius+ortho2[2]*radius+ortho1[2]*radius*2.1);\n        const p5 = vec3.fromValues(\n            b[0]+ortho1[0]*radius-ortho2[0]*radius+ortho1[0]*radius*2.1, \n            b[1]+ortho1[1]*radius-ortho2[1]*radius+ortho1[1]*radius*2.1, \n            b[2]+ortho1[2]*radius-ortho2[2]*radius+ortho1[2]*radius*2.1);\n        const p6 = vec3.fromValues(\n            b[0]-ortho1[0]*radius+ortho1[0]*radius*2.1, \n            b[1]-ortho1[1]*radius+ortho1[1]*radius*2.1, \n            b[2]-ortho1[2]*radius+ortho1[2]*radius*2.1);\n        const p7 = vec3.fromValues(\n            a[0]+ortho1[0]*radius+ortho2[0]*radius-ortho1[0]*radius*2.1, \n            a[1]+ortho1[1]*radius+ortho2[1]*radius-ortho1[1]*radius*2.1, \n            a[2]+ortho1[2]*radius+ortho2[2]*radius-ortho1[2]*radius*2.1);\n        const p8 = vec3.fromValues(\n            a[0]+ortho1[0]*radius-ortho2[0]*radius-ortho1[0]*radius*2.1, \n            a[1]+ortho1[1]*radius-ortho2[1]*radius-ortho1[1]*radius*2.1, \n            a[2]+ortho1[2]*radius-ortho2[2]*radius-ortho1[2]*radius*2.1);\n        const p9 = vec3.fromValues(\n            a[0]-ortho1[0]*radius-ortho1[0]*radius*2.1, \n            a[1]-ortho1[1]*radius-ortho1[1]*radius*2.1, \n            a[2]-ortho1[2]*radius-ortho1[2]*radius*2.1);\n        const p10 = vec3.fromValues(\n            b[0]+ortho1[0]*radius+ortho2[0]*radius-ortho1[0]*radius*2.1, \n            b[1]+ortho1[1]*radius+ortho2[1]*radius-ortho1[1]*radius*2.1, \n            b[2]+ortho1[2]*radius+ortho2[2]*radius-ortho1[2]*radius*2.1);\n        const p11 = vec3.fromValues(\n            b[0]+ortho1[0]*radius-ortho2[0]*radius-ortho1[0]*radius*2.1, \n            b[1]+ortho1[1]*radius-ortho2[1]*radius-ortho1[1]*radius*2.1, \n            b[2]+ortho1[2]*radius-ortho2[2]*radius-ortho1[2]*radius*2.1);\n        const p12 = vec3.fromValues(\n            b[0]-ortho1[0]*radius-ortho1[0]*radius*2.1, \n            b[1]-ortho1[1]*radius-ortho1[1]*radius*2.1, \n            b[2]-ortho1[2]*radius-ortho1[2]*radius*2.1);\n        resultPositions = new Float32Array([\n            ...p1, ...p4, ...p6,\n            ...p1, ...p6, ...p4,\n            ...p1, ...p6, ...p3,\n            ...p1, ...p3, ...p6,\n            \n            ...p1, ...p4, ...p5,\n            ...p1, ...p5, ...p4,\n            ...p1, ...p2, ...p5,\n            ...p1, ...p5, ...p2,\n            \n            ...p2, ...p5, ...p6,\n            ...p2, ...p6, ...p5,\n            ...p2, ...p3, ...p6,\n            ...p2, ...p6, ...p3,\n            \n            ...p7, ...p10, ...p12,\n            ...p7, ...p12, ...p10,\n            ...p7, ...p12, ...p9,\n            ...p7, ...p9, ...p12,\n            \n            ...p7, ...p10, ...p11,\n            ...p7, ...p11, ...p10,\n            ...p7, ...p8, ...p11,\n            ...p7, ...p11, ...p8,\n            \n            ...p8, ...p11, ...p12,\n            ...p8, ...p12, ...p11,\n            ...p8, ...p9, ...p12,\n            ...p8, ...p12, ...p9,\n        ]);\n    } else {\n        const p1 = vec3.fromValues(\n            a[0]+ortho1[0]*radius+ortho2[0]*radius, \n            a[1]+ortho1[1]*radius+ortho2[1]*radius, \n            a[2]+ortho1[2]*radius+ortho2[2]*radius);\n        const p2 = vec3.fromValues(\n            a[0]+ortho1[0]*radius-ortho2[0]*radius, \n            a[1]+ortho1[1]*radius-ortho2[1]*radius, \n            a[2]+ortho1[2]*radius-ortho2[2]*radius);\n        const p3 = vec3.fromValues(\n            a[0]-ortho1[0]*radius, \n            a[1]-ortho1[1]*radius, \n            a[2]-ortho1[2]*radius);\n        const p4 = vec3.fromValues(\n            b[0]+ortho1[0]*radius+ortho2[0]*radius, \n            b[1]+ortho1[1]*radius+ortho2[1]*radius, \n            b[2]+ortho1[2]*radius+ortho2[2]*radius);\n        const p5 = vec3.fromValues(\n            b[0]+ortho1[0]*radius-ortho2[0]*radius, \n            b[1]+ortho1[1]*radius-ortho2[1]*radius, \n            b[2]+ortho1[2]*radius-ortho2[2]*radius);\n        const p6 = vec3.fromValues(\n            b[0]-ortho1[0]*radius, \n            b[1]-ortho1[1]*radius, \n            b[2]-ortho1[2]*radius);\n        resultPositions = new Float32Array([\n            ...p1, ...p4, ...p6,\n            ...p1, ...p6, ...p4,\n            ...p1, ...p6, ...p3,\n            ...p1, ...p3, ...p6,\n            \n            ...p1, ...p4, ...p5,\n            ...p1, ...p5, ...p4,\n            ...p1, ...p2, ...p5,\n            ...p1, ...p5, ...p2,\n            \n            ...p2, ...p5, ...p6,\n            ...p2, ...p6, ...p5,\n            ...p2, ...p3, ...p6,\n            ...p2, ...p6, ...p3,\n        ]);\n    }\n    return {positions: resultPositions, colors: new Float32Array(resultPositions.length).map((v) => 1)};\n}\n\nexport function ArbitraryOrthogonalVector(v: vec3) {\n    let arbitraryNonParallelVec = Math.abs(Math.abs(vec3.normalize(vec3.create(), v)[0])-1.0) > 0.001 ? vec3.fromValues(1.0, 0.0, 0.0) : vec3.fromValues(0.0, 1.0, 0.0);\n    let orthogonal = vec3.cross(vec3.create(), v, arbitraryNonParallelVec);\n    return vec3.normalize(orthogonal, orthogonal);\n}\n\n//todo: change to take in atom?\nexport function CreateQuadGeometry(atom: Atom) {\n    let v = vec3.fromValues(atom.x, atom.y, atom.z);\n    let resultPositions = new Float32Array([\n        ...v, \n        ...v,\n        ...v,\n\n        ...v,\n        ...v,\n        ...v,\n    ]);\n    let color = atom.GetColor();\n    let resultColors = new Float32Array([\n        ...color, \n        ...color,\n        ...color,\n\n        ...color,\n        ...color,\n        ...color,\n    ]);\n    let type = GetAtomType(atom);\n    let i = vec3.fromValues(type.number, type.covalentRadius, 0.0);\n    let atomInfo = new Float32Array([\n        ...i, \n        ...i,\n        ...i,\n\n        ...i,\n        ...i,\n        ...i,\n    ]);\n    return {positions: resultPositions, color: resultColors, info: atomInfo};\n}\n\n// https://www.songho.ca/opengl/gl_sphere.html\nexport function CreateSphereGeometry(radius: number, sectorCount: number, stackCount: number) {\n    let x, y, z, xy;                              // vertex position\n    let nx, ny, nz, lengthInv = 1.0 / radius;     // vertex normal\n    let s, t;                                     // vertex texCoord\n\n    let sectorStep = 2 * Math.PI / sectorCount;\n    let stackStep = Math.PI / stackCount;\n    let sectorAngle, stackAngle;\n    \n    let vertices = [];\n\n    for(let i = 0; i <= stackCount; i++)  {\n        stackAngle = Math.PI / 2 - i * stackStep;        // starting from pi/2 to -pi/2\n        xy = radius * Math.cos(stackAngle);             // r * cos(u)\n        z = radius * Math.sin(stackAngle);              // r * sin(u)\n\n        // add (sectorCount+1) vertices per stack\n        // the first and last vertices have same position and normal, but different tex coords\n        for(let j = 0; j <= sectorCount; ++j) {\n            sectorAngle = j * sectorStep;           // starting from 0 to 2pi\n            // vertex position (x, y, z)\n            x = xy * Math.cos(sectorAngle);             // r * cos(u) * cos(v)\n            y = xy * Math.sin(sectorAngle);             // r * cos(u) * sin(v)\n            vertices.push(x);\n            vertices.push(y);\n            vertices.push(z);\n            /*// normalized vertex normal (nx, ny, nz)\n            nx = x * lengthInv;\n            ny = y * lengthInv;\n            nz = z * lengthInv;\n            normals.push_back(nx);\n            normals.push_back(ny);\n            normals.push_back(nz);\n\n            // vertex tex coord (s, t) range between [0, 1]\n            s = (float)j / sectorCount;\n            t = (float)i / stackCount;\n            texCoords.push_back(s);\n            texCoords.push_back(t);*/\n        }\n    }\n    let indices = [];\n    let k1, k2;\n    for(let i = 0; i < stackCount; ++i) {\n        k1 = i * (sectorCount + 1);     // beginning of current stack\n        k2 = k1 + sectorCount + 1;      // beginning of next stack\n\n        for(let j = 0; j < sectorCount; ++j, ++k1, ++k2)  {\n            // 2 triangles per sector excluding first and last stacks\n            // k1 => k2 => k1+1\n            if(i != 0) {\n                indices.push(k1);\n                indices.push(k2);\n                indices.push(k1 + 1);\n            }\n\n            // k1+1 => k2 => k2+1\n            if(i != (stackCount-1)) {\n                indices.push(k1 + 1);\n                indices.push(k2);\n                indices.push(k2 + 1);\n            }\n        }\n    }\n    let resultPositions = new Float32Array(indices.length*3);\n    for (let i = 0; i < indices.length; i++) {\n        const index = indices[i];\n        resultPositions[i*3] = vertices[index*3];\n        resultPositions[i*3+1] = vertices[index*3+1];\n        resultPositions[i*3+2] = vertices[index*3+2];\n    }\n    return {positions: resultPositions, colors: new Float32Array(resultPositions.length).map((v) => 1)};\n}","import { vec3, vec4 } from \"gl-matrix\";\r\nimport { Atom } from \"./atom\";\r\nimport { GetAtomType } from \"./atomDatabase\";\r\n\r\nexport class OctreeBin {\r\n    min: vec3;\r\n    max: vec3;\r\n    start: number = -1;\r\n    end: number = -1;\r\n    children: number = 0;\r\n    atomsInChildNodes: number = 0;\r\n    layer: number = 0;\r\n    isLeaf: boolean = false;\r\n\r\n    constructor(minX: number, minY: number, minZ: number, maxX: number, maxY: number, maxZ: number) {\r\n        this.min = vec3.fromValues(minX, minY, minZ);\r\n        this.max = vec3.fromValues(maxX, maxY, maxZ);\r\n    }\r\n\r\n    public Center() {\r\n        return vec3.fromValues((this.min[0]+this.max[0])/2, (this.min[1]+this.max[1])/2, (this.min[2]+this.max[2])/2);\r\n    }\r\n\r\n    public Size() {\r\n        return vec3.fromValues(this.max[0]-this.min[0], this.max[1]-this.min[1], this.max[2]-this.min[2]);\r\n    }\r\n\r\n    public IsVec3Inside(a: vec3) {\r\n        return a[0] >= this.min[0] && a[1] >= this.min[1] && a[2] >= this.min[2] \r\n            && a[0] <= this.max[0] && a[1] <= this.max[1] && a[2] <= this.max[2];\r\n    }\r\n\r\n    public IsAtomInside(a: Atom) {\r\n        return this.IsVec3Inside(a.GetPosition());\r\n    }\r\n\r\n    public IsAtomInsideWithMargins(a: Atom, margin: number) {\r\n        return a.x >= this.min[0]-margin && a.y >= this.min[1]-margin && a.z >= this.min[2]-margin \r\n            && a.x <= this.max[0]+margin && a.y <= this.max[1]+margin && a.z <= this.max[2]+margin;\r\n    }\r\n\r\n    public AsArray() {\r\n        let buffer = new Float32Array(8);\r\n        buffer[0] = this.min[0];\r\n        buffer[1] = this.min[1];\r\n        buffer[2] = this.min[2];\r\n        buffer[3] = this.start;\r\n        buffer[4] = this.max[0];\r\n        buffer[5] = this.max[1];\r\n        buffer[6] = this.max[2];\r\n        buffer[7] = this.end;\r\n        return buffer;\r\n    }\r\n}\r\n\r\nexport class Octree {\r\n    limits: {minLimits: vec3, maxLimits: vec3, center: vec3, size: vec3};\r\n    tree: vec4[];\r\n    bins: OctreeBin[];\r\n    layers: number;\r\n    irregular: boolean;\r\n\r\n    constructor(atoms: Atom[], layers: number, margin: number = 1.5, makeIrregular = false, automaticOctreeSize = false) {\r\n        this.limits = this.CalculateLimitsForAtoms(atoms, margin);\r\n        if (automaticOctreeSize) {\r\n            layers = 2;\r\n            let smallestSize = Math.min(this.limits.size[0], Math.min(this.limits.size[1], this.limits.size[2]));\r\n            console.log((smallestSize/(2**layers))-(margin*0.4*(2**layers))+margin);\r\n            while ((smallestSize/(2**layers))-(margin*0.4*(2**layers))+margin > 1.0) {\r\n                layers++;\r\n                console.log((smallestSize/(2**layers))-(margin*0.4*(2**layers))+margin);\r\n            }\r\n        }\r\n        this.layers = layers;\r\n        this.irregular = makeIrregular;\r\n        let binsSize = 0;\r\n        for (let layer = 1; layer <= layers; layer++) {\r\n            binsSize += Math.pow(8, layer);\r\n        }\r\n        let atomsCopy = Object.assign([], atoms);\r\n        this.tree = new Array<vec4>();\r\n        this.bins = new Array<OctreeBin>();\r\n        this.BuildTree(atomsCopy, margin);\r\n    }\r\n\r\n    private BuildTree(atoms: Atom[], margin: number) {\r\n        let limits = this.limits;\r\n        if (this.irregular) {\r\n            this.bins.push(...this.FindOptimalBinsFromLimits(limits.minLimits, limits.maxLimits, limits.center, margin, atoms, 0, false));\r\n        } else {\r\n            this.bins.push(...this.MakeBinsFromLimitsUsingCenter(limits.minLimits, limits.maxLimits, limits.center, margin, atoms, 0, false));\r\n        }\r\n        for (let layer = 1; layer < this.layers; layer++) {\r\n            let start = this.GetLayerEnd(layer-1);\r\n            let end = this.GetLayerEnd(layer);\r\n            for (let layerBin = start; layerBin < end; layerBin++) {\r\n                const b = this.bins[layerBin];\r\n                if (this.irregular && layer <= 2) {\r\n                    if (layer == this.layers-1) {\r\n                        this.bins.push(...this.FindOptimalBinsFromLimits(b.min, b.max, b.Center(), margin, atoms, layer, true));\r\n                    } else {\r\n                        this.bins.push(...this.FindOptimalBinsFromLimits(b.min, b.max, b.Center(), margin, atoms, layer, false));\r\n                    }\r\n                } else {\r\n                    if (layer == this.layers-1) {\r\n                        this.bins.push(...this.MakeBinsFromLimitsUsingCenter(b.min, b.max, b.Center(), margin, atoms, layer, true));\r\n                    } else {\r\n                        this.bins.push(...this.MakeBinsFromLimitsUsingCenter(b.min, b.max, b.Center(), margin, atoms, layer, false));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.SetStartEndInNonLeafBins();\r\n    }\r\n\r\n    private FindOptimalBinsFromLimits(min: vec3, max: vec3, center: vec3, margin: number, atoms: Atom[], layer: number, insert: boolean) {\r\n        let currCenter = center;\r\n        let bins = this.MakeBinsFromLimitsUsingCenter(min, max, currCenter, margin, atoms, layer, false);\r\n        let total = bins.reduce((sum, current) => sum+current.atomsInChildNodes, 0);\r\n        for (let i = 0; i < 15; i++) {\r\n            let highestIndex = 0;\r\n            let highestValue = bins[0].atomsInChildNodes;\r\n            for (let j = 0; j < bins.length; j++) {\r\n                if (bins[j].atomsInChildNodes > highestValue) {\r\n                    highestValue = bins[j].atomsInChildNodes;\r\n                    highestIndex = j;\r\n                }\r\n            }\r\n            if (highestValue < total/9) {\r\n                break;\r\n            }\r\n            const e = 0.15;\r\n            currCenter = vec3.fromValues(currCenter[0]*(1-e)+bins[highestIndex].Center()[0]*e, currCenter[1]*(1-e)+bins[highestIndex].Center()[1]*e, currCenter[2]*(1-e)+bins[highestIndex].Center()[2]*e);\r\n            let prevBins = bins;\r\n            bins = this.MakeBinsFromLimitsUsingCenter(min, max, currCenter, margin, atoms, layer, false);\r\n            let stopMargin = margin*2*(5-layer)+0.25;\r\n            if (bins.findIndex((b) => b.Size()[0] < stopMargin || b.Size()[1] < stopMargin || b.Size()[2] < stopMargin) != -1) {\r\n                bins = prevBins;\r\n                break;\r\n            }\r\n        }\r\n        bins = this.MakeBinsFromLimitsUsingCenter(min, max, currCenter, margin, atoms, layer, insert);\r\n        return bins;\r\n    }\r\n\r\n    private MakeBinsFromLimitsUsingCenter(min: vec3, max: vec3, center: vec3, margin: number, atoms: Atom[], layer: number, insert: boolean) {\r\n        let resultBins: OctreeBin[] = [];\r\n        for (let z = 0; z < 2; z++) {\r\n            for (let y = 0; y < 2; y++) {\r\n                for (let x = 0; x < 2; x++) {\r\n                    let minX = x == 0 ? min[0] : center[0];\r\n                    let minY = y == 0 ? min[1] : center[1];\r\n                    let minZ = z == 0 ? min[2] : center[2];\r\n                    let maxX = x == 0 ? center[0] : max[0];\r\n                    let maxY = y == 0 ? center[1] : max[1];\r\n                    let maxZ = z == 0 ? center[2] : max[2];\r\n                    let b: OctreeBin = new OctreeBin(minX, minY, minZ, maxX, maxY, maxZ);\r\n                    b.layer = layer;\r\n\r\n                    if (this.irregular && layer <= 2) {\r\n                        let resultMin = vec3.fromValues(maxX, maxY, maxZ);\r\n                        let resultMax = vec3.fromValues(minX, minY, minZ);\r\n                        for (let i = atoms.length-1; i >= 0; i--) {\r\n                            if (b.IsAtomInsideWithMargins(atoms[i], margin)) {\r\n                                for (let dim = 0; dim < 3; dim++) {\r\n                                    resultMin[dim] = Math.min(atoms[i].GetPosition()[dim], resultMin[dim]);\r\n                                    resultMax[dim] = Math.max(atoms[i].GetPosition()[dim], resultMax[dim]);\r\n                                }\r\n                            }\r\n                        }\r\n                        for (let dim = 0; dim < 3; dim++) {\r\n                            resultMin[dim] = Math.max(b.min[dim], resultMin[dim]-margin);\r\n                            resultMax[dim] = Math.min(b.max[dim], resultMax[dim]+margin);\r\n                        }\r\n                        b.min = resultMin;\r\n                        b.max = resultMax;\r\n                        if (resultMax == vec3.fromValues(minX, minY, minZ)) {\r\n                            resultMax = resultMin;\r\n                        }\r\n                    }\r\n                    \r\n                    if (insert) {\r\n                        b.start = this.tree.length;\r\n                    }\r\n                    for (let i = atoms.length-1; i >= 0; i--) {\r\n                        if (b.IsAtomInsideWithMargins(atoms[i], margin)) {\r\n                            b.atomsInChildNodes++;\r\n                            if (insert) {\r\n                                let v = atoms[i].GetVec4Representation();\r\n                                this.tree.push(v);\r\n                            }\r\n                        }\r\n                    }\r\n                    if (insert) {\r\n                        b.end = this.tree.length;\r\n                        b.isLeaf = true;\r\n                    }\r\n                    resultBins.push(b);\r\n                }\r\n            }\r\n        }\r\n        return resultBins;\r\n    }\r\n\r\n    private CalculateLimitsForAtoms(atoms: Atom[], margin: number) {\r\n        let minLimits = vec3.fromValues(1000000, 1000000, 1000000);\r\n        let maxLimits = vec3.fromValues(-1000000, -1000000, -1000000);\r\n        for (let atomId = 0; atomId < atoms.length; atomId++) {\r\n            const atom = atoms[atomId];\r\n            if (atom.x < minLimits[0]) {\r\n                minLimits[0] = atom.x;\r\n            }\r\n            if (atom.y < minLimits[1]) {\r\n                minLimits[1] = atom.y;\r\n            }\r\n            if (atom.z < minLimits[2]) {\r\n                minLimits[2] = atom.z;\r\n            }\r\n            if (atom.x > maxLimits[0]) {\r\n                maxLimits[0] = atom.x;\r\n            }\r\n            if (atom.y > maxLimits[1]) {\r\n                maxLimits[1] = atom.y;\r\n            }\r\n            if (atom.z > maxLimits[2]) {\r\n                maxLimits[2] = atom.z;\r\n            }\r\n        }\r\n        minLimits[0] -= margin; minLimits[1] -= margin; minLimits[2] -= margin;\r\n        maxLimits[0] += margin; maxLimits[1] += margin; maxLimits[2] += margin;\r\n        let center = vec3.fromValues((minLimits[0]+maxLimits[0])/2, (minLimits[0]+maxLimits[0])/2, (minLimits[0]+maxLimits[0])/2);\r\n        let size = vec3.subtract(vec3.fromValues(0, 0, 0), maxLimits, minLimits);\r\n        return {minLimits, maxLimits, center, size};\r\n    }\r\n\r\n    private GetParentBin(bin: OctreeBin) {\r\n        let binPreviousLayerStart = 0;\r\n        for (let layer = 0; layer < bin.layer; layer++) {\r\n            binPreviousLayerStart += layer <= 0 ? 0 : Math.pow(8, layer);\r\n        }\r\n        let parentIndex = this.bins.findIndex((b, index) => index >= binPreviousLayerStart && b.IsVec3Inside(bin.Center()));\r\n        let parent = this.bins[parentIndex];\r\n        return parent;\r\n    }\r\n\r\n    private IncrementChildAtomsCounterInParents(bin: OctreeBin) {\r\n        let current = bin;\r\n        while (current.layer != 0) {\r\n            current = this.GetParentBin(current);\r\n            current.atomsInChildNodes++;\r\n        }\r\n    }\r\n\r\n    private SetStartEndInNonLeafBins() {\r\n        for (let i = 0; i < this.bins.length; i++) {\r\n            const bin = this.bins[i];\r\n            if (!bin.isLeaf) {\r\n                bin.start = -bin.atomsInChildNodes-1;\r\n                bin.end = -bin.atomsInChildNodes-1;\r\n            }\r\n        }\r\n    }\r\n\r\n    private GetLayerEnd(layer: number) {\r\n        let binsSize = 0;\r\n        for (let l = 1; l <= layer; l++) {\r\n            binsSize += Math.pow(8, l);\r\n        }\r\n        return binsSize;\r\n    }\r\n\r\n    public Nearest(atom: Atom) {\r\n        \r\n    }\r\n}\r\n","import { mat4, vec3, vec4 } from \"gl-matrix\";\r\nimport { GetAtomType } from \"./atomDatabase\";\r\nimport { CreateGPUBuffer } from \"./helper\";\r\nimport { Octree } from \"./octree\";\r\nimport { OctreeMesh } from \"./octreeMesh\";\r\nimport shaderRaymarch from './shaders/raymarchOctree.wgsl';\r\nimport shaderUtilities from './shaders/utilities.wgsl';\r\nimport shaderDefinitions from './shaders/drawModeDefinitions.wgsl';\r\nimport { Structure } from \"./structure\";\r\nimport { PreprocessShaderWithFlags } from \"./wgslPreprocessor\";\r\n\r\nconst numberOfVerticesToDraw = 6;\r\n\r\nclass RayPipelineSetup {\r\n    pipeline : GPURenderPipeline;\r\n    format : GPUTextureFormat;\r\n    mvpUniformBuffer : GPUBuffer;\r\n    inverseVpUniformBuffer : GPUBuffer;\r\n    cameraPosBuffer : GPUBuffer;\r\n    uniformBindGroup : GPUBindGroup;\r\n    treeLayers : number = 0;\r\n\r\n    atomsCount : number;\r\n    atomsBuffer : GPUBuffer;\r\n    octreeBuffer : GPUBuffer;\r\n    atomsBindGroup : GPUBindGroup;\r\n\r\n    drawSettingsBuffer : GPUBuffer;\r\n    drawSettingsBindGroup : GPUBindGroup;\r\n\r\n    octreeMesh?: OctreeMesh;\r\n\r\n    minLimits: vec4 = vec4.fromValues(0, 0, 0, 0);\r\n    maxLimits: vec4 = vec4.fromValues(0, 0, 0, 0);\r\n\r\n    constructor (device: GPUDevice, format: GPUTextureFormat, shader: string) {\r\n        this.format = format;\r\n        this.pipeline = this.CreatePipeline(device, shader);\r\n\r\n        this.mvpUniformBuffer = device.createBuffer({\r\n            size: 64,\r\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\r\n        });\r\n        \r\n        this.inverseVpUniformBuffer = device.createBuffer({\r\n            size: 64,\r\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\r\n        });\r\n\r\n        this.cameraPosBuffer = device.createBuffer({\r\n            size: 16,\r\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\r\n        });\r\n\r\n        this.atomsCount = 0;\r\n        this.atomsBuffer = device.createBuffer({\r\n            size: 16,\r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST\r\n        });\r\n        this.octreeBuffer = device.createBuffer({\r\n            size: 48,\r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST\r\n        });\r\n        \r\n        this.drawSettingsBuffer = device.createBuffer({\r\n            size: 80,\r\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\r\n        });\r\n        let bindGroups = this.CreateBindGroups(device);\r\n        this.uniformBindGroup = bindGroups.uniformBindGroup;\r\n        this.atomsBindGroup = bindGroups.atomsBindGroup;\r\n        this.drawSettingsBindGroup = bindGroups.drawSettingsBindGroup;\r\n    }\r\n\r\n    public ReloadShader(device: GPUDevice, shader: string) {\r\n        this.pipeline = this.CreatePipeline(device, shader);\r\n        let bindGroups = this.CreateBindGroups(device);\r\n        this.uniformBindGroup = bindGroups.uniformBindGroup;\r\n        this.atomsBindGroup = bindGroups.atomsBindGroup;\r\n        this.drawSettingsBindGroup = bindGroups.drawSettingsBindGroup;\r\n    }\r\n\r\n    private CreatePipeline(device: GPUDevice, shader: string) {\r\n        return device.createRenderPipeline({\r\n            layout:'auto',\r\n            vertex: {\r\n                module: device.createShaderModule({\r\n                    code: shader\r\n                }),\r\n                entryPoint: \"vs_main\",\r\n                buffers:[\r\n                    {\r\n                        arrayStride: 4*3,\r\n                        attributes: [{\r\n                            shaderLocation: 0,\r\n                            format: \"float32x3\",\r\n                            offset: 0\r\n                        }]\r\n                    },\r\n                    {\r\n                        arrayStride: 4*3,\r\n                        attributes: [{\r\n                            shaderLocation: 1,\r\n                            format: \"float32x3\",\r\n                            offset: 0\r\n                        }]\r\n                    }\r\n                ]\r\n            },\r\n            fragment: {\r\n                module: device.createShaderModule({                    \r\n                    code: shader\r\n                }),\r\n                entryPoint: \"fs_main\",\r\n                targets: [\r\n                    {\r\n                        format: this.format as GPUTextureFormat\r\n                    }\r\n                ]\r\n            },\r\n            primitive:{\r\n                topology: \"triangle-list\",\r\n            },\r\n            depthStencil:{\r\n                format: \"depth32float\",\r\n                depthWriteEnabled: true,\r\n                depthCompare: \"less\"\r\n            }\r\n        });\r\n    }\r\n    \r\n    private CreateBindGroups(device: GPUDevice) {\r\n        let uniformBindGroup = device.createBindGroup({\r\n            layout: this.pipeline.getBindGroupLayout(0),\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: {\r\n                        buffer: this.mvpUniformBuffer,\r\n                    }\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    resource: {\r\n                        buffer: this.inverseVpUniformBuffer,\r\n                    }\r\n                },\r\n                {\r\n                    binding: 2,\r\n                    resource: {\r\n                        buffer: this.cameraPosBuffer,\r\n                    }\r\n                }\r\n            ]\r\n        });\r\n\r\n        let atomsBindGroup = device.createBindGroup({\r\n            layout: this.pipeline.getBindGroupLayout(1),\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: {\r\n                        buffer: this.atomsBuffer,\r\n                    }\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    resource: {\r\n                        buffer: this.octreeBuffer,\r\n                    }\r\n                },\r\n            ]\r\n        });\r\n\r\n        let drawSettingsBindGroup =  device.createBindGroup({\r\n            layout: this.pipeline.getBindGroupLayout(2),\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: {\r\n                        buffer: this.drawSettingsBuffer,\r\n                    }\r\n                },\r\n            ]\r\n        });\r\n        return {uniformBindGroup, atomsBindGroup, drawSettingsBindGroup};\r\n    }\r\n\r\n    public LoadAtoms(device: GPUDevice, structure: Structure, margins: number, makeIrregularOctree: boolean = true, octreeLayers: number = 4, automaticOctreeSize: boolean = true) {\r\n        let tree: Octree = new Octree(structure.atoms, octreeLayers, margins, makeIrregularOctree, automaticOctreeSize);\r\n        console.log(tree);\r\n        this.treeLayers = tree.layers;\r\n        this.atomsCount = tree.tree.length;\r\n        this.atomsBuffer = device.createBuffer({\r\n            size: tree.tree.length*4*4,\r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST\r\n        });\r\n        let atomPositions: Float32Array = new Float32Array(tree.tree.length*4);\r\n        for (let i = 0; i < tree.tree.length; i++) {\r\n            const atom = tree.tree[i];\r\n            atomPositions[i*4+0] = atom[0];\r\n            atomPositions[i*4+1] = atom[1];\r\n            atomPositions[i*4+2] = atom[2];\r\n            atomPositions[i*4+3] = atom[3];\r\n        }\r\n        this.minLimits = vec4.fromValues(tree.limits.minLimits[0], tree.limits.minLimits[1], tree.limits.minLimits[2], -1);\r\n        this.maxLimits = vec4.fromValues(tree.limits.maxLimits[0], tree.limits.maxLimits[1], tree.limits.maxLimits[2], -1);\r\n        device.queue.writeBuffer(this.atomsBuffer, 0, atomPositions.buffer);\r\n        this.octreeBuffer = device.createBuffer({\r\n            size: tree.bins.length*8*4,\r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST\r\n        });\r\n        let binsArray: Float32Array = new Float32Array(tree.bins.length*8);\r\n        for (let i = 0; i < tree.bins.length; i++) {\r\n            const bin = tree.bins[i];\r\n            binsArray.set(bin.AsArray(), i*8);\r\n        }\r\n        device.queue.writeBuffer(this.octreeBuffer, 0, binsArray.buffer);\r\n        this.atomsBindGroup = device.createBindGroup({\r\n            layout: this.pipeline.getBindGroupLayout(1),\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: {\r\n                        buffer: this.atomsBuffer,\r\n                    }\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    resource: {\r\n                        buffer: this.octreeBuffer,\r\n                    }\r\n                },\r\n            ]\r\n        });\r\n        //this.octreeMesh = new OctreeMesh(device, this.format, tree);\r\n    }\r\n}\r\n\r\nexport class RayMarchOctreeQuad {\r\n    loaded : Boolean = false;\r\n    quadPositions : GPUBuffer;\r\n    quadColors : GPUBuffer;\r\n    pipelineSetupRaymarch : RayPipelineSetup;\r\n    atomsScale: number = 1;\r\n    debugMode: number = 0;\r\n    allowResetRaymarch: number = 0;\r\n    getRaymarchCellNeighbors: number = 0;\r\n    kSmoothminScale: number = 0.8;\r\n    octreeMargins: number = 2.05;\r\n    loadedAtoms: number = 0;\r\n    makeIrregularOctree: boolean = true;\r\n    automaticOctreeSize: boolean = true;\r\n    octreeLayers: number = 4;\r\n    \r\n    constructor (device: GPUDevice, format: GPUTextureFormat, shader: string = \"\", utilities: string = \"\") {\r\n        let positions = new Float32Array([\r\n            -1, -1, 0,\r\n            1, -1, 0,\r\n            -1, 1, 0, \r\n            1, -1, 0,\r\n            1, 1, 0,\r\n            -1, 1, 0,\r\n        ]);\r\n        let colors = new Float32Array(positions);\r\n        this.quadPositions = CreateGPUBuffer(device, positions);\r\n        this.quadColors = CreateGPUBuffer(device, colors);\r\n\r\n        this.pipelineSetupRaymarch = new RayPipelineSetup(device, format, this.ComposeShader(shader, utilities));\r\n    }\r\n\r\n    public LoadAtoms(device: GPUDevice, structure: Structure) {\r\n        this.loaded = true;\r\n        this.pipelineSetupRaymarch.LoadAtoms(device, structure, this.octreeMargins, this.makeIrregularOctree, this.octreeLayers, this.automaticOctreeSize);\r\n        this.loadedAtoms = structure.atoms.length;\r\n    }\r\n\r\n    private Draw(device: GPUDevice, renderPass : GPURenderPassEncoder, mvpMatrix: mat4, inverseVpMatrix: mat4, cameraPos: vec3, fullrender: boolean,  percentageShown: number, drawStartPosition: number, pipelineSetup: RayPipelineSetup) {\r\n        if (!this.loaded) {\r\n            console.log(\"Data not loaded!\");\r\n            return;\r\n        }\r\n        device.queue.writeBuffer(pipelineSetup.mvpUniformBuffer, 0, mvpMatrix as ArrayBuffer);\r\n        device.queue.writeBuffer(pipelineSetup.inverseVpUniformBuffer, 0, inverseVpMatrix as ArrayBuffer);\r\n        device.queue.writeBuffer(pipelineSetup.cameraPosBuffer, 0, vec4.fromValues(cameraPos[0], cameraPos[1], cameraPos[2], 1.0) as ArrayBuffer);\r\n        let drawSettingsBuffer = new Float32Array(20);\r\n        drawSettingsBuffer[0] = percentageShown;\r\n        drawSettingsBuffer[1] = drawStartPosition;\r\n        drawSettingsBuffer[2] = this.atomsScale;\r\n        drawSettingsBuffer[3] = this.debugMode;\r\n        drawSettingsBuffer.set(pipelineSetup.minLimits, 4);\r\n        drawSettingsBuffer.set(pipelineSetup.maxLimits, 8);\r\n        drawSettingsBuffer[12] = this.allowResetRaymarch;\r\n        drawSettingsBuffer[13] = this.getRaymarchCellNeighbors;\r\n        drawSettingsBuffer[14] = this.kSmoothminScale;\r\n        drawSettingsBuffer[15] = this.octreeMargins;\r\n        drawSettingsBuffer[16] = this.loadedAtoms;\r\n        drawSettingsBuffer[17] = this.pipelineSetupRaymarch.treeLayers;\r\n        drawSettingsBuffer[18] = fullrender ? 1 : 0;\r\n        drawSettingsBuffer[19] = -1;\r\n        device.queue.writeBuffer(pipelineSetup.drawSettingsBuffer, 0, drawSettingsBuffer);\r\n        renderPass.setPipeline(pipelineSetup.pipeline);\r\n        renderPass.setBindGroup(0, pipelineSetup.uniformBindGroup);\r\n        renderPass.setBindGroup(1, pipelineSetup.atomsBindGroup);\r\n        renderPass.setBindGroup(2, pipelineSetup.drawSettingsBindGroup);\r\n        renderPass.setVertexBuffer(0, this.quadPositions);\r\n        renderPass.setVertexBuffer(1, this.quadColors);\r\n        renderPass.draw(numberOfVerticesToDraw);\r\n    }\r\n\r\n    public DrawRaymarch(device: GPUDevice, renderPass : GPURenderPassEncoder, mvpMatrix: mat4, inverseVpMatrix: mat4, cameraPos: vec3, fullrender: boolean, percentageShown: number, drawStartPosition: number, atomsScale: number) {\r\n        this.atomsScale = atomsScale;\r\n        this.Draw(device, renderPass, mvpMatrix, inverseVpMatrix, cameraPos, fullrender, percentageShown, drawStartPosition, this.pipelineSetupRaymarch);\r\n    }\r\n\r\n    public DrawGrid(device: GPUDevice, renderPass: GPURenderPassEncoder, mvpMatrix: mat4) {\r\n        if (this.pipelineSetupRaymarch.octreeMesh != undefined) {\r\n            this.pipelineSetupRaymarch.octreeMesh.DrawStructure(renderPass, mvpMatrix);\r\n        }\r\n    }\r\n\r\n    public ReloadShader(device: GPUDevice, shader: string, utilities: string = \"\") {\r\n        this.pipelineSetupRaymarch.ReloadShader(device, this.ComposeShader(shader, utilities));\r\n    }\r\n\r\n    public ComposeShader(shader: string, utilities: string = \"\") {\r\n        if (shader == \"\") {\r\n            shader = shaderRaymarch;\r\n        }\r\n        if (utilities == \"\") {\r\n            utilities = shaderUtilities;\r\n        }\r\n        let preprocessedShader = PreprocessShaderWithFlags(shader, [\"UseSmoothMinExp\"], true);\r\n        return preprocessedShader+\"\\n\"+utilities+\"\\n\"+shaderDefinitions;\r\n    }\r\n}","import { Atom } from \"./atom\";\r\nimport { GetResidueType } from \"./residueDatabase\";\r\n\r\nexport class Residue {\r\n    name: string; \r\n    sequenceNumber: number;\r\n    atoms: Atom[];\r\n\r\n    constructor (name: string, sequenceNumber: number, atoms: Atom[]) {\r\n        this.name = name;\r\n        this.sequenceNumber = sequenceNumber;\r\n        this.atoms = atoms;\r\n    }\r\n\r\n    public FindAtom(residueAtomName: string) {\r\n        return this.atoms.find((a) => a.residueAtomName == residueAtomName);\r\n    }\r\n}","import { Atom } from \"./atom\";\r\nimport { Residue } from \"./residue\";\r\n\r\nconst residueTypesText = require('./data/residueTypes.xml');\r\nconst aminoAcidBondsText = require('./data/aminoAcidBonds.xml');\r\n\r\nexport enum ResidueTypeEnum {\r\n    AminoAcidBase20,\r\n    AminoAcidExtra,\r\n    Nucleobase,\r\n    Solvent,\r\n    Ligand\r\n}\r\n\r\nexport class ResidueType {\r\n    name: string;\r\n    id: number;\r\n    type: ResidueTypeEnum;\r\n    identifier: string;\r\n    bonds: {arity: number, a: string, b: string}[];\r\n\r\n    constructor (id: number, type: string, identifier: string, name: string, bonds: {arity: number, a: string, b: string}[]) {\r\n        this.id = id;\r\n        this.type = this.GetEnumTypeFromType(type);\r\n        this.identifier = identifier;\r\n        this.name = name;\r\n        this.bonds = bonds;\r\n    }\r\n\r\n    private GetEnumTypeFromType(type: string) {\r\n        if (type == \"aa_20\") {\r\n            return ResidueTypeEnum.AminoAcidBase20;\r\n        } else if (type == \"aa_ext\") {\r\n            return ResidueTypeEnum.AminoAcidExtra;\r\n        } else if (type == \"nb\") {\r\n            return ResidueTypeEnum.Nucleobase;\r\n        } else if (type == \"sol\") {\r\n            return ResidueTypeEnum.Solvent;\r\n        } else if (type == \"lig\") {\r\n            return ResidueTypeEnum.Ligand;\r\n        } else  {\r\n            return ResidueTypeEnum.Ligand;\r\n        }\r\n    }\r\n\r\n    public GetAtomPairBondArity(a: Atom, b: Atom) {\r\n        const bond = this.bonds.find((bond) => \r\n            (bond.a == a.residueAtomName && bond.b == b.residueAtomName) || (bond.a == b.residueAtomName && bond.b == a.residueAtomName));\r\n        return bond?.arity ?? 1;\r\n    }\r\n}\r\n\r\nexport function LoadResidueTypes() {\r\n    let aminoAcidBonds = LoadAminoAcidBonds();\r\n    console.log(aminoAcidBonds);\r\n    let result = [];\r\n    let lines = residueTypesText.split(\"\\n\");\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const line = lines[i];\r\n        let match = line.match(/<residue id=\"(\\d+)\" type=\"(\\S+)\" identifier=\"(\\w+)\" shortcut=\"\\w+\" name=\"([\\w ]+)\"/);\r\n        if (match == null) {\r\n            continue;\r\n        }\r\n        const id = parseInt(match[1]);\r\n        let residueType = new ResidueType(id, match[2], match[3], match[4], (aminoAcidBonds.get(id) ?? []));\r\n        result.push(residueType);\r\n    }\r\n    console.log(result);\r\n    return result;\r\n}\r\n\r\nfunction LoadAminoAcidBonds() {\r\n    let result: Map<number, {arity: number, a: string, b: string}[]> = new Map();\r\n    let aminoAcids = [...aminoAcidBondsText.matchAll(/<aminoAcid id=\"(\\d+)\">([\\W\\w\\n]+?)<\\/aminoAcid>/g)];\r\n    for (let i = 0; i < aminoAcids.length; i++) {\r\n        let bondsResults = [];\r\n        const id = parseInt(aminoAcids[i][1]);\r\n        const bonds = aminoAcids[i][2];\r\n        const bondsMatches = [...bonds.matchAll(/<bond arity=\"(\\d+)\">([\\W\\w\\n]+?)<\\/bond>/g)];\r\n        for (let j = 0; j < bondsMatches.length; j++) {\r\n            const bond = bondsMatches[j];\r\n            const bondAtoms = bond[2];\r\n            const bondArity = parseInt(bond[1]);\r\n            let bondedAtoms : RegExpMatchArray = [...bondAtoms.matchAll(/<atom name=\"([\\w\\d]+)\" \\/>/g)];\r\n            bondsResults.push({arity: bondArity, a: bondedAtoms[0][1], b: bondedAtoms[1][1]});\r\n        }\r\n        result.set(id, bondsResults);\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction MakeResidueTypesNameMap(residueTypes : ResidueType[]) {\r\n    let result : Map<string, ResidueType> = new Map();\r\n    for (let i = 0; i < residueTypes.length; i++) {\r\n        const residueType = residueTypes[i];\r\n        result.set(residueType.name, residueType);\r\n    }\r\n    return result;\r\n}\r\n\r\nconst ResidueTypes = LoadResidueTypes();\r\nconst ResidueTypesNameMap = MakeResidueTypesNameMap(ResidueTypes);\r\n\r\nexport function GetResidueType(residue : Residue) {\r\n    return ResidueTypesNameMap.get(residue.name) ?? ResidueTypes[0];\r\n}\r\n","import { vec2, vec3, mat4 } from 'gl-matrix';\r\nimport { CreateBondGeometry, CreateSphereGeometry, CubeData } from './meshHelpers';\r\nimport { IsDataPcd, LoadDataPdb, LoadDataPcd, LoadDataObj, IsDataPdb } from './loadData';\r\nimport { GetAtomType } from './atomDatabase';\r\nimport { Atom } from './atom';\r\nimport { Chain } from './chain';\r\nimport { ChainMesh } from './chainMesh';\r\n\r\nconst AtomScale = 0.25;\r\n\r\nexport class Structure {\r\n    atoms : Atom[];\r\n    chains : Chain[];\r\n    chainMeshes : ChainMesh[];\r\n\r\n    constructor (dataText: string) {\r\n        let t0 = performance.now();\r\n        let loaded;\r\n        if (IsDataPcd(dataText)) {\r\n            loaded = LoadDataPcd(dataText, 100);\r\n        } else if (IsDataPdb(dataText)) {\r\n            loaded = LoadDataPdb(dataText);\r\n        } else {\r\n            loaded = LoadDataObj(dataText, 250);\r\n        }\r\n        let t1 = performance.now();\r\n        this.atoms = loaded.atoms;\r\n        this.chains = loaded.chains;\r\n        console.log(\"Chains:\");\r\n        console.log(this.chains);\r\n        //console.log(\"Atoms:\");\r\n        //console.log(this.atoms);\r\n        //const instanceMesh = CubeData();\r\n        this.chainMeshes = [];\r\n        for (let i = 0; i < this.chains.length; i++) {\r\n            const chain = this.chains[i];\r\n            this.chainMeshes.push(new ChainMesh(chain));\r\n        }\r\n        let t2 = performance.now();\r\n        console.log(\"Loading data: \" + (t1-t0) + \"ms\");\r\n        console.log(\"Creating chain meshes: \" + (t2-t1) + \"ms\");\r\n    }\r\n\r\n    public InitializeBuffers(device : GPUDevice) {\r\n        this.chainMeshes.forEach(cm => cm.InitializeBuffers(device));\r\n    }\r\n\r\n    public DestroyBuffers() {\r\n        this.chainMeshes.forEach(cm => cm.DestroyBuffers());\r\n    }\r\n\r\n    public DrawStructure(renderPass : GPURenderPassEncoder, percentageShown : number, bondsOnly : boolean = false) {\r\n        let chainsShown = Math.ceil(this.chainMeshes.length*percentageShown);\r\n        for (let i = 0; i < chainsShown; i++) {\r\n            const chainMesh = this.chainMeshes[i];\r\n            if (!chainMesh.initializedBuffers) {\r\n                console.log(\"warning! tried drawing using uninitialized chainmesh [\"+i+\"]\");\r\n                continue;\r\n            }\r\n            let chainPercentageShown = 1;\r\n            if (i == chainsShown-1) {\r\n                chainPercentageShown = 1-(chainsShown-this.chainMeshes.length*percentageShown);\r\n            }\r\n            //let numberOfVerticesToDraw = chainMesh.atomsNumberOfVertices;\r\n            let numberOfVerticesToDraw = Math.round(chainMesh.atomsNumberOfVertices*chainPercentageShown)-Math.round(chainMesh.atomsNumberOfVertices*chainPercentageShown)%3;\r\n            if (!bondsOnly) {\r\n                renderPass.setVertexBuffer(0, chainMesh.atomsVertexBuffer!);\r\n                renderPass.setVertexBuffer(1, chainMesh.atomsColorBuffer!);\r\n                renderPass.draw(numberOfVerticesToDraw);\r\n            }\r\n            //numberOfVerticesToDraw = chainMesh.bondsNumberOfVertices;\r\n            numberOfVerticesToDraw = Math.round(chainMesh.bondsNumberOfVertices*chainPercentageShown)-Math.round(chainMesh.bondsNumberOfVertices*chainPercentageShown)%3;\r\n            renderPass.setVertexBuffer(0, chainMesh.bondsVertexBuffer!);\r\n            renderPass.setVertexBuffer(1, chainMesh.bondsColorBuffer!);\r\n            renderPass.draw(numberOfVerticesToDraw);\r\n        };\r\n    }\r\n}\r\n","export function PreprocessShaderWithFlags(shader: string, flags: string[], printWarnings: boolean = true) {\r\n    let unusedFlags: string[] = [...flags];\r\n    let insideFlag: string[] = [];\r\n    let lastIfLine = 0;\r\n\r\n    let lines = shader.split(\"\\n\");\r\n    for (let lineNumber = 0; lineNumber < lines.length; lineNumber++) {\r\n        const matchesFlags = insideFlag.every(f => flags.includes(f));\r\n        let match;\r\n        if ((match = lines[lineNumber].match(/^ *\\/\\/#if (\\S+)/)) != null) {\r\n            insideFlag.push(match[1]);\r\n            lastIfLine = lineNumber;\r\n            if (unusedFlags.includes(match[1])) {\r\n                unusedFlags.splice(unusedFlags.indexOf(match[1], 1));\r\n            }\r\n        } else if ((match = lines[lineNumber].match(/^ *\\/\\/#endif (\\S+)/)) != null) {\r\n            if (insideFlag.includes(match[1])) {\r\n                if (matchesFlags && lineNumber-1 > 0 && lines[lineNumber-1].match(/\\*\\//) != null) {\r\n                    lines[lineNumber-1] = \"\";\r\n                }\r\n                insideFlag.splice(insideFlag.indexOf(match[1]), 1);\r\n            } else if (printWarnings) {\r\n                console.log(\"wgslPreprocessor Warning: #endif in line '\" + lines[lineNumber] + \"' doesn't have a matching starting #if\");\r\n            }\r\n        } else {\r\n            if (!matchesFlags && !lines[lineNumber].match(/^ *\\/\\//)) {\r\n                lines[lineNumber] = \"//\"+lines[lineNumber];\r\n            }\r\n            if (lastIfLine == lineNumber-1 && insideFlag.length > 0 && matchesFlags && lines[lineNumber].match(/\\/\\*/) != null) {\r\n                lines[lineNumber] = \"\";\r\n            }\r\n        }\r\n    }\r\n\r\n    if (printWarnings) {\r\n        for (let i = 0; i < unusedFlags.length; i++) {\r\n            console.log(\"wgslPreprocessor Warning: Flag '\" + unusedFlags[i] + \"' isn't used in the shader.\");\r\n        }\r\n        for (let i = 0; i < insideFlag.length; i++) {\r\n            console.log(\"wgslPreprocessor Warning: Flag '\" + insideFlag[i] + \"' isn't finished with an #endif.\");\r\n        }\r\n    }\r\n\r\n    console.log(lines.join(\"\\n\"));\r\n    return lines.join(\"\\n\");\r\n}\r\n\r\n\r\n","export default \"const DM_Default = 0;\\r\\nconst DM_DefaultWithBase = 1;\\r\\nconst DM_SemiLit = 2;\\r\\nconst DM_Lit = 3;\\r\\nconst DM_LitGooch = 4;\\r\\nconst DM_DefaultBright = 11;\\r\\n\\r\\nconst DM_Normals = 101;\\r\\nconst DM_Depth = 102;\\r\\nconst DM_Iterations = 103;\\r\\nconst DM_StackSteps = 104;\\r\\nconst DM_RaymarchedAtoms = 104;\\r\\nconst DM_FirstStepDistance = 105;\\r\\nconst DM_AllStepsDistance = 106;\\r\\nconst DM_TToEnd = 107;\\r\\nconst DM_Octree1 = 111;\\r\\nconst DM_Octree2 = 112;\\r\\nconst DM_Octree3 = 113;\\r\\nconst DM_DebugCombined = 119;\\r\\n\\r\\nconst DM_BlankStackPos0 = 130;\\r\\nconst DM_BlankStackPos1 = 131;\\r\\nconst DM_BlankStackPos2 = 132;\\r\\nconst DM_BlankStackPos3 = 133;\\r\\nconst DM_BlankStackPos4 = 134;\\r\\nconst DM_BlankStackPos5 = 135;\\r\\nconst DM_BlankStackPos6 = 136;\\r\\nconst DM_BlankStackPos7 = 137;\\r\\nconst DM_SkipStackPos0 = 139;\\r\\n\\r\\n\\r\\nconst DM_GroupStart_Transparent = 300;\\r\\nconst DM_Transparent1 = 301;\\r\\nconst DM_Transparent2 = 302;\\r\\nconst DM_Transparent3 = 303;\\r\\nconst DM_TransparentDistance = 304;\\r\\nconst DM_TransparentConst = 305;\\r\\nconst DM_TransparentFake1 = 306;\\r\\nconst DM_TransparentFake2 = 307;\\r\\n\"","export default \"struct Uniforms {\\n    mvpMatrix : mat4x4<f32>,\\n};\\n@binding(0) @group(0) var<uniform> uniforms : Uniforms;\\n\\nstruct Output {\\n    @builtin(position) position : vec4<f32>,\\n    @location(0) vColor : vec4<f32>,\\n};\\n\\n@vertex\\nfn vs_main(@location(0) pos: vec4<f32>, @location(1) color: vec4<f32>) -> Output {\\n    let x = uniforms.mvpMatrix * pos;\\n    var output: Output;\\n    output.position = uniforms.mvpMatrix * pos;\\n    //output.position = pos;\\n    output.vColor = color;\\n    return output;\\n}\\n\\n@fragment\\nfn fs_main(@location(0) vColor: vec4<f32>) -> @location(0) vec4<f32> {\\n    return vColor;\\n}\"","export default \"@binding(0) @group(0) var<uniform> mvpMatrix : mat4x4<f32>;\\r\\n@binding(1) @group(0) var<uniform> vMatrix : mat4x4<f32>;\\r\\n@binding(2) @group(0) var<uniform> cameraPos : vec4<f32>;\\r\\n\\r\\nstruct DrawSettings {\\r\\n    amount : f32,\\r\\n    start : f32,\\r\\n    pad1 : f32,\\r\\n    atomScale : f32,\\r\\n}\\r\\n@binding(0) @group(1) var<uniform> drawSettings : DrawSettings;\\r\\n\\r\\nstruct VertexOutput {\\r\\n    @builtin(position) position : vec4<f32>,\\r\\n    @location(0) color : vec4<f32>,\\r\\n    @location(1) uv : vec2<f32>,\\r\\n    @location(2) worldPos : vec4<f32>,\\r\\n};\\r\\n\\r\\n@vertex\\r\\nfn vs_main(@builtin(vertex_index) index: u32, @location(0) pos: vec4<f32>, @location(1) color: vec4<f32>, @location(2) atomInfo: vec2<f32>) -> VertexOutput {\\r\\n    //atomInfo x=number, y=covalentRadius \\r\\n    let mvp = mvpMatrix;\\r\\n    let v = vMatrix;\\r\\n    let cPos = cameraPos;\\r\\n    //let cameraRight : vec4<f32> = vec4(1, 0, 0, 0);\\r\\n    //let cameraUp : vec4<f32> = vec4(0, 1, 0, 0);\\r\\n    let cameraRight = vec4(1, 0, 0, 0)*vMatrix;\\r\\n    let cameraUp = vec4(0, 1, 0, 0)*vMatrix;\\r\\n    var output: VertexOutput;\\r\\n    output.position = pos;\\r\\n    let scale = drawSettings.atomScale*atomInfo.y;\\r\\n    if (index%6 == 0) {\\r\\n        output.position = pos + cameraRight*(-0.5)*scale + cameraUp*(-0.5)*scale;\\r\\n        output.uv = vec2(0, 0);\\r\\n    } else if (index%6 == 1 || index%6 == 3) {\\r\\n        output.position = pos + cameraRight*(0.5)*scale + cameraUp*(-0.5)*scale;\\r\\n        output.uv = vec2(1, 0);\\r\\n    } else if (index%6 == 2 || index%6 == 4) {\\r\\n        output.position = pos + cameraRight*(-0.5)*scale + cameraUp*(0.5)*scale;\\r\\n        output.uv = vec2(0, 1);\\r\\n    } else if (index%6 == 5) {\\r\\n        output.position = pos + cameraRight*(0.5)*scale + cameraUp*(0.5)*scale;\\r\\n        output.uv = vec2(1, 1);\\r\\n    }\\r\\n    output.worldPos = output.position;\\r\\n    output.position = mvpMatrix * output.position;\\r\\n    output.color = color;\\r\\n    return output;\\r\\n}\\r\\n\\r\\nstruct FragmentOutput {\\r\\n    @builtin(frag_depth) depth: f32,\\r\\n    @location(0) color: vec4<f32>\\r\\n}\\r\\n\\r\\n@fragment\\r\\nfn fs_main(@builtin(position) position : vec4<f32>, @location(0) color: vec4<f32>, @location(1) uv: vec2<f32>, @location(2) worldPos: vec4<f32>) -> FragmentOutput {\\r\\n    var output: FragmentOutput;\\r\\n    output.color = color;\\r\\n    let amount = drawSettings.amount;\\r\\n    if (amount > 0) {\\r\\n        output.color.b = output.color.b*1.1; \\r\\n    }\\r\\n    let dist = pow(uv.x*2-1.0, 2)+pow(uv.y*2-1.0, 2);\\r\\n    if (dist > 1.0) {\\r\\n        discard;\\r\\n    }\\r\\n    //todo: update z pos\\r\\n    var pos = worldPos;//-vec4(0, 0, 1, 0)*vMatrix*drawSettings.atomScale;\\r\\n    pos = mvpMatrix * pos;\\r\\n    output.depth = position.z;\\r\\n    //output.depth = position.z-drawSettings.atomScale/10000.0;\\r\\n    //output.depth = 0.5;\\r\\n    //output.color = vec4(0, 0, abs(pos.z-position.z), 1.0);\\r\\n    return output;\\r\\n}\"","export default \"@binding(0) @group(0) var<uniform> mvpMatrix : mat4x4<f32>;\\r\\n@binding(1) @group(0) var<uniform> inverseVpMatrix : mat4x4<f32>;\\r\\n@binding(2) @group(0) var<uniform> cameraPos : vec4<f32>;\\r\\n\\r\\nstruct Atom {\\r\\n    position: vec3<f32>,\\r\\n    number: f32,\\r\\n}\\r\\n\\r\\nstruct Atoms {\\r\\n    atoms: array<Atom>,\\r\\n}\\r\\n\\r\\n@binding(0) @group(1) var<storage, read> atoms : Atoms;\\r\\n\\r\\nstruct Bin {\\r\\n    min: vec3<f32>,\\r\\n    start: f32,\\r\\n    max: vec3<f32>,\\r\\n    end: f32,\\r\\n}\\r\\n\\r\\nstruct Bins {\\r\\n    bins: array<Bin>,\\r\\n}\\r\\n\\r\\n@binding(1) @group(1) var<storage, read> bins : Bins;\\r\\n\\r\\nstruct DrawSettings {\\r\\n    debugA: f32,\\r\\n    debugB: f32,\\r\\n    atomsScale: f32,\\r\\n    debugMode: f32,\\r\\n    minLimit: vec4<f32>,\\r\\n    maxLimit: vec4<f32>,\\r\\n    allowReset: f32,\\r\\n    getCellNeighbors: f32,\\r\\n    kSmoothminScale: f32,\\r\\n    octreeCreationMargins: f32,\\r\\n    totalAtoms: f32,\\r\\n    treeLayers: f32,\\r\\n    isFullRender: f32,\\r\\n    padding1: f32,\\r\\n}\\r\\n@binding(0) @group(2) var<uniform> drawSettings : DrawSettings;\\r\\n\\r\\nstruct Output {\\r\\n    @builtin(position) position : vec4<f32>,\\r\\n    @location(0) vPos : vec4<f32>,\\r\\n};\\r\\n\\r\\n@vertex\\r\\nfn vs_main(@location(0) pos: vec4<f32>, @location(1) color: vec4<f32>) -> Output {\\r\\n    var output: Output;\\r\\n    output.position = pos;\\r\\n    output.vPos = pos;\\r\\n    let mvp = mvpMatrix;\\r\\n    let invVp = inverseVpMatrix;\\r\\n    return output;\\r\\n}\\r\\n\\r\\nstruct SdfResult {\\r\\n    distance : f32,\\r\\n    color : vec4<f32>, \\r\\n}\\r\\n\\r\\nstruct Hit {\\r\\n    t: f32,\\r\\n\\tintersection: vec3<f32>,\\r\\n    t2: f32,\\r\\n    atomNumber: f32,\\r\\n}\\r\\n\\r\\nconst miss: Hit = Hit(1e20, vec3(0.0), 1e20, -1);\\r\\n\\r\\n//todo add preprocessing that allows switching between these\\r\\n\\r\\n//https://iquilezles.org/articles/distfunctions/\\r\\n//exponential smooth min\\r\\n//#if UseSmoothMinExp\\r\\n/*\\r\\nfn opSMin(d1: f32, d2: f32, k: f32) -> f32 {\\r\\n    let res = exp2(-(2.0/k)*d1) + exp2(-(2.0/k)*d2);\\r\\n    return -log2(res)/(2.0/k);\\r\\n}\\r\\n*/\\r\\n//#endif UseSmoothMinExp\\r\\n\\r\\n//power smooth min\\r\\n//#if UseSmoothMinPower\\r\\n/*\\r\\nfn opSMin(d1: f32, d2: f32, k: f32) -> f32 {\\r\\n    let a = pow(d1, (1.0/(k+0.5))); \\r\\n    let b = pow(d2, (1.0/(k+0.5)));\\r\\n    return pow((a*b)/(a+b), 1.0/(1.0/(k+0.5)));\\r\\n}\\r\\n*/\\r\\n//#endif UseSmoothMinPower\\r\\n\\r\\n//root smooth min\\r\\n//#if UseSmoothMinRoot\\r\\n/*\\r\\nfn opSMin(d1: f32, d2: f32, k: f32) -> f32 {\\r\\n    let h = d1-d2;\\r\\n    return 0.5*((d1+d2) - sqrt(h*h+k*0.1));\\r\\n}\\r\\n*/\\r\\n//#endif UseSmoothMinRoot\\r\\n\\r\\n//#if UseSmoothMinPoly1\\r\\n/*\\r\\n//polynomial smooth min 1\\r\\nfn opSMin(d1: f32, d2: f32, k: f32) -> f32 {\\r\\n    let h = clamp(0.5 + 0.5*(d2-d1)/k, 0.0, 1.0);\\r\\n    return mix(d2, d1, h) - k*h*(1.0-h); \\r\\n}\\r\\n*/\\r\\n//#endif UseSmoothMinPoly1\\r\\n\\r\\n//polynomial smooth min 2\\r\\n//supposed to be a bit faster -- try more tests, it seems pretty much the same\\r\\n//#if UseSmoothMinPoly2\\r\\nfn opSMin(d1: f32, d2: f32, k: f32) -> f32 {\\r\\n    let h = max(k-abs(d1-d2), 0.0)/k;\\r\\n    return min(d1, d2) - h*h*k*(1.0/4.0);\\r\\n}\\r\\n//#endif UseSmoothMinPoly2\\r\\n\\r\\n\\r\\n//todo: create alternative versions of this function for other smooth minimums too?\\r\\nfn opSMinColor(a: f32, b: f32, k: f32) -> vec2<f32> {\\r\\n    let h: f32 = max(k-abs(a-b), 0.0)/k;\\r\\n    let m: f32 = h*h*0.5;\\r\\n    let s: f32 = m*k*(1.0/2.0);\\r\\n    if (a < b) {\\r\\n        return vec2(a-s, m);\\r\\n    } else {\\r\\n        return vec2(b-s, 1.0-m);\\r\\n    }\\r\\n}\\r\\n\\r\\nfn dSphere(p: vec3<f32>, center: vec3<f32>, radius: f32) -> f32 {\\r\\n    return length(p-center)-radius;\\r\\n}\\r\\n\\r\\nfn covalentRadius(w: f32) -> f32 {\\r\\n    let number = w%100.0;\\r\\n    if (number < 1.1) {\\r\\n        return 1.0*drawSettings.atomsScale;\\r\\n    } else if (number < 8.1) {\\r\\n        //C/N/O\\r\\n        return 0.68*drawSettings.atomsScale;\\r\\n    }\\r\\n    //S sulfur\\r\\n    return 1.02*drawSettings.atomsScale;\\r\\n}\\r\\n\\r\\nfn child(index: i32, number: i32) -> i32 {\\r\\n    let result = 8*(index+1)+number;\\r\\n    return result;\\r\\n}\\r\\n\\r\\nfn parent(index: i32) -> i32 {\\r\\n    let result = (index/8)-1;\\r\\n    return result;\\r\\n}\\r\\n\\r\\nvar<private> intersecting: i32 = -1;\\r\\nvar<private> numRaySphereIntersections: i32 = 0;\\r\\nvar<private> numIntersected: i32 = 0;\\r\\n\\r\\nvar<private> neighborX: i32 = -1;\\r\\nvar<private> neighborY: i32 = -1;\\r\\nvar<private> neighborZ: i32 = -1;\\r\\n\\r\\nfn dAtomsInBin(p: vec3<f32>, binId: i32) -> f32 {\\r\\n    var atomNumber = -1.0;\\r\\n    var resDistance = 1000000000.0;\\r\\n    for (var i : i32 = i32(bins.bins[binId].start); i < i32(bins.bins[binId].end); i++) {\\r\\n        let d = dSphere(p, atoms.atoms[i].position, covalentRadius(atoms.atoms[i].number));\\r\\n        resDistance = opSMin(resDistance, d, drawSettings.kSmoothminScale);\\r\\n    }\\r\\n    return resDistance;\\r\\n}\\r\\n\\r\\nfn dAtomsInBinColor(p: vec3<f32>, binId: i32) -> SdfResult {\\r\\n    var atomNumber = -1.0;\\r\\n    var resDistance = 1000000000.0;\\r\\n    var resColor: vec4<f32> = vec4(1.0);\\r\\n    for (var i : i32 = i32(bins.bins[binId].start); i < i32(bins.bins[binId].end); i++) {\\r\\n        let d = dSphere(p, atoms.atoms[i].position, covalentRadius(atoms.atoms[i].number));\\r\\n        let smin = opSMinColor(resDistance, d, drawSettings.kSmoothminScale);\\r\\n        resDistance = smin.x;\\r\\n        resColor = mix(resColor, getAtomColor(atoms.atoms[i].number), smin.y);\\r\\n    }\\r\\n    var result: SdfResult;\\r\\n    result.distance = resDistance;\\r\\n    result.color = resColor;\\r\\n    return result;\\r\\n}\\r\\n\\r\\nfn dAtoms(p: vec3<f32>) -> f32 {\\r\\n    return dAtomsInBin(p, intersecting);\\r\\n}\\r\\n\\r\\nfn dAtomsColor(p: vec3<f32>) -> SdfResult {\\r\\n    var result: SdfResult = dAtomsInBinColor(p, intersecting);\\r\\n    return result;\\r\\n}\\r\\n\\r\\nfn getAtomColor(w: f32) -> vec4<f32> {\\r\\n    let atomNumber = w%100.0;\\r\\n    let aminoAtomType = w/100;\\r\\n    //todo: custom colors using override declarations?\\r\\n    var color = vec4(10.0, 10.0, 10.0, 1.0);\\r\\n    if (atomNumber < 6.5) {\\r\\n        color = vec4(0.6, 0.9, 0.3, 1.0); // C\\r\\n    } else if (atomNumber < 7.5) {\\r\\n        color = vec4(0.95, 0.05, 0.25, 1.0); // N\\r\\n    } else if (atomNumber < 8.5) {\\r\\n        color = vec4(0.20, 0.05, 0.95, 1.0); // O\\r\\n    } else if (atomNumber < 16.5) {\\r\\n        color = vec4(0.995, 0.995, 0.025, 1.0); // S\\r\\n    }\\r\\n    if (aminoAtomType > 1) {\\r\\n        color = color/5+vec4(0.85, 0.85, 0.85, 0);\\r\\n    } else {\\r\\n        color = color/1.275;\\r\\n    }\\r\\n    return color;\\r\\n}\\r\\n\\r\\nfn findNormal(pos: vec3<f32>) -> vec3<f32> {\\r\\n    var n = vec3(0.0);\\r\\n    for (var i = 0; i < 4; i++) {\\r\\n        let e = (vec3(f32(((i+3)>>1)&1), f32((i>>1)&1), f32(i&1))*2.0-1.0)*0.5773;\\r\\n        n += e*dAtoms(pos+e*0.001*1.0);\\r\\n    }\\r\\n    return normalize(n);\\r\\n}\\r\\n\\r\\n//modified from https://tavianator.com/2022/ray_box_boundary.html\\r\\nfn aabbIntersection(origin: vec3<f32>, direction: vec3<f32>, directionInverse: vec3<f32>, boxMin: vec3<f32>, boxMax: vec3<f32>) -> vec2<f32> {\\r\\n    var tmin: f32 = -100.0;\\r\\n    var tmax: f32 = 6942069.0;\\r\\n\\r\\n    for (var i = 0; i < 3; i++) {\\r\\n        let t1 = (boxMin[i] - origin[i]) * directionInverse[i];\\r\\n        let t2 = (boxMax[i] - origin[i]) * directionInverse[i];\\r\\n\\r\\n        tmin = max(tmin, min(t1, t2));\\r\\n        tmax = min(tmax, max(t1, t2));\\r\\n    }\\r\\n    return vec2(tmin, tmax);\\r\\n}\\r\\n\\r\\n//tddo try find faster version?\\r\\nfn raySphereIntersection(origin: vec3<f32>, direction: vec3<f32>, atom: Atom, addSmoothMinMargin: f32) -> Hit {\\r\\n    let center = atom.position;\\r\\n    let radius = covalentRadius(atom.number)+drawSettings.kSmoothminScale*addSmoothMinMargin*0.5;\\r\\n\\tlet oc = origin - center;\\r\\n\\tlet b = dot(direction, oc);\\r\\n\\tlet c = dot(oc, oc) - (radius*radius);\\r\\n\\r\\n\\tlet det = b*b - c;\\r\\n\\tif (det < 0.0) {return miss;}\\r\\n\\r\\n\\tlet t = -b - sqrt(det);\\r\\n\\t//if (t < 0.0) {t = -b + sqrt(det);}\\r\\n\\tif (t < 0.0) {return miss;}\\r\\n\\r\\n\\tlet intersection = origin + t * direction;\\r\\n\\tlet t2 = -b + sqrt(det);\\r\\n    return Hit(t, intersection, t2, atom.number);\\r\\n}\\r\\n\\r\\nvar<private> start: vec3<f32>;\\r\\nvar<private> end: f32;\\r\\nconst stackSize = 32;\\r\\nvar<private> stackCurrentNum = 0;\\r\\nvar<private> stackT: array<f32, stackSize>;\\r\\nvar<private> stackBins: array<i32, stackSize>;\\r\\n\\r\\nfn resetStack() {\\r\\n    for (var i : i32 = 0; i < stackSize; i++) {\\r\\n        stackT[i] = 10000000.0;\\r\\n        stackBins[i] = -1;\\r\\n    }\\r\\n}\\r\\n\\r\\nfn insertIntoSortedStack(t: f32, bin: i32) {\\r\\n    for (var i : i32 = 0; i < min(stackSize, stackCurrentNum+1); i++) {\\r\\n        if (stackT[i] > t) {\\r\\n            for (var j : i32 = min(stackSize, stackCurrentNum+1)-1; j >= i+1; j--) {\\r\\n                stackT[j] = stackT[j-1];\\r\\n                stackBins[j] = stackBins[j-1];\\r\\n            }\\r\\n            stackT[i] = t;\\r\\n            stackBins[i] = bin;\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    stackCurrentNum++;\\r\\n}\\r\\n\\r\\nconst MAP_INDEXES_0 = array(0,1,2,4,5,3,6,7);\\r\\nconst MAP_INDEXES_1 = array(1,0,5,3,2,7,4,6);\\r\\nconst MAP_INDEXES_2 = array(2,0,3,6,7,1,4,5);\\r\\nconst MAP_INDEXES_3 = array(3,2,7,1,6,0,5,4);\\r\\nconst MAP_INDEXES_4 = array(4,0,5,6,1,2,7,3);\\r\\nconst MAP_INDEXES_5 = array(5,7,4,1,3,6,0,2);\\r\\nconst MAP_INDEXES_6 = array(6,7,2,4,0,5,3,1);\\r\\nconst MAP_INDEXES_7 = array(7,3,6,5,1,2,4,0);\\r\\n//todo make this efficient not just if in corners but also when at centers of sides\\r\\nfn getFirstIndexUsingOrigin(origin: vec3<f32>, i: i32) -> i32 {\\r\\n    if (origin.x < 0 && origin.y < 0 && origin.z < 0) {\\r\\n        return MAP_INDEXES_0[i];\\r\\n    } else if (origin.x > 0 && origin.y < 0 && origin.z < 0) {\\r\\n        return MAP_INDEXES_1[i];\\r\\n    } else if (origin.x < 0 && origin.y > 0 && origin.z < 0) {\\r\\n        return MAP_INDEXES_2[i];\\r\\n    } else if (origin.x > 0 && origin.y > 0 && origin.z < 0) {\\r\\n        return MAP_INDEXES_3[i];\\r\\n    } else if (origin.x < 0 && origin.y < 0 && origin.z > 0) {\\r\\n        return MAP_INDEXES_4[i];\\r\\n    } else if (origin.x > 0 && origin.y < 0 && origin.z > 0) {\\r\\n        return MAP_INDEXES_5[i];\\r\\n    } else if (origin.x < 0 && origin.y > 0 && origin.z > 0) {\\r\\n        return MAP_INDEXES_6[i];\\r\\n    } else { //if (origin.x < 0 && origin.y < 0 && origin.z < 0) {\\r\\n        return MAP_INDEXES_7[i];\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nfn findIntersectingCells(origin: vec3<f32>, direction: vec3<f32>) -> vec3<f32> {\\r\\n    var closestAABBintersection: vec3<f32> = vec3(-1.0);\\r\\n    let binsAmount = arrayLength(&bins.bins);\\r\\n    let inverseDirection = 1.0/direction;\\r\\n    resetStack();\\r\\n\\r\\n    for (var i : i32 = 0; i < 8; i++) {\\r\\n        var firstId = getFirstIndexUsingOrigin(origin, i);\\r\\n        let intersection = aabbIntersection(origin, direction, inverseDirection, bins.bins[firstId].min, bins.bins[firstId].max);\\r\\n        if (intersection.x < intersection.y && intersection.x > -15.0 && bins.bins[firstId].end < -1.5 && intersection.x < closestRealHitT) {\\r\\n            numIntersected += 8;\\r\\n            for (var mi : i32 = 0; mi < 8; mi++) {\\r\\n                let m = child(firstId, getFirstIndexUsingOrigin(origin, mi));\\r\\n                let intersection2 = aabbIntersection(origin, direction, inverseDirection, bins.bins[m].min, bins.bins[m].max);\\r\\n                if (intersection2.x < intersection2.y && intersection2.x > -10.0 && bins.bins[m].end < -1.5 && intersection2.x < closestRealHitT) {\\r\\n                    numIntersected += 3;\\r\\n                    for (var n : i32 = child(m, 0); n < child(m, 8); n++) {\\r\\n                        let intersection3 = aabbIntersection(origin, direction, inverseDirection, bins.bins[n].min, bins.bins[n].max);\\r\\n                        if (intersection3.x < intersection3.y && intersection3.x > -5.0 && bins.bins[n].end < -1.5 && intersection3.x < closestRealHitT) {\\r\\n                            numIntersected += 2;\\r\\n                            for (var j : i32 = child(n, 0); j < child(n, 8); j++) {\\r\\n                                let intersectionFinal = aabbIntersection(origin, direction, inverseDirection, bins.bins[j].min, bins.bins[j].max);\\r\\n                                if (intersectionFinal.x < intersectionFinal.y && intersectionFinal.x > -0.25 && intersectionFinal.x < closestRealHitT) {\\r\\n                                    numIntersected++;\\r\\n                                    var closestT: f32 = miss.t;\\r\\n                                    for (var a: i32 = i32(bins.bins[j].start); a < i32(bins.bins[j].end); a++) {\\r\\n                                        let hit: Hit = raySphereIntersection(origin, direction, atoms.atoms[a], 1);\\r\\n                                        numRaySphereIntersections++;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (hit.t > intersectionFinal.y || hit.t2 < intersectionFinal.x) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n                                        if (hit.t < miss.t) {\\r\\n                                            let realHit: Hit = raySphereIntersection(origin, direction, atoms.atoms[a], 0);\\r\\n                                            if (closestRealHitT > realHit.t) {\\r\\n                                                closestRealHitAtom = a;\\r\\n                                                closestRealHitT = realHit.t;\\r\\n                                                //todo clean up\\r\\n                                                if (drawSettings.debugA < 0.15 || drawSettings.debugMode >= DM_GroupStart_Transparent) {\\r\\n                                                    closestRealHitT = 1000000;\\r\\n                                                }\\r\\n                                            }\\r\\n                                            if (hit.t < closestT) {\\r\\n                                                closestT = hit.t;\\r\\n                                            }\\r\\n                                        }\\r\\n                                    }\\r\\n                                    if (closestT != miss.t) {\\r\\n                                        insertIntoSortedStack(closestT, j);\\r\\n                                    }\\r\\n                                }\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    intersecting = stackBins[0];\\r\\n    start = start+direction*stackT[0];\\r\\n    let intersectionEnd = aabbIntersection(origin, direction, inverseDirection, bins.bins[stackBins[0]].min, bins.bins[stackBins[0]].max);\\r\\n    end = intersectionEnd.y-stackT[0];\\r\\n    //let binSize = bins.bins[stackBins[0]].max-bins.bins[stackBins[0]].min;\\r\\n    //end = min(max(binSize.x, max(binSize.y, binSize.z)), stackT[1])+drawSettings.kSmoothminScale;\\r\\n    if (drawSettings.debugMode == DM_SkipStackPos0) {\\r\\n        intersecting = stackBins[1];\\r\\n        start = start+direction*stackT[1];\\r\\n        let intersectionEnd = aabbIntersection(origin, direction, inverseDirection, bins.bins[stackBins[1]].min, bins.bins[stackBins[1]].max);\\r\\n        end = intersectionEnd.y-stackT[1];\\r\\n    }\\r\\n    return start;\\r\\n}\\r\\n\\r\\nvar<private> closestRealHitT = 10000000.0;\\r\\nvar<private> closestRealHitAtom = 1;\\r\\nconst binsStackSize = 40;\\r\\nvar<private> binsStack: array<i32, binsStackSize>;\\r\\nfn findIntersectingCellsStack(origin: vec3<f32>, direction: vec3<f32>) -> vec3<f32> {\\r\\n    var closestAABBintersection: vec3<f32> = vec3(-1.0);\\r\\n    let binsAmount = i32(arrayLength(&bins.bins));\\r\\n    let inverseDirection = 1.0/direction;\\r\\n    resetStack();\\r\\n    var lastLayerStart = 0;\\r\\n    for (var i : i32 = 1; i < 16; i++) {\\r\\n        if (lastLayerStart+i32(pow(8.0, f32(i))) >= binsAmount) {\\r\\n            break;\\r\\n        }\\r\\n        lastLayerStart += i32(pow(8.0, f32(i)));\\r\\n    }\\r\\n\\r\\n    let currLayer = 0;\\r\\n    var bv = 0;\\r\\n    var binsStackNum = 0;\\r\\n    for (var i : i32 = 0; i < 8; i++) {\\r\\n        var firstId = getFirstIndexUsingOrigin(origin, i);\\r\\n        binsStack[binsStackNum] = firstId;\\r\\n        binsStackNum++;\\r\\n    }\\r\\n\\r\\n    while (binsStackNum > 0) {\\r\\n        numIntersected += 2;\\r\\n        let curr = binsStack[binsStackNum-1];\\r\\n        binsStackNum--;\\r\\n        for (var i : i32 = child(curr, 0); i < child(curr, 8); i++) {\\r\\n            let intersectionI = aabbIntersection(origin, direction, inverseDirection, bins.bins[i].min, bins.bins[i].max);\\r\\n            if (intersectionI.x < intersectionI.y && intersectionI.x > -0.25 && intersectionI.x < closestRealHitT && (i > lastLayerStart || bins.bins[i].end < -1.5)) {\\r\\n                numIntersected++;\\r\\n                if (i >= lastLayerStart) {\\r\\n                    var closestT: f32 = miss.t;\\r\\n                    for (var a: i32 = i32(bins.bins[i].start); a < i32(bins.bins[i].end); a++) {\\r\\n                        let hit: Hit = raySphereIntersection(origin, direction, atoms.atoms[a], 1);\\r\\n                        numRaySphereIntersections++;\\r\\n                        if (hit.t > intersectionI.y || hit.t2 < intersectionI.x) {\\r\\n                            continue;\\r\\n                        }\\r\\n                        if (hit.t < miss.t) {\\r\\n                            let realHit: Hit = raySphereIntersection(origin, direction, atoms.atoms[a], 0);\\r\\n                            if (closestRealHitT > realHit.t) {\\r\\n                                closestRealHitAtom = a;\\r\\n                                closestRealHitT = realHit.t;\\r\\n                                if (drawSettings.isFullRender > 0.5) {\\r\\n                                    if (drawSettings.debugA < 0.15 || drawSettings.debugMode >= DM_GroupStart_Transparent) {\\r\\n                                        closestRealHitT = 1000000;\\r\\n                                    }\\r\\n                                }\\r\\n                            }\\r\\n                            if (hit.t < closestT) {\\r\\n                                closestT = hit.t;\\r\\n                                if (hit.t < intersectionI.x) {\\r\\n                                    closestT = intersectionI.x;\\r\\n                                }\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                    if (closestT != miss.t) {\\r\\n                        insertIntoSortedStack(closestT, i);\\r\\n                    }\\r\\n                } else {\\r\\n                    binsStack[binsStackNum] = i;\\r\\n                    binsStackNum++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    intersecting = stackBins[0];\\r\\n    start = start+direction*stackT[0];\\r\\n    let intersectionEnd = aabbIntersection(origin, direction, inverseDirection, bins.bins[stackBins[0]].min, bins.bins[stackBins[0]].max);\\r\\n    end = intersectionEnd.y-stackT[0];\\r\\n    //let binSize = bins.bins[stackBins[0]].max-bins.bins[stackBins[0]].min;\\r\\n    //end = min(max(binSize.x, max(binSize.y, binSize.z)), stackT[1])+drawSettings.kSmoothminScale;\\r\\n    if (drawSettings.debugMode == DM_SkipStackPos0) {\\r\\n        intersecting = stackBins[1];\\r\\n        start = start+direction*stackT[1];\\r\\n        let intersectionEnd = aabbIntersection(origin, direction, inverseDirection, bins.bins[stackBins[1]].min, bins.bins[stackBins[1]].max);\\r\\n        end = intersectionEnd.y-stackT[1];\\r\\n    }\\r\\n    return start;\\r\\n}\\r\\n\\r\\nvar<private> depthOutput: f32;\\r\\n\\r\\nconst maxIterations = 500;\\r\\nfn raymarch(initStart: vec3<f32>, rayDirection: vec3<f32>) -> vec4<f32> {\\r\\n    var maxDistance: f32 = -1.0;\\r\\n    var raymarchedAtoms: f32 = bins.bins[intersecting].end-bins.bins[intersecting].start;\\r\\n    var iterationsMultiplier = 1.0;\\r\\n    if (drawSettings.isFullRender < 0.5) {\\r\\n        iterationsMultiplier = 0.125;\\r\\n    }\\r\\n\\r\\n    var t : f32 = 0.0;\\r\\n    var pos : vec3<f32> = vec3(0.0);\\r\\n    var iteration = 0;\\r\\n    var resultColor = vec4(0.0, 0.0, 0.0, 1.0);\\r\\n    if (drawSettings.isFullRender > 0.5) {\\r\\n        resultColor = vec4(0.15, 0.0, 0.15, 1.0);\\r\\n    }\\r\\n    var stackPos = 0;\\r\\n    for (iteration = 0; iteration < i32(f32(maxIterations)*iterationsMultiplier); iteration++) {\\r\\n        pos = start+t*rayDirection;\\r\\n        if (distance(pos, cameraPos.xyz) > maxDistance) { maxDistance = distance(pos, cameraPos.xyz); }\\r\\n\\t\\tlet d = dAtoms(pos);\\r\\n\\t\\tt = t+d;\\r\\n        if (drawSettings.isFullRender < 0.5) {\\r\\n            t += 0.1;\\r\\n        }\\r\\n\\t\\tif (t > end) {\\r\\n            t = end;\\r\\n        }\\r\\n        \\r\\n\\t\\t//if (d < 0.005+0.05*(1-drawSettings.isFullRender)) {\\r\\n        if (d < 0.05) {\\r\\n            resultColor = vec4(-0.25, 0.05, 0.25, 1.0)+dAtomsColor(pos).color/2;\\r\\n            break;\\r\\n\\t\\t}\\r\\n\\t\\tif (t >= end) {\\r\\n            if (drawSettings.allowReset > 0.5) {\\r\\n                t = 0.0;\\r\\n                stackPos++;\\r\\n                if (stackPos == stackSize || stackBins[stackPos] == -1) {\\r\\n                    if (drawSettings.debugMode == DM_Octree1) {\\r\\n                        return debugModeOctree(numRaySphereIntersections, drawSettings.totalAtoms);\\r\\n                    } else if (drawSettings.debugMode == DM_Octree2) {\\r\\n                        return debugModeOctree2(numIntersected, iteration, maxIterations);\\r\\n                    } else if (drawSettings.debugMode == DM_StackSteps) {\\r\\n                        return debugModeSteps(stackPos, stackSize);\\r\\n                    }\\r\\n                    if (stackPos == stackSize && drawSettings.debugB > 0.5) {\\r\\n                        return vec4(10.15, 10.0, 0.15, 1.0);\\r\\n                    }\\r\\n                    return vec4(0.15, 0.0, 0.15, 1.0);\\r\\n                }\\r\\n\\r\\n                intersecting = stackBins[stackPos];\\r\\n                start = initStart.xyz+rayDirection*stackT[stackPos];\\r\\n                let intersectionEnd = aabbIntersection(initStart.xyz, rayDirection, 1.0/rayDirection, bins.bins[intersecting].min, bins.bins[intersecting].max);\\r\\n                end = intersectionEnd.y-stackT[stackPos];\\r\\n                //todo: clean up code.\\r\\n                //todo: preprocessor macros? shader variations?\\r\\n                //let binSize = bins.bins[intersecting].max-bins.bins[intersecting].min;\\r\\n                //end = max(binSize.x, max(binSize.y, binSize.z));\\r\\n                raymarchedAtoms += bins.bins[intersecting].end-bins.bins[intersecting].start;\\r\\n            } else {\\r\\n                resultColor = vec4(0.0, 0.0, 0.0, 1.0);\\r\\n                break;\\r\\n            }\\r\\n\\t\\t}\\r\\n\\t}\\r\\n    if (iteration == maxIterations && drawSettings.debugB > 0.9) {\\r\\n        resultColor = vec4(10.05, 10.05, 10.95, 1.0);\\r\\n    } else if (iteration == maxIterations && drawSettings.debugB <= 0.9) {\\r\\n        let sdfResult = dAtomsColor(pos);\\r\\n        resultColor = vec4(-0.25, 0.05, 0.25, 1.0)+sdfResult.color/2;\\r\\n    }\\r\\n\\r\\n    let limitsSize = drawSettings.maxLimit.xyz-drawSettings.minLimit.xyz;\\r\\n    let limitsMax = max(max(limitsSize.x, limitsSize.y), limitsSize.z);\\r\\n    let center = drawSettings.minLimit.xyz+limitsSize/2;\\r\\n    let sphereInitStart = normalize(center-cameraPos.xyz)*limitsMax;\\r\\n    let cameraDistance = distance(sphereInitStart, pos);\\r\\n    let distanceFade = pow(cameraDistance/(limitsMax*1.2), 1.0+drawSettings.debugA*2);\\r\\n    depthOutput = distance(cameraPos.xyz, pos);\\r\\n    //todo: mode with ambient occlusion?\\r\\n    if (drawSettings.debugMode == DM_Default) {\\r\\n        //default\\r\\n        return resultColor*distanceFade;\\r\\n    } else if (drawSettings.debugMode == DM_DefaultBright) {\\r\\n        return debugModeBright(resultColor, distanceFade);\\r\\n    } else if (drawSettings.debugMode == DM_DefaultWithBase) {\\r\\n        return debugModeDefaultWithBase(resultColor, distanceFade, closestRealHitT, getAtomColor(atoms.atoms[closestRealHitAtom].number), distance(initStart, pos));\\r\\n    } else if (drawSettings.debugMode == DM_SemiLit) {\\r\\n        return debugModeSemilit(resultColor, distanceFade, findNormal(pos));\\r\\n    } else if (drawSettings.debugMode == DM_Lit) {\\r\\n        return debugModeLit(resultColor, distanceFade, findNormal(pos));\\r\\n    } else if (drawSettings.debugMode == DM_LitGooch) {\\r\\n        return debugModeGooch(resultColor, distanceFade, findNormal(pos));\\r\\n    } else if (drawSettings.debugMode == DM_Iterations) {\\r\\n        return debugModeIterations(iteration*5, maxIterations);\\r\\n    } else if (drawSettings.debugMode == DM_Octree1) {\\r\\n        return debugModeOctree(numRaySphereIntersections, drawSettings.totalAtoms);\\r\\n    } else if (drawSettings.debugMode == DM_Octree2) {\\r\\n        return debugModeOctree2(numIntersected, iteration, maxIterations);\\r\\n    } else if (drawSettings.debugMode == DM_Octree3) {\\r\\n        return debugModeOctree3(numRaySphereIntersections, numIntersected, intersecting);\\r\\n    } else if (drawSettings.debugMode == DM_Depth) {\\r\\n        return debugModeDepth(maxDistance);\\r\\n    } else if (drawSettings.debugMode == DM_Normals) {\\r\\n        return debugModeNormals(findNormal(pos));\\r\\n    } else if (drawSettings.debugMode == DM_TransparentFake1) {\\r\\n        return debugModeFakeTransparency(resultColor, distanceFade, distance(initStart, pos), initStart, rayDirection);\\r\\n    } else if (drawSettings.debugMode == DM_TransparentFake2) {\\r\\n        //todo fake transparency with const color but somehow scale it according to the result color? (justt grayscale it?)\\r\\n        //todo: transparency with const color but somehow also scaled by result color (or lighting?)\\r\\n        return debugModeFakeTransparency2(resultColor, distanceFade, distance(initStart, pos), initStart, rayDirection);\\r\\n    } else if (drawSettings.debugMode == DM_StackSteps) {\\r\\n        return debugModeSteps(stackPos, stackSize);\\r\\n    } else if (drawSettings.debugMode == DM_RaymarchedAtoms) {\\r\\n        return debugModeRaymarchedAtoms(raymarchedAtoms);\\r\\n    } else if (drawSettings.debugMode == DM_TToEnd) {\\r\\n        return debugModeTEnd(t, end);\\r\\n    } else if (drawSettings.debugMode == DM_AllStepsDistance) {\\r\\n        return debugModeDepth(end*30);\\r\\n    } else if (drawSettings.debugMode == DM_DebugCombined) {\\r\\n        return debugModeDebug(numRaySphereIntersections, numIntersected, intersecting, stackPos, resultColor, iteration, closestRealHitT);\\r\\n    } else if (drawSettings.debugMode == DM_BlankStackPos0) {\\r\\n        return debugModeHideStackPos(resultColor, stackPos, 0, distanceFade);\\r\\n    } else if (drawSettings.debugMode == DM_BlankStackPos1) {\\r\\n        return debugModeHideStackPos(resultColor, stackPos, 1, distanceFade);\\r\\n    } else if (drawSettings.debugMode == DM_BlankStackPos2) {\\r\\n        return debugModeHideStackPos(resultColor, stackPos, 2, distanceFade);\\r\\n    } else if (drawSettings.debugMode == DM_BlankStackPos3) {\\r\\n        return debugModeHideStackPos(resultColor, stackPos, 3, distanceFade);\\r\\n    } else if (drawSettings.debugMode == DM_BlankStackPos4) {\\r\\n        return debugModeHideStackPos(resultColor, stackPos, 4, distanceFade);\\r\\n    } else if (drawSettings.debugMode == DM_BlankStackPos5) {\\r\\n        return debugModeHideStackPos(resultColor, stackPos, 5, distanceFade);\\r\\n    } else if (drawSettings.debugMode == DM_BlankStackPos6) {\\r\\n        return debugModeHideStackPos(resultColor, stackPos, 6, distanceFade);\\r\\n    } else if (drawSettings.debugMode == DM_BlankStackPos7) {\\r\\n        return debugModeHideStackPos(resultColor, stackPos, 7, distanceFade);\\r\\n    } else if (drawSettings.debugMode == DM_SkipStackPos0) {\\r\\n        return resultColor*distanceFade; //skip step0\\r\\n    }\\r\\n    return resultColor*distanceFade;\\r\\n}\\r\\n\\r\\nfn raymarchTransparent(initStart: vec3<f32>, rayDirection: vec3<f32>) -> vec4<f32> {\\r\\n    var maxDistance: f32 = -1.0;\\r\\n    var raymarchedAtoms: f32 = bins.bins[intersecting].end-bins.bins[intersecting].start;\\r\\n    var iterationsMultiplier = 1.0;\\r\\n    if (drawSettings.isFullRender < 0.5) {\\r\\n        iterationsMultiplier = 0.05;\\r\\n    }\\r\\n\\r\\n    var t : f32 = 0.0;\\r\\n    var pos : vec3<f32> = vec3(0.0);\\r\\n    var iteration = 0;\\r\\n    let startColor = vec4(-0.25, 0.05, 0.25, 1.0);\\r\\n    var resultColor = startColor;\\r\\n    var stackPos = 0;\\r\\n    var insideStartT = -10000.0;\\r\\n    //todo: add limit iterations slider\\r\\n\\tfor (iteration = 0; iteration < i32(f32(maxIterations)*iterationsMultiplier); iteration++) {\\r\\n\\t\\tpos = start+t*rayDirection;\\r\\n        if (distance(pos, cameraPos.xyz) > maxDistance) { maxDistance = distance(pos, cameraPos.xyz); }\\r\\n\\t\\tlet d = dAtoms(pos);\\r\\n\\t\\tif (d < 0.05) {\\r\\n            if (drawSettings.debugMode == DM_Transparent3) {\\r\\n                resultColor += vec4(0.01, 0.01, 0.01, 0.0)*mix(0.1, 3, drawSettings.debugA)*mix(1, 0, clamp((d+0.75), 0, 1));\\r\\n            } else if (drawSettings.debugMode == DM_Transparent2) {\\r\\n                resultColor += (dAtomsColor(pos).color/50)*mix(0.1, 3, drawSettings.debugA);\\r\\n            } else if (drawSettings.debugMode == DM_TransparentDistance) {\\r\\n                if (insideStartT == -10000.0) {\\r\\n                    insideStartT = t;\\r\\n                }\\r\\n            } else if (drawSettings.debugMode == DM_TransparentConst) {\\r\\n                resultColor += vec4(0.005, 0.005, 0.005, 0.0)*mix(0.1, 3, drawSettings.debugA);\\r\\n            } else {\\r\\n                resultColor += vec4(0.01, 0.01, 0.01, 0.0)*mix(0.1, 3, drawSettings.debugA);\\r\\n            }\\r\\n            if (drawSettings.debugMode == DM_TransparentConst) {\\r\\n                t = t+mix(0.025, 0.15, drawSettings.debugB);\\r\\n            } else {\\r\\n                t = t+abs(d)+mix(0, 0.05, drawSettings.debugB);\\r\\n            }\\r\\n\\t\\t} else {\\r\\n            if (drawSettings.debugMode == DM_TransparentDistance) {\\r\\n                if (insideStartT != -10000.0) {\\r\\n                    resultColor += vec4(0.01, 0.01, 0.01, 0.0)*mix(0.1, 3, drawSettings.debugA)*(t-insideStartT)*5;\\r\\n                    insideStartT = -10000.0;\\r\\n                }\\r\\n            }\\r\\n            //TODO try different smoothmin functions\\r\\n            t = t+abs(d);\\r\\n            if (drawSettings.isFullRender < 0.5) {\\r\\n                t += 0.1;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n\\t\\tif (t >= end) {\\r\\n            if (drawSettings.debugMode == DM_TransparentDistance) {\\r\\n                if (insideStartT != -10000.0) {\\r\\n                    resultColor += vec4(0.01, 0.01, 0.01, 0.0)*mix(0.1, 3, drawSettings.debugA)*(t-insideStartT)*5;\\r\\n                    insideStartT = -10000.0;\\r\\n                }\\r\\n            }\\r\\n            stackPos++;\\r\\n            if (stackPos == stackSize || stackBins[stackPos] == -1) {\\r\\n                break;\\r\\n            }\\r\\n            start = initStart.xyz+rayDirection*max(stackT[stackPos], t+0.05);\\r\\n            //let intersectionEnd = aabbIntersection(start, rayDirection, 1.0/rayDirection, bins.bins[stackPos].min, bins.bins[stackPos].max);\\r\\n            //end = intersectionEnd.y+0.25;\\r\\n            let binSize = bins.bins[stackBins[stackPos]].max-bins.bins[stackBins[stackPos]].min;\\r\\n            end = max(binSize.x, max(binSize.y, binSize.z));\\r\\n            t = 0.0;\\r\\n            intersecting = stackBins[stackPos];\\r\\n            raymarchedAtoms += bins.bins[intersecting].end-bins.bins[intersecting].start;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n    if (distance(resultColor, startColor) < 0.009) {\\r\\n        return vec4(0.15, 0.0, 0.15, 1.0);\\r\\n    }\\r\\n    /*if (iteration == maxIterations && drawSettings.debugB > 0.9) {\\r\\n        resultColor = vec4(10.05, 10.05, 10.95, 1.0);\\r\\n    } else if (iteration == maxIterations && drawSettings.debugB <= 0.9) {\\r\\n        let sdfResult = dAtomsColor(pos);\\r\\n        resultColor = vec4(-0.25, 0.05, 0.25, 1.0)+sdfResult.color/2;\\r\\n    }*/\\r\\n\\r\\n    let limitsSize = drawSettings.maxLimit.xyz-drawSettings.minLimit.xyz;\\r\\n    let limitsMax = max(max(limitsSize.x, limitsSize.y), limitsSize.z);\\r\\n    let center = drawSettings.minLimit.xyz+limitsSize/2;\\r\\n    let sphereInitStart = normalize(center-cameraPos.xyz)*limitsMax;\\r\\n    let cameraDistance = distance(sphereInitStart, pos);\\r\\n    let distanceFade = pow(cameraDistance/(limitsMax*1.2), 1.0+drawSettings.debugA*2);\\r\\n    return resultColor;\\r\\n}\\r\\n\\r\\nstruct FragmentOutput {\\r\\n    @builtin(frag_depth) depth: f32,\\r\\n    @location(0) color: vec4<f32>\\r\\n}\\r\\n\\r\\n@fragment\\r\\nfn fs_main(@builtin(position) position: vec4<f32>, @location(0) vPos: vec4<f32>) -> FragmentOutput {\\r\\n    let screenPos = vPos;\\r\\n\\r\\n    // ray direction in normalized device coordinate\\r\\n    let ndcRay = vec4(screenPos.xy, 1.0, 1.0);\\r\\n\\r\\n    // convert ray direction from normalized device coordinate to world coordinate\\r\\n    let rayDirection: vec3<f32> = normalize((inverseVpMatrix * ndcRay).xyz);\\r\\n    //let rayDirection : vec3<f32> = ndcRay.xyz;\\r\\n    start = cameraPos.xyz; \\r\\n    \\r\\n    let margin = max(drawSettings.atomsScale, drawSettings.kSmoothminScale);\\r\\n    let limitsSize = drawSettings.maxLimit.xyz-drawSettings.minLimit.xyz;\\r\\n    let limitsMax = max(max(limitsSize.x, limitsSize.y), limitsSize.z);\\r\\n    let boundaryIntersection : vec2<f32> = aabbIntersection(start, rayDirection, 1.0/rayDirection, drawSettings.minLimit.xyz, drawSettings.maxLimit.xyz);\\r\\n    if (boundaryIntersection.x < boundaryIntersection.y && boundaryIntersection.x > -30) {\\r\\n        if (boundaryIntersection.x > 0) {\\r\\n            start = start+rayDirection*boundaryIntersection.x;\\r\\n        }\\r\\n    } else if (boundaryIntersection.x >= boundaryIntersection.y) {\\r\\n        return FragmentOutput(depthOutput, vec4(0.15, 0.0, 0.15, 1.0));\\r\\n    }\\r\\n\\r\\n    let initStart = start;\\r\\n\\r\\n    var closestAABB: vec3<f32>;\\r\\n    if (drawSettings.treeLayers == 4) {\\r\\n        closestAABB = findIntersectingCells(start, rayDirection);\\r\\n    } else {\\r\\n        closestAABB = findIntersectingCellsStack(start, rayDirection);\\r\\n    }\\r\\n    \\r\\n    if (drawSettings.debugMode == DM_Octree3) {\\r\\n        return FragmentOutput(depthOutput, debugModeOctree3(numRaySphereIntersections, numIntersected, intersecting));\\r\\n    }\\r\\n    if (intersecting == -1) {\\r\\n        if (drawSettings.debugMode == DM_Octree1) {\\r\\n            return FragmentOutput(depthOutput, debugModeOctree(numRaySphereIntersections, drawSettings.totalAtoms));\\r\\n        } else if (drawSettings.debugMode == DM_Octree2) {\\r\\n            return FragmentOutput(depthOutput, debugModeOctree2(numIntersected, 0, maxIterations));\\r\\n        }\\r\\n        return FragmentOutput(depthOutput, vec4(0.15, 0.0, 0.15, 1.0));\\r\\n    }\\r\\n    //start = start+rayDirection*(closestAABB.x-10.0);\\r\\n\\r\\n    if (drawSettings.debugMode == DM_FirstStepDistance) {\\r\\n        return FragmentOutput(depthOutput, debugModeDepth(end*30));\\r\\n    }\\r\\n    if (drawSettings.debugMode == DM_Transparent1 || drawSettings.debugMode == DM_Transparent2 || drawSettings.debugMode == DM_Transparent3 \\r\\n        || drawSettings.debugMode == DM_TransparentDistance || drawSettings.debugMode == DM_TransparentConst) {\\r\\n        return FragmentOutput(depthOutput, raymarchTransparent(initStart, rayDirection));\\r\\n    }\\r\\n    return FragmentOutput(depthOutput, raymarch(initStart, rayDirection));\\r\\n}\\r\\n\\r\\n//utilities.wgsl inserted here\\r\\n//drawModeDefinitions.wgsl inserted here\\r\\n\"","export default \"// vertex shader\\n\\nstruct Uniforms {\\n    mvpMatrix : mat4x4<f32>,\\n};\\n@binding(0) @group(0) var<uniform> uniforms : Uniforms;\\n\\nstruct Output {\\n    @builtin(position) Position : vec4<f32>,\\n    @location(0) vColor : vec4<f32>,\\n};\\n\\n@vertex\\nfn vs_main(@location(0) pos: vec4<f32>, @location(1) color: vec4<f32>) -> Output {\\n    var output: Output;\\n    output.Position = uniforms.mvpMatrix * pos;\\n    output.vColor = color;\\n    return output;\\n}\\n\\n// fragment shader\\n\\n @fragment\\nfn fs_main(@location(0) vColor: vec4<f32>) -> @location(0) vec4<f32> {\\n    return vColor;\\n}\"","export default \"//rewritten from https://github.com/kbinani/colormap-shaders/tree/master/shaders/glsl to wgsl\\r\\nfn hsv2rgb(h: f32, s: f32, v: f32) -> vec4<f32> {\\r\\n\\tvar r = v;\\r\\n\\tvar g = v;\\r\\n\\tvar b = v;\\r\\n\\tif (s > 0.0) {\\r\\n\\t\\tlet i = i32(h*6.0);\\r\\n\\t\\tlet f = h*6.0 - f32(i);\\r\\n\\t\\tif (i == 1) {\\r\\n            r *= 1.0 - s * f;\\r\\n            b *= 1.0 - s;\\r\\n\\t\\t} else if (i == 2) {\\r\\n\\t\\t\\tr *= 1.0 - s;\\r\\n\\t\\t\\tb *= 1.0 - s * (1.0 - f);\\r\\n\\t\\t} else if (i == 3) {\\r\\n\\t\\t\\tr *= 1.0 - s;\\r\\n\\t\\t\\tg *= 1.0 - s * f;\\r\\n\\t\\t} else if (i == 4) {\\r\\n\\t\\t\\tr *= 1.0 - s * (1.0 - f);\\r\\n\\t\\t\\tg *= 1.0 - s;\\r\\n\\t\\t} else if (i == 5) {\\r\\n\\t\\t\\tg *= 1.0 - s;\\r\\n\\t\\t\\tb *= 1.0 - s * f;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tg *= 1.0 - s * (1.0 - f);\\r\\n\\t\\t\\tb *= 1.0 - s;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn vec4(r, g, b, 1.0);\\r\\n}\\r\\n\\r\\n//IDL_Haze\\r\\nfn colormap_haze_red(x: f32) -> f32 {\\r\\n    if (x < 0.0) {\\r\\n        return 167.0;\\r\\n    } else if (x < (2.54491177159840E+02 + 2.49117061281287E+02) / (1.94999353031535E+00 + 1.94987400471999E+00)) {\\r\\n        return -1.94987400471999E+00 * x + 2.54491177159840E+02;\\r\\n    } else if (x <= 255.0) {\\r\\n        return 1.94999353031535E+00 * x - 2.49117061281287E+02;\\r\\n    } else {\\r\\n        return 251.0;\\r\\n    }\\r\\n}\\r\\n\\r\\nfn colormap_haze_green(x: f32) -> f32 {\\r\\n    if (x < 0.0) {\\r\\n        return 112.0;\\r\\n    } else if (x < (2.13852573128775E+02 + 1.42633630462899E+02) / (1.31530121382008E+00 + 1.39181683887691E+00)) {\\r\\n        return -1.39181683887691E+00 * x + 2.13852573128775E+02;\\r\\n    } else if (x <= 255.0) {\\r\\n        return 1.31530121382008E+00 * x - 1.42633630462899E+02;\\r\\n    } else {\\r\\n        return 195.0;\\r\\n    }\\r\\n}\\r\\n\\r\\nfn colormap_haze_blue(x: f32) -> f32 {\\r\\n    if (x < 0.0) {\\r\\n        return 255.0;\\r\\n    } else if (x <= 255.0) {\\r\\n        return -9.84241021836929E-01 * x + 2.52502692064968E+02;\\r\\n    } else {\\r\\n        return 0.0;\\r\\n    }\\r\\n}\\r\\n\\r\\nfn colormap_haze(x: f32) -> vec4<f32> {\\r\\n    let t = x * 255.0;\\r\\n    let r = colormap_haze_red(t) / 255.0;\\r\\n    let g = colormap_haze_green(t) / 255.0;\\r\\n    let b = colormap_haze_blue(t) / 255.0;\\r\\n    return vec4(r, g, b, 1.0);\\r\\n}\\r\\n\\r\\n//transform_hot_metal modified for higher range\\r\\nfn colormap_hotmetal_red(x: f32) -> f32 {\\r\\n    if (x < 0.0) {\\r\\n        return 0.0;\\r\\n    } else if (x <= 0.57147) {\\r\\n        return 446.22 * x / 255.0;\\r\\n    } else {\\r\\n       return 1.0;\\r\\n    }\\r\\n}\\r\\n\\r\\nfn colormap_hotmetal_green(x: f32) -> f32 {\\r\\n\\tif (x < 2.5) {\\r\\n\\t\\tif (x < 0.6) {\\r\\n\\t\\t\\treturn 0.0;\\r\\n\\t\\t} else if (x <= 0.95) {\\r\\n\\t\\t\\treturn ((x - 0.6) * 728.57) / 255.0;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\treturn 1.0;\\r\\n\\t\\t}\\r\\n\\t} else {\\r\\n\\t\\treturn (4.0-x)/1.5;\\r\\n\\t}\\r\\n}\\r\\n\\r\\nfn colormap_hotmetal_blue(x: f32) -> f32 {\\r\\n    if (x > 0) {\\r\\n        return 0.05;\\r\\n    } else if (x > 1) {\\r\\n        return 0.05+(x-1)/3;\\r\\n    }\\r\\n    return 0.0;\\r\\n}\\r\\n\\r\\nfn colormap_hotmetal(x: f32) -> vec4<f32> {\\r\\n    return vec4(colormap_hotmetal_red(min(x, 1)), colormap_hotmetal_green(x), colormap_hotmetal_blue(x), 1.0);\\r\\n}\\r\\n\\r\\n//IDL_Eos_B\\r\\nfn colormap_eosb_h(x: f32) -> f32 {\\r\\n\\tif (x < 0.1167535483837128) {\\r\\n\\t\\treturn 2.0 / 3.0; // H1\\r\\n\\t} else if (x < 0.1767823398113251) {\\r\\n\\t\\treturn ((-3.19659402385354E+02 * x + 1.14469539590179E+02) * x - 1.52210982227697E+01) * x + 1.39214703883044E+00; // H2\\r\\n\\t} else if (x < 0.2266354262828827) {\\r\\n\\t\\treturn ((-3.55166097640991E+02 * x + 2.51218596935272E+02) * x - 6.08853752315044E+01) * x + 5.38727123476564E+00; // H3\\r\\n\\t} else if (x < (6.95053970124612E-01 - 4.13725796136428E-01) / (1.48914458632691E+00 - 6.97458630656247E-01)) {\\r\\n\\t\\treturn -1.48914458632691E+00 * x + 6.95053970124612E-01; // H4\\r\\n\\t} else if (x < (4.13725796136428E-01 - 2.48329223043123E-01) / (6.97458630656247E-01 - 3.48617475202321E-01)) {\\r\\n\\t\\treturn -6.97458630656247E-01 * x + 4.13725796136428E-01; // H5\\r\\n\\t} else {\\r\\n\\t\\treturn -3.48617475202321E-01 * x + 2.48329223043123E-01; // H6\\r\\n\\t}\\r\\n}\\r\\n\\r\\nfn colormap_eosb_v(x: f32) -> f32 {\\r\\n\\tvar v = 1.0;\\r\\n\\tif (x < 0.115834504365921) {\\r\\n\\t\\tv = 4.18575376272140E+00 * x + 5.15145240089963E-01; // V1-Hi\\r\\n\\t} else if (x < (1.90980360972022E+00 + 9.13724751363001E-01) / (7.87450639585523E+00 + 7.87450803534638E+00)) {\\r\\n\\t\\tv = -7.87450803534638E+00 * x + 1.90980360972022E+00; // V2-Hi\\r\\n\\t} else if (x < 0.5) {\\r\\n\\t\\tv = 7.87450639585523E+00 * x - 9.13724751363001E-01; // V3-Hi\\r\\n\\t} else {\\r\\n\\t\\tv = -1.87540494049556E+00 * x + 2.33603077812338E+00; // V4-Hi\\r\\n\\t}\\r\\n\\tv = clamp(v, 0.0, 1.0);\\r\\n\\r\\n\\tlet period = 4.0 / 105.0;\\r\\n\\tlet len = 3.0 / 252.0;\\r\\n\\tlet t = (x + 7.0 / 252.0)%period;\\r\\n\\tif (0.0 <= t && t < len) {\\r\\n\\t\\tif (x < 0.115834504365921) {\\r\\n\\t\\t\\tv = 3.74113124408467E+00 * x + 4.64654322955584E-01; // V1-Lo\\r\\n\\t\\t} else if (x < (1.90980360972022E+00 + 9.13724751363001E-01) / (7.87450639585523E+00 + 7.87450803534638E+00)) {\\r\\n\\t\\t\\tv = -3.97326878048783E+00 * x + 1.25308500609757E+00; // V2-Lo\\r\\n\\t\\t} else if (x < 0.25) {\\r\\n\\t\\t\\tv = 6.99297032967038E+00 * x - 8.03946549450558E-01; // V3-Lo\\r\\n\\t\\t} else if (x < 0.72) {\\r\\n\\t\\t\\tv -= 26.0 / 255.0;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tv = -1.67870020621040E+00 * x + 2.09414636280895E+00; // V4-Lo\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\treturn v;\\r\\n}\\r\\n\\r\\nfn colormap_eosb(x: f32) -> vec4<f32> {\\r\\n\\tlet h = colormap_eosb_h(clamp(x, 0.0, 1.0));\\r\\n\\tlet s = 1.0;\\r\\n\\tlet v = colormap_eosb_v(clamp(x, 0.0, 1.0));\\r\\n\\treturn hsv2rgb(h, s, v);\\r\\n}\\r\\n\\r\\n//IDL_Red_Temperature\\r\\nfn colormap_temperature_red(x: f32) -> f32 {\\r\\n    return 1.448953446096850 * x - 5.02253539008443e-1;\\r\\n}\\r\\n\\r\\nfn colormap_temperature_green(x: f32) -> f32 {\\r\\n    return 1.889376646180860 * x - 2.272028094820020e2;\\r\\n}\\r\\n\\r\\nfn colormap_temperature_blue(x: f32) -> f32 {\\r\\n    return 3.92613636363636 * x - 7.46528409090909e+2;\\r\\n}\\r\\n\\r\\nfn colormap_temperature(x: f32) -> vec4<f32> {\\r\\n    let t = x * 255.0;\\r\\n    let r = clamp(colormap_temperature_red(t) / 255.0, 0.0, 1.0);\\r\\n    let g = clamp(colormap_temperature_green(t) / 255.0, 0.0, 1.0);\\r\\n    let b = clamp(colormap_temperature_blue(t) / 255.0, 0.0, 1.0);\\r\\n    return vec4(r, g, b, 1.0);\\r\\n}\\r\\n\\r\\n//IDL_CB-Spectral\\r\\nfn colormap_spectral_red(x: f32) -> f32 {\\r\\n\\tif (x < 0.09752005946586478) {\\r\\n\\t\\treturn 5.63203907203907E+02 * x + 1.57952380952381E+02;\\r\\n\\t} else if (x < 0.2005235116443438) {\\r\\n\\t\\treturn 3.02650769230760E+02 * x + 1.83361538461540E+02;\\r\\n\\t} else if (x < 0.2974133397506856) {\\r\\n\\t\\treturn 9.21045429665647E+01 * x + 2.25581007115501E+02;\\r\\n\\t} else if (x < 0.5003919130598823) {\\r\\n\\t\\treturn 9.84288115246108E+00 * x + 2.50046722689075E+02;\\r\\n\\t} else if (x < 0.5989021956920624) {\\r\\n\\t\\treturn -2.48619704433547E+02 * x + 3.79379310344861E+02;\\r\\n\\t} else if (x < 0.902860552072525) {\\r\\n\\t\\treturn ((2.76764884219295E+03 * x - 6.08393126459837E+03) * x + 3.80008072407485E+03) * x - 4.57725185424742E+02;\\r\\n\\t} else {\\r\\n\\t\\treturn 4.27603478260530E+02 * x - 3.35293188405479E+02;\\r\\n\\t}\\r\\n}\\r\\n\\r\\nfn colormap_spectral_green(x: f32) -> f32 {\\r\\n\\tif (x < 0.09785836420571035) {\\r\\n\\t\\treturn 6.23754529914529E+02 * x + 7.26495726495790E-01;\\r\\n\\t} else if (x < 0.2034012006283468) {\\r\\n\\t\\treturn 4.60453201970444E+02 * x + 1.67068965517242E+01;\\r\\n\\t} else if (x < 0.302409765476316) {\\r\\n\\t\\treturn 6.61789401709441E+02 * x - 2.42451282051364E+01;\\r\\n\\t} else if (x < 0.4005965758690823) {\\r\\n\\t\\treturn 4.82379130434784E+02 * x + 3.00102898550747E+01;\\r\\n\\t} else if (x < 0.4981907026473237) {\\r\\n\\t\\treturn 3.24710622710631E+02 * x + 9.31717541717582E+01;\\r\\n\\t} else if (x < 0.6064345916502067) {\\r\\n\\t\\treturn -9.64699507389807E+01 * x + 3.03000000000023E+02;\\r\\n\\t} else if (x < 0.7987472620841592) {\\r\\n\\t\\treturn -2.54022986425337E+02 * x + 3.98545610859729E+02;\\r\\n\\t} else {\\r\\n\\t\\treturn -5.71281628959223E+02 * x + 6.51955082956207E+02;\\r\\n\\t}\\r\\n}\\r\\n\\r\\nfn colormap_spectral_blue(x: f32) -> f32 {\\r\\n\\tif (x < 0.0997359608740309) {\\r\\n\\t\\treturn 1.26522393162393E+02 * x + 6.65042735042735E+01;\\r\\n\\t} else if (x < 0.1983790695667267) {\\r\\n\\t\\treturn -1.22037851037851E+02 * x + 9.12946682946686E+01;\\r\\n\\t} else if (x < 0.4997643530368805) {\\r\\n\\t\\treturn (5.39336225400169E+02 * x + 3.55461986381562E+01) * x + 3.88081126069087E+01;\\r\\n\\t} else if (x < 0.6025972254407099) {\\r\\n\\t\\treturn -3.79294261294313E+02 * x + 3.80837606837633E+02;\\r\\n\\t} else if (x < 0.6990141388105746) {\\r\\n\\t\\treturn 1.15990231990252E+02 * x + 8.23805453805459E+01;\\r\\n\\t} else if (x < 0.8032653181119567) {\\r\\n\\t\\treturn 1.68464957265204E+01 * x + 1.51683418803401E+02;\\r\\n\\t} else if (x < 0.9035796343050095) {\\r\\n\\t\\treturn 2.40199023199020E+02 * x - 2.77279202279061E+01;\\r\\n\\t} else {\\r\\n\\t\\treturn -2.78813846153774E+02 * x + 4.41241538461485E+02;\\r\\n\\t}\\r\\n}\\r\\n\\r\\nfn colormap_spectral(x: f32) -> vec4<f32> {\\r\\n\\tlet r = clamp(colormap_spectral_red(x) / 255.0, 0.0, 1.0);\\r\\n\\tlet g = clamp(colormap_spectral_green(x) / 255.0, 0.0, 1.0);\\r\\n\\tlet b = clamp(colormap_spectral_blue(x) / 255.0, 0.0, 1.0);\\r\\n\\treturn vec4(r, g, b, 1.0);\\r\\n}\\r\\n\\r\\n//modified IDL_Green-White_Linear\\r\\nfn colormap_greenwhite_red(x: f32) -> f32 {\\r\\n    return 1.61361058036781E+00 * x - 1.55391688559828E+02;\\r\\n}\\r\\n\\r\\nfn colormap_greenwhite_green(x: f32) -> f32 {\\r\\n    return 9.99817607003891E-01 * x + 1.01544260700389E+00;\\r\\n}\\r\\n\\r\\nfn colormap_greenwhite_blue(x: f32) -> f32 {\\r\\n    return 3.44167852062589E+00 * x - 6.19885917496444E+02;\\r\\n}\\r\\n\\r\\nfn colormap_greenwhite(x: f32) -> vec4<f32> {\\r\\n    let t = x * 255.0;\\r\\n    let r = clamp(colormap_greenwhite_red(t) / 255.0, 0.0, 1.0);\\r\\n    let g = clamp(colormap_greenwhite_green(t) / 255.0, 0.0, 1.0);\\r\\n    let b = clamp(colormap_greenwhite_blue(t) / 255.0, 0.0, 1.0);\\r\\n    return vec4(g, r, b, 1.0);\\r\\n}\\r\\n\\r\\n//transform_supernova\\r\\nfn colormap_supernova_f1(x: f32) -> f32 {\\r\\n    return (0.3647 * x + 164.02) * x + 154.21;\\r\\n}\\r\\n\\r\\nfn colormap_supernova_f2(x: f32) -> f32 {\\r\\n    return (126.68 * x + 114.35) * x + 0.1551;\\r\\n}\\r\\n\\r\\nfn colormap_supernova_red(x: f32) -> f32 {\\r\\n    if (x < 0.0) {\\r\\n        return 0.0;\\r\\n    } else if (x < 0.136721748106749) {\\r\\n        return colormap_supernova_f2(x) / 255.0;\\r\\n    } else if (x < 0.23422409711017) {\\r\\n        return (1789.6 * x - 226.52) / 255.0;\\r\\n    } else if (x < 0.498842730309711) {\\r\\n        return colormap_supernova_f1(x) / 255.0;\\r\\n    } else if (x < 0.549121259378134) {\\r\\n        return (-654.951781800243 * x + 562.838873112072) / 255.0;\\r\\n    } else if (x < 1.0) {\\r\\n        return ((3.6897 * x + 11.125) * x + 223.15) / 255.0;\\r\\n    } else {\\r\\n        return 237.0 / 255.0;\\r\\n    }\\r\\n}\\r\\n\\r\\nfn colormap_supernova_green(x: f32) -> f32 {\\r\\n    if (x < 0.0) {\\r\\n        return 154.0 / 255.0;\\r\\n    } else if (x < 3.888853260731947e-2) {\\r\\n        return colormap_supernova_f1(x) / 255.0;\\r\\n    } else if (x < 0.136721748106749e0) {\\r\\n        return (-1455.86353067466 * x + 217.205447330541) / 255.0;\\r\\n    } else if (x < 0.330799131955394) {\\r\\n        return colormap_supernova_f2(x) / 255.0;\\r\\n    } else if (x < 0.498842730309711) {\\r\\n        return (1096.6 * x - 310.91) / 255.0;\\r\\n    } else if (x < 0.549121259378134) {\\r\\n        return colormap_supernova_f1(x) / 255.0;\\r\\n    } else {\\r\\n        return 244.0 / 255.0;\\r\\n    }\\r\\n}\\r\\n\\r\\nfn colormap_supernova_blue(x: f32) -> f32 {\\r\\n    if (x < 0.0) {\\r\\n        return 93.0 / 255.0;\\r\\n    } else if (x < 3.888853260731947e-2) {\\r\\n        return (1734.6 * x + 93.133) / 255.0;\\r\\n    } else if (x < 0.234224097110170) {\\r\\n        return colormap_supernova_f1(x) / 255.0;\\r\\n    } else if (x < 0.330799131955394) {\\r\\n        return (-1457.96598791534 * x + 534.138211325166) / 255.0;\\r\\n    } else if (x < 0.549121259378134) {\\r\\n        return colormap_supernova_f2(x) / 255.0;\\r\\n    } else if (x < 1.0) {\\r\\n        return ((3.8931 * x + 176.32) * x + 3.1505) / 255.0;\\r\\n    } else {\\r\\n        return 183.0 / 255.0;\\r\\n    }\\r\\n}\\r\\n\\r\\nfn colormap_supernova(x: f32) -> vec4<f32> {\\r\\n    return vec4(colormap_supernova_red(x), colormap_supernova_green(x), colormap_supernova_blue(x), 1.0);\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nfn debugModeIterations(iteration: i32, maxIterations: i32) -> vec4<f32> {\\r\\n\\treturn colormap_hotmetal(f32(iteration)/f32(maxIterations));\\r\\n}\\r\\n\\r\\nfn debugModeOctree(numRaySphereIntersections: i32, totalAtoms: f32) -> vec4<f32> {\\r\\n\\treturn colormap_haze(f32(numRaySphereIntersections)/(drawSettings.totalAtoms/16))/2+colormap_haze(f32(numRaySphereIntersections)/400)/2;\\r\\n}\\r\\n\\r\\nfn debugModeOctree2(numIntersected: i32, iteration: i32, maxIterations: i32) -> vec4<f32> {\\r\\n\\tvar rAdd = 0.0;\\r\\n\\tif (iteration > 0) {\\r\\n\\t\\trAdd = 0.2;\\r\\n\\t}\\r\\n\\treturn vec4(0.0, -(f32(iteration)/f32(maxIterations)+rAdd), 0.0, 0.0)+colormap_spectral(f32(numIntersected)/150);\\r\\n}\\r\\n\\r\\nfn debugModeOctree3(numRaySphereIntersections: i32, numIntersected: i32, intersecting: i32) -> vec4<f32> {\\r\\n\\tvar iAdd = vec4(0.0, 0.0, 0.0, 0.0);\\r\\n\\tif (intersecting >= 0) {\\r\\n\\t\\tiAdd = vec4(-0.05, -0.05, 0.1, 0.0);\\r\\n\\t}\\r\\n\\treturn colormap_haze(f32(numRaySphereIntersections)/(400))/2+colormap_spectral(f32(numIntersected)/100)/2+iAdd;\\r\\n}\\r\\n\\r\\nfn debugModeDebug(numRaySphereIntersections: i32, numIntersected: i32, intersecting: i32, stackPos: i32, resultColor: vec4<f32>, iteration: i32, closestRealHitT: f32) -> vec4<f32> {\\r\\n\\tvar iAdd = vec4(0.0, 0.0, 0.0, 0.0);\\r\\n\\tif (intersecting >= 0) {\\r\\n\\t\\tiAdd = vec4(-0.05, -0.05, 0.1, 0.0);\\r\\n\\t}\\r\\n\\tvar realHitAdd = vec4(0.0, 0.0, 0.0, 0.0);\\r\\n\\tif (closestRealHitT >= 50000) {\\r\\n\\t\\trealHitAdd = vec4(0.25, -0.05, -0.45, 0.0);\\r\\n\\t}\\r\\n\\tvar cOct = vec4(0, (colormap_haze(f32(numRaySphereIntersections)/(400))/4+colormap_spectral(f32(numIntersected)/100)/4).g, 0, 0);\\r\\n\\treturn resultColor+vec4(0.5, 0, 0, 0)*(f32(stackPos)/8)+vec4(0, 0.3, 0, 0)*(f32(iteration)/100)+cOct+iAdd+realHitAdd;\\r\\n}\\r\\n\\r\\nfn debugModeDepth(maxDistance: f32) -> vec4<f32> {\\r\\n\\tlet farDistance = 400.0;\\r\\n\\tif (maxDistance < farDistance) {\\r\\n\\t\\treturn colormap_eosb(maxDistance/farDistance);\\r\\n\\t} else {\\r\\n\\t\\treturn colormap_eosb(min(maxDistance/farDistance, 1))*(1-(maxDistance-farDistance)/(farDistance*3));\\r\\n\\t}\\r\\n}\\r\\n\\r\\nfn debugModeNormals(normal: vec3<f32>) -> vec4<f32> {\\r\\n\\treturn vec4(normal, 1.0);\\r\\n}\\r\\n\\r\\nfn debugModeSteps(stackPos: i32, stackSize: i32) -> vec4<f32> {\\r\\n\\treturn colormap_supernova(f32(stackPos+1)/f32(stackSize));\\r\\n}\\r\\n\\r\\nfn debugModeHideStackPos(resultColor: vec4<f32>, stackPos: i32, toHide: i32, distanceFade: f32) -> vec4<f32> {\\r\\n\\tvar color = resultColor*distanceFade;\\r\\n\\tif (stackPos == toHide) {\\r\\n\\t\\tcolor = vec4(-10.25, -10.05, -10.25, 1.0);\\r\\n    }\\r\\n    return color;\\r\\n}\\r\\n\\r\\nfn debugModeTEnd(t: f32, end: f32) -> vec4<f32> {\\r\\n\\treturn colormap_temperature(t/end);\\r\\n}\\r\\n\\r\\nfn debugModeRaymarchedAtoms(raymarchedAtoms: f32) -> vec4<f32> {\\r\\n\\treturn colormap_greenwhite(raymarchedAtoms/150.0);\\r\\n}\\r\\n\\r\\nfn debugModeBright(resultColor: vec4<f32>, distanceFade: f32) -> vec4<f32> {\\r\\n\\treturn (vec4(abs(0.5-resultColor.x), abs(0.5-resultColor.y), abs(0.5-resultColor.z), 1.0))*(distanceFade);\\r\\n}\\r\\n\\r\\nfn debugModeDefaultWithBase(resultColor: vec4<f32>, distanceFade: f32, closestRealHitT: f32, baseAtomColor: vec4<f32>, dist: f32) -> vec4<f32> {\\r\\n\\tif (closestRealHitT < 50000) {\\r\\n\\t\\treturn mix(resultColor*distanceFade, resultColor*distanceFade*0.25+baseAtomColor*distanceFade, 1-clamp(abs(closestRealHitT-dist)/3, 0, 1));\\r\\n\\t}\\r\\n\\treturn resultColor*distanceFade;\\r\\n}\\r\\n\\r\\nfn debugModeFakeTransparency(resultColor: vec4<f32>, distanceFade: f32, dist: f32, initStart: vec3<f32>, rayDirection: vec3<f32>) -> vec4<f32> {\\r\\n\\tvar accumDist = 1.0;\\r\\n\\tvar last = dist;\\r\\n\\tfor (var i : i32 = 0; i < stackSize; i++) {\\r\\n\\t\\tif (stackT[i]+2 < dist) {\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\t}\\r\\n\\t\\tif (stackT[i] > 50000) {\\r\\n\\t\\t\\tbreak;\\r\\n\\t\\t}\\r\\n\\t\\tlet intersectionEnd = aabbIntersection(initStart, rayDirection, 1.0/rayDirection, bins.bins[stackBins[i]].min, bins.bins[stackBins[i]].max);\\r\\n    \\tlet d = intersectionEnd.y-last;\\r\\n\\t\\tlet binSize = bins.bins[stackBins[i]].max-bins.bins[stackBins[i]].min;\\r\\n\\t\\tlet binSizeLargest = max(binSize.x, max(binSize.y, binSize.z));\\r\\n\\t\\tif (d > 0) {\\r\\n\\t\\t\\tif (d < binSizeLargest*4) {\\r\\n\\t\\t\\t\\taccumDist += d;\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\taccumDist += binSizeLargest;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tlast = stackT[i];\\r\\n\\t}\\r\\n\\t//let binSize = bins.bins[stackBins[i]].max-bins.bins[stackBins[i]].min;\\r\\n\\t//let size = max(binSize.x, max(binSize.y, binSize.z));\\r\\n    //let intersectionEnd = aabbIntersection(origin, direction, inverseDirection, bins.bins[stackBins[0]].min, bins.bins[stackBins[0]].max);\\r\\n    //end = intersectionEnd.y-stackT[0];\\r\\n\\treturn resultColor*distanceFade*((accumDist/25)*mix(0.5, 1.5, drawSettings.debugA)+0.1);\\r\\n}\\r\\n\\r\\nfn debugModeFakeTransparency2(resultColor: vec4<f32>, distanceFade: f32, dist: f32, initStart: vec3<f32>, rayDirection: vec3<f32>) -> vec4<f32> {\\r\\n\\tif (resultColor.r+resultColor.g+resultColor.b < 0.5) {\\r\\n\\t\\treturn resultColor;\\r\\n\\t}\\r\\n\\tvar accumDist = 1.0;\\r\\n\\tvar last = dist;\\r\\n\\tfor (var i : i32 = 0; i < stackSize; i++) {\\r\\n\\t\\tif (stackT[i]+2 < dist) {\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\t}\\r\\n\\t\\tif (stackT[i] > 50000) {\\r\\n\\t\\t\\tbreak;\\r\\n\\t\\t}\\r\\n\\t\\tlet intersectionEnd = aabbIntersection(initStart, rayDirection, 1.0/rayDirection, bins.bins[stackBins[i]].min, bins.bins[stackBins[i]].max);\\r\\n    \\tlet d = intersectionEnd.y-last;\\r\\n\\t\\tlet binSize = bins.bins[stackBins[i]].max-bins.bins[stackBins[i]].min;\\r\\n\\t\\tlet binSizeLargest = max(binSize.x, max(binSize.y, binSize.z));\\r\\n\\t\\tif (d > 0) {\\r\\n\\t\\t\\tif (d < binSizeLargest*4) {\\r\\n\\t\\t\\t\\taccumDist += d;\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\taccumDist += binSizeLargest;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tlast = stackT[i];\\r\\n\\t}\\r\\n\\t//let binSize = bins.bins[stackBins[i]].max-bins.bins[stackBins[i]].min;\\r\\n\\t//let size = max(binSize.x, max(binSize.y, binSize.z));\\r\\n    //let intersectionEnd = aabbIntersection(origin, direction, inverseDirection, bins.bins[stackBins[0]].min, bins.bins[stackBins[0]].max);\\r\\n    //end = intersectionEnd.y-stackT[0];\\r\\n\\treturn vec4(0.2, 0.2, 0.2, 1.0)*distanceFade*((accumDist/25)*mix(0.5, 1.5, drawSettings.debugA)+0.1);\\r\\n}\\r\\n\\r\\nfn debugModeSemilit(resultColor: vec4<f32>, distanceFade: f32, normal: vec3<f32>) -> vec4<f32> {\\r\\n\\tlet n: vec3<f32> = normalize(normal);\\r\\n\\tlet l1: vec3<f32> = normalize(vec3(0.05, 1, 0.25));\\r\\n\\tvar c = mix(resultColor.xyz*0.5, resultColor.xyz*1.25, (dot(n, l1)+1)/2);\\r\\n\\treturn vec4(c, 1.0)*(distanceFade);\\r\\n}\\r\\n\\r\\nfn debugModeLit(resultColor: vec4<f32>, distanceFade: f32, normal: vec3<f32>) -> vec4<f32> {\\r\\n\\tlet n: vec3<f32> = normalize(normal);\\r\\n\\tlet l1: vec3<f32> = normalize(vec3(0.5, 1, 0.25));\\r\\n\\tlet l2: vec3<f32> = normalize(vec3(-0.5, 1, 0.25));\\r\\n\\tvar c = max(dot(n, l1), 0)*vec3(0.75, 0.5, 0.5)*resultColor.xyz + max(dot(n, l2), 0)*vec3(0.5, 0.5, 0.75)*resultColor.xyz;\\r\\n\\treturn vec4(c, 1.0)*(distanceFade);\\r\\n}\\r\\n\\r\\nfn debugModeGooch(resultColor: vec4<f32>, distanceFade: f32, normal: vec3<f32>) -> vec4<f32> {\\r\\n\\tlet n: vec3<f32> = normalize(normal);\\r\\n\\tlet l1: vec3<f32> = normalize(vec3(0.5, 1, 0.25));\\r\\n\\tlet ndotl: f32 = dot(n, l1);\\r\\n\\tvar c = mix(vec3(0.65, 0.05, 0.65), vec3(0.9, 0.9, 0.05), (ndotl+1)/2)*resultColor.xyz;\\r\\n\\treturn vec4(c, 1.0)*(distanceFade);\\r\\n}\\r\\n\"","'use strict'\n\nmodule.exports = createTurntableController\n\nvar filterVector = require('filtered-vector')\nvar invert44     = require('gl-mat4/invert')\nvar rotateM      = require('gl-mat4/rotate')\nvar cross        = require('gl-vec3/cross')\nvar normalize3   = require('gl-vec3/normalize')\nvar dot3         = require('gl-vec3/dot')\n\nfunction len3(x, y, z) {\n  return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2))\n}\n\nfunction clamp1(x) {\n  return Math.min(1.0, Math.max(-1.0, x))\n}\n\nfunction findOrthoPair(v) {\n  var vx = Math.abs(v[0])\n  var vy = Math.abs(v[1])\n  var vz = Math.abs(v[2])\n\n  var u = [0,0,0]\n  if(vx > Math.max(vy, vz)) {\n    u[2] = 1\n  } else if(vy > Math.max(vx, vz)) {\n    u[0] = 1\n  } else {\n    u[1] = 1\n  }\n\n  var vv = 0\n  var uv = 0\n  for(var i=0; i<3; ++i ) {\n    vv += v[i] * v[i]\n    uv += u[i] * v[i]\n  }\n  for(var i=0; i<3; ++i) {\n    u[i] -= (uv / vv) *  v[i]\n  }\n  normalize3(u, u)\n  return u\n}\n\nfunction TurntableController(zoomMin, zoomMax, center, up, right, radius, theta, phi) {\n  this.center = filterVector(center)\n  this.up     = filterVector(up)\n  this.right  = filterVector(right)\n  this.radius = filterVector([radius])\n  this.angle  = filterVector([theta, phi])\n  this.angle.bounds = [[-Infinity,-Math.PI/2], [Infinity,Math.PI/2]]\n  this.setDistanceLimits(zoomMin, zoomMax)\n\n  this.computedCenter = this.center.curve(0)\n  this.computedUp     = this.up.curve(0)\n  this.computedRight  = this.right.curve(0)\n  this.computedRadius = this.radius.curve(0)\n  this.computedAngle  = this.angle.curve(0)\n  this.computedToward = [0,0,0]\n  this.computedEye    = [0,0,0]\n  this.computedMatrix = new Array(16)\n  for(var i=0; i<16; ++i) {\n    this.computedMatrix[i] = 0.5\n  }\n\n  this.recalcMatrix(0)\n}\n\nvar proto = TurntableController.prototype\n\nproto.setDistanceLimits = function(minDist, maxDist) {\n  if(minDist > 0) {\n    minDist = Math.log(minDist)\n  } else {\n    minDist = -Infinity\n  }\n  if(maxDist > 0) {\n    maxDist = Math.log(maxDist)\n  } else {\n    maxDist = Infinity\n  }\n  maxDist = Math.max(maxDist, minDist)\n  this.radius.bounds[0][0] = minDist\n  this.radius.bounds[1][0] = maxDist\n}\n\nproto.getDistanceLimits = function(out) {\n  var bounds = this.radius.bounds[0]\n  if(out) {\n    out[0] = Math.exp(bounds[0][0])\n    out[1] = Math.exp(bounds[1][0])\n    return out\n  }\n  return [ Math.exp(bounds[0][0]), Math.exp(bounds[1][0]) ]\n}\n\nproto.recalcMatrix = function(t) {\n  //Recompute curves\n  this.center.curve(t)\n  this.up.curve(t)\n  this.right.curve(t)\n  this.radius.curve(t)\n  this.angle.curve(t)\n\n  //Compute frame for camera matrix\n  var up     = this.computedUp\n  var right  = this.computedRight\n  var uu = 0.0\n  var ur = 0.0\n  for(var i=0; i<3; ++i) {\n    ur += up[i] * right[i]\n    uu += up[i] * up[i]\n  }\n  var ul = Math.sqrt(uu)\n  var rr = 0.0\n  for(var i=0; i<3; ++i) {\n    right[i] -= up[i] * ur / uu\n    rr       += right[i] * right[i]\n    up[i]    /= ul\n  }\n  var rl = Math.sqrt(rr)\n  for(var i=0; i<3; ++i) {\n    right[i] /= rl\n  }\n\n  //Compute toward vector\n  var toward = this.computedToward\n  cross(toward, up, right)\n  normalize3(toward, toward)\n\n  //Compute angular parameters\n  var radius = Math.exp(this.computedRadius[0])\n  var theta  = this.computedAngle[0]\n  var phi    = this.computedAngle[1]\n\n  var ctheta = Math.cos(theta)\n  var stheta = Math.sin(theta)\n  var cphi   = Math.cos(phi)\n  var sphi   = Math.sin(phi)\n\n  var center = this.computedCenter\n\n  var wx = ctheta * cphi \n  var wy = stheta * cphi\n  var wz = sphi\n\n  var sx = -ctheta * sphi\n  var sy = -stheta * sphi\n  var sz = cphi\n\n  var eye = this.computedEye\n  var mat = this.computedMatrix\n  for(var i=0; i<3; ++i) {\n    var x      = wx * right[i] + wy * toward[i] + wz * up[i]\n    mat[4*i+1] = sx * right[i] + sy * toward[i] + sz * up[i]\n    mat[4*i+2] = x\n    mat[4*i+3] = 0.0\n  }\n\n  var ax = mat[1]\n  var ay = mat[5]\n  var az = mat[9]\n  var bx = mat[2]\n  var by = mat[6]\n  var bz = mat[10]\n  var cx = ay * bz - az * by\n  var cy = az * bx - ax * bz\n  var cz = ax * by - ay * bx\n  var cl = len3(cx, cy, cz)\n  cx /= cl\n  cy /= cl\n  cz /= cl\n  mat[0] = cx\n  mat[4] = cy\n  mat[8] = cz\n\n  for(var i=0; i<3; ++i) {\n    eye[i] = center[i] + mat[2+4*i]*radius\n  }\n\n  for(var i=0; i<3; ++i) {\n    var rr = 0.0\n    for(var j=0; j<3; ++j) {\n      rr += mat[i+4*j] * eye[j]\n    }\n    mat[12+i] = -rr\n  }\n  mat[15] = 1.0\n}\n\nproto.getMatrix = function(t, result) {\n  this.recalcMatrix(t)\n  var mat = this.computedMatrix\n  if(result) {\n    for(var i=0; i<16; ++i) {\n      result[i] = mat[i]\n    }\n    return result\n  }\n  return mat\n}\n\nvar zAxis = [0,0,0]\nproto.rotate = function(t, dtheta, dphi, droll) {\n  this.angle.move(t, dtheta, dphi)\n  if(droll) {\n    this.recalcMatrix(t)\n\n    var mat = this.computedMatrix\n    zAxis[0] = mat[2]\n    zAxis[1] = mat[6]\n    zAxis[2] = mat[10]\n\n    var up     = this.computedUp\n    var right  = this.computedRight\n    var toward = this.computedToward\n\n    for(var i=0; i<3; ++i) {\n      mat[4*i]   = up[i]\n      mat[4*i+1] = right[i]\n      mat[4*i+2] = toward[i]\n    }\n    rotateM(mat, mat, droll, zAxis)\n    for(var i=0; i<3; ++i) {\n      up[i] =    mat[4*i]\n      right[i] = mat[4*i+1]\n    }\n\n    this.up.set(t, up[0], up[1], up[2])\n    this.right.set(t, right[0], right[1], right[2])\n  }\n}\n\nproto.pan = function(t, dx, dy, dz) {\n  dx = dx || 0.0\n  dy = dy || 0.0\n  dz = dz || 0.0\n\n  this.recalcMatrix(t)\n  var mat = this.computedMatrix\n\n  var dist = Math.exp(this.computedRadius[0])\n\n  var ux = mat[1]\n  var uy = mat[5]\n  var uz = mat[9]\n  var ul = len3(ux, uy, uz)\n  ux /= ul\n  uy /= ul\n  uz /= ul\n\n  var rx = mat[0]\n  var ry = mat[4]\n  var rz = mat[8]\n  var ru = rx * ux + ry * uy + rz * uz\n  rx -= ux * ru\n  ry -= uy * ru\n  rz -= uz * ru\n  var rl = len3(rx, ry, rz)\n  rx /= rl\n  ry /= rl\n  rz /= rl\n\n  var vx = rx * dx + ux * dy\n  var vy = ry * dx + uy * dy\n  var vz = rz * dx + uz * dy\n  this.center.move(t, vx, vy, vz)\n\n  //Update z-component of radius\n  var radius = Math.exp(this.computedRadius[0])\n  radius = Math.max(1e-4, radius + dz)\n  this.radius.set(t, Math.log(radius))\n}\n\nproto.translate = function(t, dx, dy, dz) {\n  this.center.move(t,\n    dx||0.0,\n    dy||0.0,\n    dz||0.0)\n}\n\n//Recenters the coordinate axes\nproto.setMatrix = function(t, mat, axes, noSnap) {\n  \n  //Get the axes for tare\n  var ushift = 1\n  if(typeof axes === 'number') {\n    ushift = (axes)|0\n  } \n  if(ushift < 0 || ushift > 3) {\n    ushift = 1\n  }\n  var vshift = (ushift + 2) % 3\n  var fshift = (ushift + 1) % 3\n\n  //Recompute state for new t value\n  if(!mat) { \n    this.recalcMatrix(t)\n    mat = this.computedMatrix\n  }\n\n  //Get right and up vectors\n  var ux = mat[ushift]\n  var uy = mat[ushift+4]\n  var uz = mat[ushift+8]\n  if(!noSnap) {\n    var ul = len3(ux, uy, uz)\n    ux /= ul\n    uy /= ul\n    uz /= ul\n  } else {\n    var ax = Math.abs(ux)\n    var ay = Math.abs(uy)\n    var az = Math.abs(uz)\n    var am = Math.max(ax,ay,az)\n    if(ax === am) {\n      ux = (ux < 0) ? -1 : 1\n      uy = uz = 0\n    } else if(az === am) {\n      uz = (uz < 0) ? -1 : 1\n      ux = uy = 0\n    } else {\n      uy = (uy < 0) ? -1 : 1\n      ux = uz = 0\n    }\n  }\n\n  var rx = mat[vshift]\n  var ry = mat[vshift+4]\n  var rz = mat[vshift+8]\n  var ru = rx * ux + ry * uy + rz * uz\n  rx -= ux * ru\n  ry -= uy * ru\n  rz -= uz * ru\n  var rl = len3(rx, ry, rz)\n  rx /= rl\n  ry /= rl\n  rz /= rl\n  \n  var fx = uy * rz - uz * ry\n  var fy = uz * rx - ux * rz\n  var fz = ux * ry - uy * rx\n  var fl = len3(fx, fy, fz)\n  fx /= fl\n  fy /= fl\n  fz /= fl\n\n  this.center.jump(t, ex, ey, ez)\n  this.radius.idle(t)\n  this.up.jump(t, ux, uy, uz)\n  this.right.jump(t, rx, ry, rz)\n\n  var phi, theta\n  if(ushift === 2) {\n    var cx = mat[1]\n    var cy = mat[5]\n    var cz = mat[9]\n    var cr = cx * rx + cy * ry + cz * rz\n    var cf = cx * fx + cy * fy + cz * fz\n    if(tu < 0) {\n      phi = -Math.PI/2\n    } else {\n      phi = Math.PI/2\n    }\n    theta = Math.atan2(cf, cr)\n  } else {\n    var tx = mat[2]\n    var ty = mat[6]\n    var tz = mat[10]\n    var tu = tx * ux + ty * uy + tz * uz\n    var tr = tx * rx + ty * ry + tz * rz\n    var tf = tx * fx + ty * fy + tz * fz\n\n    phi = Math.asin(clamp1(tu))\n    theta = Math.atan2(tf, tr)\n  }\n\n  this.angle.jump(t, theta, phi)\n\n  this.recalcMatrix(t)\n  var dx = mat[2]\n  var dy = mat[6]\n  var dz = mat[10]\n\n  var imat = this.computedMatrix\n  invert44(imat, mat)\n  var w  = imat[15]\n  var ex = imat[12] / w\n  var ey = imat[13] / w\n  var ez = imat[14] / w\n\n  var gs = Math.exp(this.computedRadius[0])\n  this.center.jump(t, ex-dx*gs, ey-dy*gs, ez-dz*gs)\n}\n\nproto.lastT = function() {\n  return Math.max(\n    this.center.lastT(),\n    this.up.lastT(),\n    this.right.lastT(),\n    this.radius.lastT(),\n    this.angle.lastT())\n}\n\nproto.idle = function(t) {\n  this.center.idle(t)\n  this.up.idle(t)\n  this.right.idle(t)\n  this.radius.idle(t)\n  this.angle.idle(t)\n}\n\nproto.flush = function(t) {\n  this.center.flush(t)\n  this.up.flush(t)\n  this.right.flush(t)\n  this.radius.flush(t)\n  this.angle.flush(t)\n}\n\nproto.setDistance = function(t, d) {\n  if(d > 0) {\n    this.radius.set(t, Math.log(d))\n  }\n}\n\nproto.lookAt = function(t, eye, center, up) {\n  this.recalcMatrix(t)\n\n  eye    = eye    || this.computedEye\n  center = center || this.computedCenter\n  up     = up     || this.computedUp\n\n  var ux = up[0]\n  var uy = up[1]\n  var uz = up[2]\n  var ul = len3(ux, uy, uz)\n  if(ul < 1e-6) {\n    return\n  }\n  ux /= ul\n  uy /= ul\n  uz /= ul\n\n  var tx = eye[0] - center[0]\n  var ty = eye[1] - center[1]\n  var tz = eye[2] - center[2]\n  var tl = len3(tx, ty, tz)\n  if(tl < 1e-6) {\n    return\n  }\n  tx /= tl\n  ty /= tl\n  tz /= tl\n\n  var right = this.computedRight\n  var rx = right[0]\n  var ry = right[1]\n  var rz = right[2]\n  var ru = ux*rx + uy*ry + uz*rz\n  rx -= ru * ux\n  ry -= ru * uy\n  rz -= ru * uz\n  var rl = len3(rx, ry, rz)\n\n  if(rl < 0.01) {\n    rx = uy * tz - uz * ty\n    ry = uz * tx - ux * tz\n    rz = ux * ty - uy * tx\n    rl = len3(rx, ry, rz)\n    if(rl < 1e-6) {\n      return\n    }\n  }\n  rx /= rl\n  ry /= rl\n  rz /= rl\n\n  this.up.set(t, ux, uy, uz)\n  this.right.set(t, rx, ry, rz)\n  this.center.set(t, center[0], center[1], center[2])\n  this.radius.set(t, Math.log(tl))\n\n  var fx = uy * rz - uz * ry\n  var fy = uz * rx - ux * rz\n  var fz = ux * ry - uy * rx\n  var fl = len3(fx, fy, fz)\n  fx /= fl\n  fy /= fl\n  fz /= fl\n\n  var tu = ux*tx + uy*ty + uz*tz\n  var tr = rx*tx + ry*ty + rz*tz\n  var tf = fx*tx + fy*ty + fz*tz\n\n  var phi   = Math.asin(clamp1(tu))\n  var theta = Math.atan2(tf, tr)\n\n  var angleState = this.angle._state\n  var lastTheta  = angleState[angleState.length-1]\n  var lastPhi    = angleState[angleState.length-2]\n  lastTheta      = lastTheta % (2.0 * Math.PI)\n  var dp = Math.abs(lastTheta + 2.0 * Math.PI - theta)\n  var d0 = Math.abs(lastTheta - theta)\n  var dn = Math.abs(lastTheta - 2.0 * Math.PI - theta)\n  if(dp < d0) {\n    lastTheta += 2.0 * Math.PI\n  }\n  if(dn < d0) {\n    lastTheta -= 2.0 * Math.PI\n  }\n\n  this.angle.jump(this.angle.lastT(), lastTheta, lastPhi)\n  this.angle.set(t, theta, phi)\n}\n\nfunction createTurntableController(options) {\n  options = options || {}\n\n  var center = options.center || [0,0,0]\n  var up     = options.up     || [0,1,0]\n  var right  = options.right  || findOrthoPair(up)\n  var radius = options.radius || 1.0\n  var theta  = options.theta  || 0.0\n  var phi    = options.phi    || 0.0\n\n  center = [].slice.call(center, 0, 3)\n\n  up = [].slice.call(up, 0, 3)\n  normalize3(up, up)\n\n  right = [].slice.call(right, 0, 3)\n  normalize3(right, right)\n\n  if('eye' in options) {\n    var eye = options.eye\n    var toward = [\n      eye[0]-center[0],\n      eye[1]-center[1],\n      eye[2]-center[2]\n    ]\n    cross(right, toward, up)\n    if(len3(right[0], right[1], right[2]) < 1e-6) {\n      right = findOrthoPair(up)\n    } else {\n      normalize3(right, right)\n    }\n\n    radius = len3(toward[0], toward[1], toward[2])\n\n    var ut = dot3(up, toward) / radius\n    var rt = dot3(right, toward) / radius\n    phi    = Math.acos(ut)\n    theta  = Math.acos(rt)\n  }\n\n  //Use logarithmic coordinates for radius\n  radius = Math.log(radius)\n\n  //Return the controller\n  return new TurntableController(\n    options.zoomMin,\n    options.zoomMax,\n    center,\n    up,\n    right,\n    radius,\n    theta,\n    phi)\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nc = undefined;","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/main.ts\");\n",""],"names":[],"sourceRoot":""}